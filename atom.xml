<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iSee Blog</title>
  
  
  <link href="http://www.isee.wang/atom.xml" rel="self"/>
  
  <link href="http://www.isee.wang/"/>
  <updated>2023-06-05T01:22:42.495Z</updated>
  <id>http://www.isee.wang/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticSearch-聚合（五）聚合示例</title>
    <link href="http://www.isee.wang/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%94%EF%BC%89%E8%81%9A%E5%90%88%E7%A4%BA%E4%BE%8B/"/>
    <id>http://www.isee.wang/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%94%EF%BC%89%E8%81%9A%E5%90%88%E7%A4%BA%E4%BE%8B/</id>
    <published>2022-12-08T03:29:06.000Z</published>
    <updated>2023-06-05T01:22:42.495Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><div class="note info no-icon"><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B">ElasticSearch 聚合（一）简介</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B0%9D%E8%AF%95%E8%81%9A%E5%90%88">ElasticSearch 聚合（二）尝试聚合</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%A1%E5%BD%A2%E5%9B%BE">ElasticSearch 聚合（三）条形图</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E5%9B%9B%EF%BC%89%E5%9F%BA%E4%BA%8E%E8%8C%83%E5%9B%B4%E3%80%81%E8%BF%87%E6%BB%A4%E4%BB%A5%E5%8F%8A%E6%8E%92%E5%BA%8F%E7%9A%84%E8%81%9A%E5%90%88">ElasticSearch 聚合（四）基于范围、过滤以及排序的聚合</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%94%EF%BC%89%E8%81%9A%E5%90%88%E7%A4%BA%E4%BE%8B">ElasticSearch 聚合（五）聚合示例</a></li></ol></div><h2 id="聚合示例1"><a href="#聚合示例1" class="headerlink" title="聚合示例1"></a>聚合示例1</h2><div class="tabs" id="aggregation-simple1"><ul class="nav-tabs"><li class="tab active"><a href="#aggregation-simple1-1"><code>Query DSL</code></a></li></ul><div class="tab-content"><div class="tab-pane active" id="aggregation-simple1-1"><p>一行记录代表一个用户的一次考试，查询单个用户的考试，反查各考试的参考人数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /examination_base_info_document/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;   ⑴</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;userId&quot;: &quot;1709121972885834550&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;track_total_hits&quot;: 2147483647,</span><br><span class="line">  &quot;collapse&quot;: &#123;   ⑵</span><br><span class="line">    &quot;field&quot;: &quot;examinationId&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;my_exam&quot;: &#123;    ⑶</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;examinationId&quot;,</span><br><span class="line">        &quot;size&quot;: 2147483647</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;all&quot;: &#123;    ⑷</span><br><span class="line">      &quot;global&quot;: &#123;&#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;total_exam&quot;: &#123;</span><br><span class="line">          &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;examinationId&quot;,</span><br><span class="line">            &quot;size&quot;: 2147483647</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>⑴ 查询单个用户id⑵ 字段去重⑶ 单个用户按照考试id分组⑷ 全局桶按照考试id分组</code></pre></div></div></div><h2 id="聚合示例2"><a href="#聚合示例2" class="headerlink" title="聚合示例2"></a>聚合示例2</h2><div class="tabs" id="aggregation-simple2"><ul class="nav-tabs"><li class="tab active"><a href="#aggregation-simple2-1"><code>Query DSL</code></a></li><li class="tab"><a href="#aggregation-simple2-2"><code>Java 代码实现</code></a></li></ul><div class="tab-content"><div class="tab-pane active" id="aggregation-simple2-1"><p>一行记录代表一道考题的回答是否正确，查询单个考试，统计各试卷各考题的正确率</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /examination_record_document/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 0,</span><br><span class="line">  &quot;query&quot;: &#123;    ⑴</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;examinationId&quot;: &quot;1709121938526093488&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;paperId&quot;: &#123;    ⑵</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;paperId&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;problemId&quot;: &#123;    ⑶</span><br><span class="line">          &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;problemId&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;userAnswerIsRightKey&quot;: &#123;   ⑷</span><br><span class="line">              &quot;stats&quot;: &#123;</span><br><span class="line">                &quot;field&quot;: &quot;userAnswerIsRightKey&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;right-percentage&quot;: &#123;   ⑸</span><br><span class="line">              &quot;bucket_script&quot;: &#123;</span><br><span class="line">                &quot;buckets_path&quot;: &#123;</span><br><span class="line">                  &quot;wrong&quot;: &quot;userAnswerIsRightKey.sum&quot;,</span><br><span class="line">                  &quot;total&quot;: &quot;userAnswerIsRightKey.count&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;script&quot;: &quot;100 - params.wrong / params.total * 100&quot;,</span><br><span class="line">                &quot;format&quot;: &quot;#.##&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>⑴ 查询单个考试id⑵ 按试卷id分组⑶ 嵌套桶按考题id分组⑷ 是否正确指标 0正确 1错误⑸ 正确率脚本</code></pre></div><div class="tab-pane" id="aggregation-simple2-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;es示例&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/yk/es&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsController</span> <span class="keyword">extends</span> <span class="title class_">AbstractCrispsController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ApiOperation(&quot;aggregations示例&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/aggregations&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aggregations</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//声明SearchSourceBuilder对象</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">searchSourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        <span class="comment">//声明Bool查询对象</span></span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">bqb</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">        <span class="comment">//must类比成mysql里的and条件，termQuery为不进行分词的精确匹配查询</span></span><br><span class="line">        bqb.must(termQuery(<span class="string">&quot;examinationId&quot;</span>, <span class="string">&quot;1709121938526093488&quot;</span>));</span><br><span class="line">        <span class="comment">//matchQuery为分词查询，将会针对content的内容进行分词后匹配</span></span><br><span class="line"><span class="comment">//        bqb.must(matchQuery(&quot;settlementUserId&quot;, &quot;596127065183256700&quot;));</span></span><br><span class="line">        <span class="comment">//should类比成mysql里的or条件，wildcardQuery为模糊匹配，可以支持左右模糊</span></span><br><span class="line"><span class="comment">//        bqb.should(wildcardQuery(&quot;text&quot;, &quot;你好*&quot;));</span></span><br><span class="line">        <span class="comment">//将条件语句实装</span></span><br><span class="line">        searchSourceBuilder.query(bqb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 我们并不关心搜索结果的具体内容，所以将返回记录数设置为 0 来提高查询速度。</span></span><br><span class="line">        searchSourceBuilder.size(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 聚合</span></span><br><span class="line">        Map&lt;String, String&gt; scriptParams = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        scriptParams.put(<span class="string">&quot;wrong&quot;</span>, <span class="string">&quot;userAnswerIsRightKey.sum&quot;</span>);</span><br><span class="line">        scriptParams.put(<span class="string">&quot;total&quot;</span>, <span class="string">&quot;userAnswerIsRightKey.count&quot;</span>);</span><br><span class="line">        searchSourceBuilder.aggregation(</span><br><span class="line">                AggregationBuilders.terms(<span class="string">&quot;paperId&quot;</span>).field(<span class="string">&quot;paperId&quot;</span>).size(Integer.MAX_VALUE)</span><br><span class="line">                        .subAggregation(AggregationBuilders.terms(<span class="string">&quot;problemId&quot;</span>).field(<span class="string">&quot;problemId&quot;</span>).size(Integer.MAX_VALUE)</span><br><span class="line">                                .subAggregation(AggregationBuilders.stats(<span class="string">&quot;userAnswerIsRightKey&quot;</span>).field(<span class="string">&quot;userAnswerIsRightKey&quot;</span>))</span><br><span class="line">                                .subAggregation(PipelineAggregatorBuilders.bucketScript(<span class="string">&quot;right-percentage&quot;</span>, scriptParams,</span><br><span class="line">                                        <span class="keyword">new</span> <span class="title class_">Script</span>(<span class="string">&quot;100 - params.wrong / params.total * 100&quot;</span>)).format(<span class="string">&quot;#.##&quot;</span>))));</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;Query DSL: &#123;&#125;&quot;</span>, searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> dggESTemplate.query(<span class="string">&quot;examination_record_document&quot;</span>, searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;SearchResponse: &#123;&#125;&quot;</span>, searchResponse);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取值</span></span><br><span class="line">        <span class="type">ParsedStringTerms</span> <span class="variable">paperTerms</span> <span class="operator">=</span> (ParsedStringTerms) searchResponse.getAggregations().asMap().get(<span class="string">&quot;paperId&quot;</span>);</span><br><span class="line">        paperTerms.getBuckets().forEach(paperBucket -&gt; &#123;</span><br><span class="line">            <span class="type">ParsedStringTerms</span> <span class="variable">problemTerms</span> <span class="operator">=</span> (ParsedStringTerms) paperBucket.getAggregations().asMap().get(<span class="string">&quot;problemId&quot;</span>);</span><br><span class="line">            problemTerms.getBuckets().forEach(problemBucket -&gt; &#123;</span><br><span class="line">                <span class="type">ParsedSimpleValue</span> <span class="variable">rightPercentage</span> <span class="operator">=</span> (ParsedSimpleValue) problemBucket.getAggregations().asMap().get(<span class="string">&quot;right-percentage&quot;</span>);</span><br><span class="line">                <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> rightPercentage.value();</span><br><span class="line">                log.info(<span class="string">&quot;right-percentage: &#123;&#125;&quot;</span>, result);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ElasticSearch 聚合（四）基于范围、过滤以及排序的聚合</title>
    <link href="http://www.isee.wang/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E5%9B%9B%EF%BC%89%E5%9F%BA%E4%BA%8E%E8%8C%83%E5%9B%B4%E3%80%81%E8%BF%87%E6%BB%A4%E4%BB%A5%E5%8F%8A%E6%8E%92%E5%BA%8F%E7%9A%84%E8%81%9A%E5%90%88/"/>
    <id>http://www.isee.wang/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E5%9B%9B%EF%BC%89%E5%9F%BA%E4%BA%8E%E8%8C%83%E5%9B%B4%E3%80%81%E8%BF%87%E6%BB%A4%E4%BB%A5%E5%8F%8A%E6%8E%92%E5%BA%8F%E7%9A%84%E8%81%9A%E5%90%88/</id>
    <published>2022-10-19T09:01:44.000Z</published>
    <updated>2023-06-05T01:22:42.495Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><div class="note info no-icon"><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B">ElasticSearch 聚合（一）简介</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B0%9D%E8%AF%95%E8%81%9A%E5%90%88">ElasticSearch 聚合（二）尝试聚合</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%A1%E5%BD%A2%E5%9B%BE">ElasticSearch 聚合（三）条形图</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E5%9B%9B%EF%BC%89%E5%9F%BA%E4%BA%8E%E8%8C%83%E5%9B%B4%E3%80%81%E8%BF%87%E6%BB%A4%E4%BB%A5%E5%8F%8A%E6%8E%92%E5%BA%8F%E7%9A%84%E8%81%9A%E5%90%88">ElasticSearch 聚合（四）基于范围、过滤以及排序的聚合</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%94%EF%BC%89%E8%81%9A%E5%90%88%E7%A4%BA%E4%BE%8B">ElasticSearch 聚合（五）聚合示例</a></li></ol></div><h2 id="范围限定的聚合"><a href="#范围限定的聚合" class="headerlink" title="范围限定的聚合"></a>范围限定的聚合</h2><p>所有聚合的例子到目前为止，你可能已经注意到，我们的搜索请求省略了一个 query 。 整个请求只不过是一个聚合。</p><p>聚合可以与搜索请求同时执行，但是我们需要理解一个新概念： 范围 。 默认情况下，聚合与查询是对同一范围进行操作的，也就是说，聚合是基于我们查询匹配的文档集合进行计算的。</p><p>让我们看看第一个聚合的示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot; : 0,</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;colors&quot; : &#123;</span><br><span class="line">            &quot;terms&quot; : &#123;</span><br><span class="line">              &quot;field&quot; : &quot;color&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到聚合是隔离的。现实中，Elasticsearch 认为 &quot;没有指定查询&quot; 和 &quot;查询所有文档&quot; 是等价的。前面这个查询内部会转化成下面的这个请求：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot; : 0,</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match_all&quot; : &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;colors&quot; : &#123;</span><br><span class="line">            &quot;terms&quot; : &#123;</span><br><span class="line">              &quot;field&quot; : &quot;color&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为聚合总是对查询范围内的结果进行操作的，所以一个隔离的聚合实际上是在对 match_all 的结果范围操作，即所有的文档。</p><p>一旦有了范围的概念，我们就能更进一步对聚合进行自定义。我们前面所有的示例都是对 所有 数据计算统计信息的：销量最高的汽车，所有汽车的平均售价，最佳销售月份等等。</p><p>利用范围，我们可以问“福特在售车有多少种颜色？”诸如此类的问题。可以简单的在请求中加上一个查询（本例中为 match 查询）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;make&quot; : &quot;ford&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;colors&quot; : &#123;</span><br><span class="line">            &quot;terms&quot; : &#123;</span><br><span class="line">              &quot;field&quot; : &quot;color&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们没有指定 &quot;size&quot; : 0 ，所以搜索结果和聚合结果都被返回了：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">...</span><br><span class="line">   <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">1.6931472</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">25000</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;make&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ford&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;sold&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2014-02-12&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">30000</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;green&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;make&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ford&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;sold&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2014-05-18&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;colors&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;green&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>看上去这并没有什么，但却对高大上的仪表盘来说至关重要。 加入一个搜索栏可以将任何静态的仪表板变成一个实时数据搜索设备。 这让用户可以搜索数据，查看所有实时更新的图形（由于聚合的支持以及对查询范围的限定）。 这是 Hadoop 无法做到的！</p><h3 id="全局桶"><a href="#全局桶" class="headerlink" title="全局桶"></a>全局桶</h3><p>通常我们希望聚合是在查询范围内的，但有时我们也想要搜索它的子集，而聚合的对象却是 所有 数据。</p><p>例如，比方说我们想知道福特汽车与 <em>所有</em> 汽车平均售价的比较。我们可以用普通的聚合（查询范围内的）得到第一个信息，然后用 <code>全局</code> 桶获得第二个信息。</p><p><code>全局</code> 桶包含 <em>所有</em> 的文档，它无视查询的范围。因为它还是一个桶，我们可以像平常一样将聚合嵌套在内：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot; : 0,</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;make&quot; : &quot;ford&quot;   ⑴</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;single_avg_price&quot;: &#123;</span><br><span class="line">            &quot;avg&quot; : &#123; &quot;field&quot; : &quot;price&quot; &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;all&quot;: &#123;</span><br><span class="line">            &quot;global&quot; : &#123;&#125;,    ⑵</span><br><span class="line">            &quot;aggs&quot; : &#123;</span><br><span class="line">                &quot;avg_price&quot;: &#123;</span><br><span class="line">                    &quot;avg&quot; : &#123; &quot;field&quot; : &quot;price&quot; &#125;   ⑶ </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>⑴ 聚合操作在查询范围内（例如：所有文档匹配 ford ）⑵ global 全局桶没有参数。⑶ 聚合操作针对所有文档，忽略汽车品牌。</code></pre><p>single_avg_price 度量计算是基于查询范围内所有文档，即所有 福特 汽车。avg_price 度量是嵌套在 全局 桶下的，这意味着它完全忽略了范围并对所有文档进行计算。聚合返回的平均值是所有汽车的平均售价。</p><p>如果能一直坚持读到这里，应该知道我们有个真言：尽可能的使用过滤器。它同样可以应用于聚合，在下一章中，我们会展示如何对聚合结果进行过滤而不是仅对查询范围做限定。</p><h2 id="过滤和聚合"><a href="#过滤和聚合" class="headerlink" title="过滤和聚合"></a>过滤和聚合</h2><p>聚合范围限定还有一个自然的扩展就是过滤。因为聚合是在查询结果范围内操作的，任何可以适用于查询的过滤器也可以应用在聚合上。</p><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>如果我们想找到售价在 $10,000 美元之上的所有汽车同时也为这些车计算平均售价， 可以简单地使用一个 constant_score 查询和 filter 约束：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot; : 0,</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;constant_score&quot;: &#123;</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;range&quot;: &#123;</span><br><span class="line">                    &quot;price&quot;: &#123;</span><br><span class="line">                        &quot;gte&quot;: 10000</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;single_avg_price&quot;: &#123;</span><br><span class="line">            &quot;avg&quot; : &#123; &quot;field&quot; : &quot;price&quot; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这正如我们在前面章节中讨论过那样，从根本上讲，使用 non-scoring 查询和使用 match 查询没有任何区别。查询（包括了一个过滤器）返回一组文档的子集，聚合正是操作这些文档。使用 filtering query 会忽略评分，并有可能会缓存结果数据等等。</p><h3 id="过滤桶"><a href="#过滤桶" class="headerlink" title="过滤桶"></a>过滤桶</h3><p>但是如果我们只想对聚合结果过滤怎么办？ 假设我们正在为汽车经销商创建一个搜索页面， 我们希望显示用户搜索的结果，但是我们同时也想在页面上提供更丰富的信息，包括（与搜索匹配的）上个月度汽车的平均售价。</p><p>这里我们无法简单的做范围限定，因为有两个不同的条件。搜索结果必须是 ford ，但是聚合结果必须满足 <code>ford</code> AND <code>sold &gt; now - 1M</code> 。</p><p>为了解决这个问题，我们可以用一种特殊的桶，叫做 <code>filter</code> （注：过滤桶） 。 我们可以指定一个过滤桶，当文档满足过滤桶的条件时，我们将其加入到桶内。</p><p>查询结果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;query&quot;:&#123;</span><br><span class="line">      &quot;match&quot;: &#123;</span><br><span class="line">         &quot;make&quot;: &quot;ford&quot;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   &quot;aggs&quot;:&#123;</span><br><span class="line">      &quot;recent_sales&quot;: &#123;</span><br><span class="line">         &quot;filter&quot;: &#123;    ⑴</span><br><span class="line">            &quot;range&quot;: &#123;</span><br><span class="line">               &quot;sold&quot;: &#123;</span><br><span class="line">                  &quot;from&quot;: &quot;now-1M&quot;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;average_price&quot;:&#123;</span><br><span class="line">               &quot;avg&quot;: &#123;</span><br><span class="line">                  &quot;field&quot;: &quot;price&quot;    ⑵</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>⑴ 使用 过滤 桶在 查询 范围基础上应用过滤器。⑵ avg 度量只会对 ford 和上个月售出的文档计算平均售价。</code></pre><p>因为 <code>filter</code> 桶和其他桶的操作方式一样，所以可以随意将其他桶和度量嵌入其中。所有嵌套的组件都会 &quot;继承&quot; 这个过滤，这使我们可以按需针对聚合过滤出选择部分。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/tags/ElasticSearch/"/>
    
    <category term="Aggregations" scheme="http://www.isee.wang/tags/Aggregations/"/>
    
    <category term="聚合" scheme="http://www.isee.wang/tags/%E8%81%9A%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 聚合（三）条形图</title>
    <link href="http://www.isee.wang/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%A1%E5%BD%A2%E5%9B%BE/"/>
    <id>http://www.isee.wang/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%A1%E5%BD%A2%E5%9B%BE/</id>
    <published>2021-10-19T02:50:36.000Z</published>
    <updated>2023-06-05T01:22:42.495Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><div class="note info no-icon"><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B">ElasticSearch 聚合（一）简介</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B0%9D%E8%AF%95%E8%81%9A%E5%90%88">ElasticSearch 聚合（二）尝试聚合</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%A1%E5%BD%A2%E5%9B%BE">ElasticSearch 聚合（三）条形图</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E5%9B%9B%EF%BC%89%E5%9F%BA%E4%BA%8E%E8%8C%83%E5%9B%B4%E3%80%81%E8%BF%87%E6%BB%A4%E4%BB%A5%E5%8F%8A%E6%8E%92%E5%BA%8F%E7%9A%84%E8%81%9A%E5%90%88">ElasticSearch 聚合（四）基于范围、过滤以及排序的聚合</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%94%EF%BC%89%E8%81%9A%E5%90%88%E7%A4%BA%E4%BE%8B">ElasticSearch 聚合（五）聚合示例</a></li></ol></div><h2 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h2><p>聚合还有一个令人激动的特性就是能够十分容易地将它们转换成图表和图形。本章中， 我们正在通过示例数据来完成各种各样的聚合分析，最终，我们将会发现聚合功能是非常强大的。</p><p>直方图 histogram 特别有用。 它本质上是一个条形图，如果有创建报表或分析仪表盘的经验，那么我们会毫无疑问的发现里面有一些图表是条形图。 创建直方图需要指定一个区间，如果我们要为售价创建一个直方图，可以将间隔设为 20,000。这样做将会在每个 $20,000 档创建一个新桶，然后文档会被分到对应的桶中。</p><p>对于仪表盘来说，我们希望知道每个售价区间内汽车的销量。我们还会想知道每个售价区间内汽车所带来的收入，可以通过对每个区间内已售汽车的售价求和得到。</p><p>可以用 histogram 和一个嵌套的 sum 度量得到我们想要的答案：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;:&#123;</span><br><span class="line">      &quot;price&quot;:&#123;</span><br><span class="line">         &quot;histogram&quot;:&#123;    ⑴</span><br><span class="line">            &quot;field&quot;: &quot;price&quot;,</span><br><span class="line">            &quot;interval&quot;: 20000</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;:&#123;</span><br><span class="line">            &quot;revenue&quot;: &#123;</span><br><span class="line">               &quot;sum&quot;: &#123;     ⑵</span><br><span class="line">                 &quot;field&quot; : &quot;price&quot;</span><br><span class="line">               &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>⑴ histogram 桶要求两个参数：一个数值字段以及一个定义桶大小间隔。⑵ sum 度量嵌套在每个售价区间内，用来显示每个区间内的总收入。</code></pre><p>如我们所见，查询是围绕 price 聚合构建的，它包含一个 histogram 桶。它要求字段的类型必须是数值型的同时需要设定分组的间隔范围。 间隔设置为 20,000 意味着我们将会得到如 [0-19999, 20000-39999, ...] 这样的区间。</p><p>接着，我们在直方图内定义嵌套的度量，这个 sum 度量，它会对落入某一具体售价区间的文档中 price 字段的值进行求和。 这可以为我们提供每个售价区间的收入，从而可以发现到底是普通家用车赚钱还是奢侈车赚钱。</p><p>响应结果如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">...</span><br><span class="line">   <span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;revenue&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">37000</span></span><br><span class="line">               <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">20000</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;revenue&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">95000</span></span><br><span class="line">               <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">80000</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;revenue&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">80000</span></span><br><span class="line">               <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>结果很容易理解，不过应该注意到直方图的键值是区间的下限。键 0 代表区间 0-19，999 ，键 20000 代表区间 20，000-39，999 ，等等。</p><div class="note warning"><p>我们可能会注意到空的区间，比如：$40，000-60，000，没有出现在响应中。 histogram 桶默认会忽略它，因为它有可能会导致不希望的潜在错误输出。</p><p>我们会在下一小节中讨论如何包括空桶。返回空桶 <a href="#%E8%BF%94%E5%9B%9E%E7%A9%BA-Buckets">返回空 Buckets</a> 。</p></div><p>可以在图 <a href="#">Figure 35, “Sales and Revenue per price bracket”</a> 中看到以上数据直方图的图形化表示。</p><p><strong>Figure 35. Sales and Revenue per price bracket</strong><br><img src="/images/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%A1%E5%BD%A2%E5%9B%BE/1.png" alt="Sales and Revenue per price bracket" title="Sales and Revenue per price bracket" loading="lazy"></p><p>当然，我们可以为任何聚合输出的分类和统计结果创建条形图，而不只是 直方图 桶。让我们以最受欢迎 10 种汽车以及它们的平均售价、标准差这些信息创建一个条形图。 我们会用到 terms 桶和 extended_stats 度量：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot; : 0,</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;makes&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;make&quot;,</span><br><span class="line">        &quot;size&quot;: 10</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;aggs&quot;: &#123;</span><br><span class="line">        &quot;stats&quot;: &#123;</span><br><span class="line">          &quot;extended_stats&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;price&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码会按受欢迎度返回制造商列表以及它们各自的统计信息。我们对其中的 stats.avg 、 stats.count 和 stats.std_deviation 信息特别感兴趣，并用 它们计算出标准差：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std_err = std_deviation / count</span><br></pre></td></tr></table></figure><p>创建图表如图 <a href="#">Figure 36, “Average price of all makes, with error bars”</a> 。</p><p><strong>Figure 36. Average price of all makes, with error bars</strong><br><img src="/images/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%A1%E5%BD%A2%E5%9B%BE/2.png" alt="Average price of all makes, with error bars" title="Average price of all makes, with error bars" loading="lazy"></p><h2 id="按时间统计"><a href="#按时间统计" class="headerlink" title="按时间统计"></a>按时间统计</h2><p>如果搜索是在 Elasticsearch 中使用频率最高的，那么构建按时间统计的 date_histogram 紧随其后。 为什么你会想用 date_histogram 呢？</p><p>假设你的数据带时间戳。 无论是什么数据（Apache 事件日志、股票买卖交易时间、棒球运动时间）只要带有时间戳都可以进行 date_histogram 分析。当你的数据有时间戳，你总是想在 <em>时间</em> 维度上构建指标分析：</p><ul><li>今年每月销售多少台汽车？</li><li>这只股票最近 12 小时的价格是多少？</li><li>我们网站上周每小时的平均响应延迟时间是多少？</li></ul><p>虽然通常的 histogram 都是条形图，但 date_histogram 倾向于转换成线状图以展示时间序列。 许多公司用 Elasticsearch <em>仅仅</em> 只是为了分析时间序列数据。 date_histogram 分析是它们最基本的需要。</p><p>date_histogram 与 通常的 histogram 类似。 但不是在代表数值范围的数值字段上构建 buckets，而是在时间范围上构建 buckets。 因此每一个 bucket 都被定义成一个特定的日期大小 (比如， 1个月 或 2.5 天 )。</p><div class="note danger"><p><strong>可以用通常的 histogram 进行时间分析吗？</strong></p><p>从技术上来讲，是可以的。 通常的 histogram bucket（桶）是可以处理日期的。 但是它不能自动识别日期。 而用 date_histogram ，你可以指定时间段如 1 个月 ，它能聪明地知道 2 月的天数比 12 月少。 date_histogram 还具有另外一个优势，即能合理地处理时区，这可以使你用客户端的时区进行图标定制，而不是用服务器端时区。</p><p>通常的 histogram 会把日期看做是数字，这意味着你必须以微秒为单位指明时间间隔。另外聚合并不知道日历时间间隔，使得它对于日期而言几乎没什么用处。</p></div><p>我们的第一个例子将构建一个简单的折线图来回答如下问题： 每月销售多少台汽车？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;sales&quot;: &#123;</span><br><span class="line">         &quot;date_histogram&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;sold&quot;,</span><br><span class="line">            &quot;interval&quot;: &quot;month&quot;,    ⑴</span><br><span class="line">            &quot;format&quot;: &quot;yyyy-MM-dd&quot;    ⑵</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>⑴ 时间间隔要求是日历术语 (如每个 bucket 1 个月)。⑵ 我们提供日期格式以便 buckets 的键值便于阅读。</code></pre><p>我们的查询只有一个聚合，每月构建一个 bucket。这样我们可以得到每个月销售的汽车数量。 另外还提供了一个额外的 format 参数以便 buckets 有 &quot;好看的&quot; 键值。 然而在内部，日期仍然是被简单表示成数值。这可能会使得 UI 设计者抱怨，因此可以提供常用的日期格式进行格式化以更方便阅读。</p><p>结果既符合预期又有一点出人意料（看看你是否能找到意外之处）：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;sales&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key_as_string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2014-01-01&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">1388534400000</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key_as_string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2014-02-01&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">1391212800000</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key_as_string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2014-05-01&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">1398902400000</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key_as_string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2014-07-01&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">1404172800000</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key_as_string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2014-08-01&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">1406851200000</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key_as_string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2014-10-01&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">1412121600000</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key_as_string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2014-11-01&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">1414800000000</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">]</span></span><br><span class="line">...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>聚合结果已经完全展示了。正如你所见，我们有代表月份的 buckets，每个月的文档数目，以及美化后的 key_as_string 。</p><h3 id="返回空-Buckets"><a href="#返回空-Buckets" class="headerlink" title="返回空 Buckets"></a>返回空 Buckets</h3><p>注意到结果末尾处的奇怪之处了吗？</p><p>是的，结果没错。 我们的结果少了一些月份！ date_histogram （和 histogram 一样）默认只会返回文档数目非零的 buckets。</p><p>这意味着你的 histogram 总是返回最少结果。通常，你并不想要这样。对于很多应用，你可能想直接把结果导入到图形库中，而不想做任何后期加工。</p><p>事实上，即使 buckets 中没有文档我们也想返回。可以通过设置两个额外参数来实现这种效果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;sales&quot;: &#123;</span><br><span class="line">         &quot;date_histogram&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;sold&quot;,</span><br><span class="line">            &quot;interval&quot;: &quot;month&quot;,</span><br><span class="line">            &quot;format&quot;: &quot;yyyy-MM-dd&quot;,</span><br><span class="line">            &quot;min_doc_count&quot; : 0,    ⑴</span><br><span class="line">            &quot;extended_bounds&quot; : &#123;     ⑵</span><br><span class="line">                &quot;min&quot; : &quot;2014-01-01&quot;,</span><br><span class="line">                &quot;max&quot; : &quot;2014-12-31&quot;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>⑴ 这个参数强制返回空 buckets。⑵ 这个参数强制返回整年。</code></pre><p>这两个参数会强制返回一年中所有月份的结果，而不考虑结果中的文档数目。 min_doc_count 非常容易理解：它强制返回所有 buckets，即使 buckets 可能为空。</p><p>extended_bounds 参数需要一点解释。 min_doc_count 参数强制返回空 buckets，但是 Elasticsearch 默认只返回你的数据中最小值和最大值之间的 buckets。</p><p>因此如果你的数据只落在了 4 月和 7 月之间，那么你只能得到这些月份的 buckets（可能为空也可能不为空）。因此为了得到全年数据，我们需要告诉 Elasticsearch 我们想要全部 buckets， 即便那些 buckets 可能落在最小日期 <em>之前</em> 或 最大日期 <em>之后</em> 。</p><p>extended_bounds 参数正是如此。一旦你加上了这两个设置，你可以把得到的结果轻易地直接插入到你的图形库中，从而得到类似 <a href="#">Figure 37, “汽车销售时间图”</a> 的图表。</p><p><strong>Figure 37. 汽车销售时间图</strong><br><img src="/images/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%A1%E5%BD%A2%E5%9B%BE/3.png" alt="汽车销售时间图" title="汽车销售时间图" loading="lazy"></p><h3 id="扩展例子"><a href="#扩展例子" class="headerlink" title="扩展例子"></a>扩展例子</h3><p>正如我们已经见过很多次，buckets 可以嵌套进 buckets 中从而得到更复杂的分析。 作为例子，我们构建聚合以便按季度展示所有汽车品牌总销售额。同时按季度、按每个汽车品牌计算销售总额，以便可以找出哪种品牌最赚钱：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;sales&quot;: &#123;</span><br><span class="line">         &quot;date_histogram&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;sold&quot;,</span><br><span class="line">            &quot;interval&quot;: &quot;quarter&quot;,    ⑴</span><br><span class="line">            &quot;format&quot;: &quot;yyyy-MM-dd&quot;,</span><br><span class="line">            &quot;min_doc_count&quot; : 0,</span><br><span class="line">            &quot;extended_bounds&quot; : &#123;</span><br><span class="line">                &quot;min&quot; : &quot;2014-01-01&quot;,</span><br><span class="line">                &quot;max&quot; : &quot;2014-12-31&quot;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;per_make_sum&quot;: &#123;</span><br><span class="line">               &quot;terms&quot;: &#123;</span><br><span class="line">                  &quot;field&quot;: &quot;make&quot;</span><br><span class="line">               &#125;,</span><br><span class="line">               &quot;aggs&quot;: &#123;</span><br><span class="line">                  &quot;sum_price&quot;: &#123;</span><br><span class="line">                     &quot;sum&quot;: &#123; &quot;field&quot;: &quot;price&quot; &#125;    ⑵ </span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;total_sum&quot;: &#123;</span><br><span class="line">               &quot;sum&quot;: &#123; &quot;field&quot;: &quot;price&quot; &#125;    ⑶</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>⑴ 注意我们把时间间隔从 month 改成了 quarter 。⑵ 计算每种品牌的总销售金额。⑶ 也计算所有全部品牌的汇总销售金额。</code></pre><p>得到的结果（截去了一大部分）如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">....</span><br><span class="line"><span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;sales&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">         <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;key_as_string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2014-01-01&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">1388534400000</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;total_sum&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">105000</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;per_make_sum&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                  <span class="punctuation">&#123;</span></span><br><span class="line">                     <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bmw&quot;</span><span class="punctuation">,</span></span><br><span class="line">                     <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                     <span class="attr">&quot;sum_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">80000</span></span><br><span class="line">                     <span class="punctuation">&#125;</span></span><br><span class="line">                  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="punctuation">&#123;</span></span><br><span class="line">                     <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ford&quot;</span><span class="punctuation">,</span></span><br><span class="line">                     <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                     <span class="attr">&quot;sum_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">25000</span></span><br><span class="line">                     <span class="punctuation">&#125;</span></span><br><span class="line">                  <span class="punctuation">&#125;</span></span><br><span class="line">               <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们把结果绘成图，得到如 <a href="#">Figure 38, “按品牌分布的每季度销售额”</a> 所示的总销售额的折线图和每个品牌（每季度）的柱状图。</p><p><strong>Figure 38. 按品牌分布的每季度销售额</strong><br><img src="/images/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%A1%E5%BD%A2%E5%9B%BE/4.png" alt="按品牌分布的每季度销售额" title="按品牌分布的每季度销售额" loading="lazy"></p><h3 id="潜力无穷"><a href="#潜力无穷" class="headerlink" title="潜力无穷"></a>潜力无穷</h3><p>这些很明显都是简单例子，但图表聚合其实是潜力无穷的。 如 <a href="#">Figure 39, “Kibana—​用聚合构建的实时分析面板”</a> 展示了 Kibana 中用各种聚合构建的面板。</p><p><strong>Figure 39. Kibana—​用聚合构建的实时分析面板</strong><br><img src="/images/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%A1%E5%BD%A2%E5%9B%BE/5.png" alt="Kibana—​用聚合构建的实时分析面板" title="Kibana—​用聚合构建的实时分析面板" loading="lazy"></p><p>因为聚合的实时性，类似这样的面板很容易查询、操作和交互。这使得它们成为需要分析数据又不会构建 Hadoop 作业的非技术人员的理想工具。</p><p>当然，为了构建类似 Kibana 这样的强大面板，你可能需要更深的知识，比如基于范围、过滤以及排序的聚合。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/tags/ElasticSearch/"/>
    
    <category term="Aggregations" scheme="http://www.isee.wang/tags/Aggregations/"/>
    
    <category term="聚合" scheme="http://www.isee.wang/tags/%E8%81%9A%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 聚合（二）尝试聚合</title>
    <link href="http://www.isee.wang/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B0%9D%E8%AF%95%E8%81%9A%E5%90%88/"/>
    <id>http://www.isee.wang/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B0%9D%E8%AF%95%E8%81%9A%E5%90%88/</id>
    <published>2021-10-18T03:38:06.000Z</published>
    <updated>2023-06-05T01:22:42.495Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><div class="note info no-icon"><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B">ElasticSearch 聚合（一）简介</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B0%9D%E8%AF%95%E8%81%9A%E5%90%88">ElasticSearch 聚合（二）尝试聚合</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%A1%E5%BD%A2%E5%9B%BE">ElasticSearch 聚合（三）条形图</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E5%9B%9B%EF%BC%89%E5%9F%BA%E4%BA%8E%E8%8C%83%E5%9B%B4%E3%80%81%E8%BF%87%E6%BB%A4%E4%BB%A5%E5%8F%8A%E6%8E%92%E5%BA%8F%E7%9A%84%E8%81%9A%E5%90%88">ElasticSearch 聚合（四）基于范围、过滤以及排序的聚合</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%94%EF%BC%89%E8%81%9A%E5%90%88%E7%A4%BA%E4%BE%8B">ElasticSearch 聚合（五）聚合示例</a></li></ol></div><h2 id="尝试聚合"><a href="#尝试聚合" class="headerlink" title="尝试聚合"></a>尝试聚合</h2><p>我们可以用以下几页定义不同的聚合和它们的语法， 但学习聚合的最佳途径就是用实例来说明。 一旦我们获得了聚合的思想，以及如何合理地嵌套使用它们，那么语法就变得不那么重要了。</p><div class="note warning"><p>聚合的桶操作和度量的完整用法可以在 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9ndWlkZS9lbi9lbGFzdGljc2VhcmNoL3JlZmVyZW5jZS83Lngvc2VhcmNoLWFnZ3JlZ2F0aW9ucy5odG1s">Elasticsearch 参考<i class="fa fa-external-link-alt"></i></span> 中找到。本章中会涵盖其中很多内容，但在阅读完本章后查看它会有助于我们对它的整体能力有所了解。</p></div><p>所以让我们先看一个例子。我们将会创建一些对汽车经销商有用的聚合，数据是关于汽车交易的信息：车型、制造商、售价、何时被出售等。</p><p>首先我们批量索引一些数据：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /cars/_bulk</span><br><span class="line"></span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 10000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;honda&quot;, &quot;sold&quot; : &quot;2014-10-28&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 20000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;honda&quot;, &quot;sold&quot; : &quot;2014-11-05&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 30000, &quot;color&quot; : &quot;green&quot;, &quot;make&quot; : &quot;ford&quot;, &quot;sold&quot; : &quot;2014-05-18&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 15000, &quot;color&quot; : &quot;blue&quot;, &quot;make&quot; : &quot;toyota&quot;, &quot;sold&quot; : &quot;2014-07-02&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 12000, &quot;color&quot; : &quot;green&quot;, &quot;make&quot; : &quot;toyota&quot;, &quot;sold&quot; : &quot;2014-08-19&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 20000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;honda&quot;, &quot;sold&quot; : &quot;2014-11-05&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 80000, &quot;color&quot; : &quot;red&quot;, &quot;make&quot; : &quot;bmw&quot;, &quot;sold&quot; : &quot;2014-01-01&quot; &#125;</span><br><span class="line">&#123; &quot;index&quot;: &#123;&#125;&#125;</span><br><span class="line">&#123; &quot;price&quot; : 25000, &quot;color&quot; : &quot;blue&quot;, &quot;make&quot; : &quot;ford&quot;, &quot;sold&quot; : &quot;2014-02-12&quot; &#125;</span><br></pre></td></tr></table></figure><p>有了数据，开始构建我们的第一个聚合。汽车经销商可能会想知道哪个颜色的汽车销量最好，用聚合可以轻易得到结果，用 <code>terms</code> 桶操作：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;size&quot; : 0,</span><br><span class="line">    &quot;aggs&quot; : &#123;    ⑴</span><br><span class="line">        &quot;popular_colors&quot; : &#123;      ⑵</span><br><span class="line">            &quot;terms&quot; : &#123;      ⑶</span><br><span class="line">              &quot;field&quot; : &quot;color&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>⑴ 聚合操作被置于顶层参数 aggs 之下（如果你愿意，完整形式 aggregations 同样有效）。⑵ 然后，可以为聚合指定一个我们想要名称，本例中是： popular_colors 。⑶ 最后，定义单个桶的类型 terms 。</code></pre><p>聚合是在特定搜索结果背景下执行的， 这也就是说它只是查询请求的另外一个顶层参数（例如，使用 &#x2F;_search 端点）。 聚合可以与查询结对，但我们会晚些在 <a href="">限定聚合的范围（Scoping Aggregations）</a> 中来解决这个问题。</p><div class="note warning"><p>可能会注意到我们将 size 设置成 0 。我们并不关心搜索结果的具体内容，所以将返回记录数设置为 0 来提高查询速度。 设置 size: 0 与 Elasticsearch 1.x 中使用 count 搜索类型等价。</p></div><p>然后我们为聚合定义一个名字，名字的选择取决于使用者，响应的结果会以我们定义的名字为标签，这样应用就可以解析得到的结果。</p><p>随后我们定义聚合本身，在本例中，我们定义了一个单 terms 桶。 这个 terms 桶会为每个碰到的唯一词项动态创建新的桶。 因为我们告诉它使用 color 字段，所以 terms 桶会为每个颜色动态创建新桶。</p><p>让我们运行聚合并查看结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">...</span><br><span class="line">   <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span>    ⑴</span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;popular_colors&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>     ⑵</span><br><span class="line">         <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;red&quot;</span><span class="punctuation">,</span>    ⑶</span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">4</span>     ⑷</span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;green&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><pre><code>⑴ 因为我们设置了 size 参数，所以不会有 hits 搜索结果返回。⑵ popular_colors 聚合是作为 aggregations 字段的一部分被返回的。⑶ 每个桶的 key 都与 color 字段里找到的唯一词对应。它总会包含 doc_count 字段，告诉我们包含该词项的文档数量。⑷ 每个桶的数量代表该颜色的文档数量。</code></pre><p>响应包含多个桶，每个对应一个唯一颜色（例如：红 或 绿）。每个桶也包括 <code>聚合进</code> 该桶的所有文档的数量。例如，有四辆红色的车。</p><p>前面的这个例子完全是实时执行的：一旦文档可以被搜到，它就能被聚合。这也就意味着我们可以直接将聚合的结果源源不断的传入图形库，然后生成实时的仪表盘。 不久，你又销售了一辆银色的车，我们的图形就会立即动态更新银色车的统计信息。</p><p>瞧！这就是我们的第一个聚合！</p><h3 id="添加度量指标"><a href="#添加度量指标" class="headerlink" title="添加度量指标"></a>添加度量指标</h3><p>前面的例子告诉我们每个桶里面的文档数量，这很有用。但通常，我们的应用需要提供更复杂的文档度量。 例如，每种颜色汽车的平均价格是多少？</p><p>为了获取更多信息，我们需要告诉 Elasticsearch 使用哪个字段，计算何种度量。 这需要将度量 嵌套 在桶内， 度量会基于桶内的文档计算统计结果。</p><p>让我们继续为汽车的例子加入 average 平均度量：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;: &#123; </span><br><span class="line">      &quot;colors&quot;: &#123;</span><br><span class="line">         &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;color&quot;</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;: &#123;    ⑴</span><br><span class="line">            &quot;avg_price&quot;: &#123;    ⑵</span><br><span class="line">               &quot;avg&quot;: &#123;</span><br><span class="line">                  &quot;field&quot;: &quot;price&quot;    ⑶</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>⑴ 为度量新增 aggs 层。⑵ 为度量指定名字： avg_price 。⑶ 最后，为 price 字段定义 avg 度量。</code></pre><p>正如所见，我们用前面的例子加入了新的 aggs 层。这个新的聚合层让我们可以将 avg 度量嵌套置于 terms 桶内。实际上，这就为每个颜色生成了平均价格。</p><p>正如 颜色 的例子，我们需要给度量起一个名字（ avg_price ）这样可以稍后根据名字获取它的值。最后，我们指定度量本身（ avg ）以及我们想要计算平均值的字段（ price ）：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">...</span><br><span class="line">   <span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;colors&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;red&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;avg_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>     ⑴</span><br><span class="line">                  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">32500</span></span><br><span class="line">               <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blue&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;avg_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">20000</span></span><br><span class="line">               <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;green&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;avg_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">21000</span></span><br><span class="line">               <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">         <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line">...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><pre><code>⑴ 响应中的新字段 avg_price 。</code></pre><p>尽管响应只发生很小改变，实际上我们获得的数据是增长了。之前，我们知道有四辆红色的车，现在，红色车的平均价格是 $32，500 美元。这个信息可以直接显示在报表或者图形中。</p><h3 id="嵌套桶"><a href="#嵌套桶" class="headerlink" title="嵌套桶"></a>嵌套桶</h3><p>在我们使用不同的嵌套方案时，聚合的力量才能真正得以显现。 在前例中，我们已经看到如何将一个度量嵌入桶中，它的功能已经十分强大了。</p><p>但真正令人激动的分析来自于将桶嵌套进 另外一个桶 所能得到的结果。 现在，我们想知道每个颜色的汽车制造商的分布：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;colors&quot;: &#123;</span><br><span class="line">         &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;color&quot;</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;avg_price&quot;: &#123;    ⑴</span><br><span class="line">               &quot;avg&quot;: &#123;</span><br><span class="line">                  &quot;field&quot;: &quot;price&quot;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;make&quot;: &#123;     ⑵</span><br><span class="line">                &quot;terms&quot;: &#123;</span><br><span class="line">                    &quot;field&quot;: &quot;make&quot;     ⑶</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>⑴ 注意前例中的 avg_price 度量仍然保持原位。⑵ 另一个聚合 make 被加入到了 color 颜色桶中。⑶ 这个聚合是 terms 桶，它会为每个汽车制造商生成唯一的桶。</code></pre><p>这里发生了一些有趣的事。 首先，我们可能会观察到之前例子中的 avg_price 度量完全没有变化，还在原来的位置。 一个聚合的每个 <em>层级</em> 都可以有多个度量或桶， avg_price 度量告诉我们每种颜色汽车的平均价格。它与其他的桶和度量相互独立。</p><p>这对我们的应用非常重要，因为这里面有很多相互关联，但又完全不同的度量需要收集。聚合使我们能够用一次数据请求获得所有的这些信息。</p><p>另外一件值得注意的重要事情是我们新增的这个 make 聚合，它是一个 terms 桶（嵌套在 colors 、 terms 桶内）。这意味着它会为数据集中的每个唯一组合生成（ color 、 make ）元组。</p><p>让我们看看返回的响应（为了简单我们只显示部分结果）：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">...</span><br><span class="line">   <span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;colors&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;red&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;make&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>    ⑴</span><br><span class="line">                  <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                     <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;honda&quot;</span><span class="punctuation">,</span>   ⑵ </span><br><span class="line">                        <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">                     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                     <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bmw&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">                     <span class="punctuation">&#125;</span></span><br><span class="line">                  <span class="punctuation">]</span></span><br><span class="line">               <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;avg_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">32500</span>    ⑶</span><br><span class="line">               <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><pre><code>⑴ 正如期望的那样，新的聚合嵌入在每个颜色桶中。⑵ 现在我们看见按不同制造商分解的每种颜色下车辆信息。⑶ 最终，我们看到前例中的 avg_price 度量仍然维持不变。</code></pre><p>响应结果告诉我们以下几点：</p><ul><li>红色车有四辆。</li><li>红色车的平均售价是 $32，500 美元。</li><li>其中三辆是 Honda 本田制造，一辆是 BMW 宝马制造。</li></ul><h3 id="最后的修改"><a href="#最后的修改" class="headerlink" title="最后的修改"></a>最后的修改</h3><p>让我们回到话题的原点，在进入新话题之前，对我们的示例做最后一个修改， 为每个汽车生成商计算最低和最高的价格：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   &quot;size&quot; : 0,</span><br><span class="line">   &quot;aggs&quot;: &#123;</span><br><span class="line">      &quot;colors&quot;: &#123;</span><br><span class="line">         &quot;terms&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;color&quot;</span><br><span class="line">         &#125;,</span><br><span class="line">         &quot;aggs&quot;: &#123;</span><br><span class="line">            &quot;avg_price&quot;: &#123; &quot;avg&quot;: &#123; &quot;field&quot;: &quot;price&quot; &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;make&quot; : &#123;</span><br><span class="line">                &quot;terms&quot; : &#123;</span><br><span class="line">                    &quot;field&quot; : &quot;make&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;aggs&quot; : &#123;    ⑴</span><br><span class="line">                    &quot;min_price&quot; : &#123; &quot;min&quot;: &#123; &quot;field&quot;: &quot;price&quot;&#125; &#125;,   ⑵ </span><br><span class="line">                    &quot;max_price&quot; : &#123; &quot;max&quot;: &#123; &quot;field&quot;: &quot;price&quot;&#125; &#125;    ⑶</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>⑴ 我们需要增加另外一个嵌套的 aggs 层级。⑵ 然后包括 min 最小度量。⑶ 以及 max 最大度量。</code></pre><p>得到以下输出（只显示部分结果）：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">...</span><br><span class="line">   <span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;colors&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">         <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;red&quot;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;make&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                     <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;honda&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;min_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                           <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">10000</span>     ⑴</span><br><span class="line">                        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;max_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                           <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">20000</span>     ⑵</span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                     <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                     <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bmw&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;min_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                           <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">80000</span></span><br><span class="line">                        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;max_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                           <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">80000</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                     <span class="punctuation">&#125;</span></span><br><span class="line">                  <span class="punctuation">]</span></span><br><span class="line">               <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">               <span class="attr">&quot;avg_price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">32500</span></span><br><span class="line">               <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><pre><code>⑴⑵ min 和 max 度量现在出现在每个汽车制造商（ make ）下面。</code></pre><p>有了这两个桶，我们可以对查询的结果进行扩展并得到以下信息：</p><ul><li>有四辆红色车。</li><li>红色车的平均售价是 $32，500 美元。</li><li>其中三辆红色车是 Honda 本田制造，一辆是 BMW 宝马制造。</li><li>最便宜的红色本田售价为 $10，000 美元。</li><li>最贵的红色本田售价为 $20，000 美元。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/tags/ElasticSearch/"/>
    
    <category term="Aggregations" scheme="http://www.isee.wang/tags/Aggregations/"/>
    
    <category term="聚合" scheme="http://www.isee.wang/tags/%E8%81%9A%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 聚合（一）简介</title>
    <link href="http://www.isee.wang/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.isee.wang/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B/</id>
    <published>2021-10-13T06:05:41.000Z</published>
    <updated>2023-06-05T01:22:42.495Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><div class="note info no-icon"><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B">ElasticSearch 聚合（一）简介</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%8C%EF%BC%89%E5%B0%9D%E8%AF%95%E8%81%9A%E5%90%88">ElasticSearch 聚合（二）尝试聚合</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%B8%89%EF%BC%89%E6%9D%A1%E5%BD%A2%E5%9B%BE">ElasticSearch 聚合（三）条形图</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E5%9B%9B%EF%BC%89%E5%9F%BA%E4%BA%8E%E8%8C%83%E5%9B%B4%E3%80%81%E8%BF%87%E6%BB%A4%E4%BB%A5%E5%8F%8A%E6%8E%92%E5%BA%8F%E7%9A%84%E8%81%9A%E5%90%88">ElasticSearch 聚合（四）基于范围、过滤以及排序的聚合</a></li><li><a href="/ElasticSearch-%E8%81%9A%E5%90%88%EF%BC%88%E4%BA%94%EF%BC%89%E8%81%9A%E5%90%88%E7%A4%BA%E4%BE%8B">ElasticSearch 聚合（五）聚合示例</a></li></ol></div><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>通过搜索，如果我们有一个查询并且希望找到匹配这个查询的文档集，就好比在大海捞针。</p><p>通过聚合，我们会得到一个数据的概览。我们需要的是分析和总结全套的数据而不是寻找单个文档：</p><pre><code>在大海里有多少针？针的平均长度是多少？按照针的制造商来划分，针的长度中位值是多少？每月加入到海中的针有多少？</code></pre><p>聚合也可以回答更加细微的问题：</p><pre><code>你最受欢迎的针的制造商是什么？这里面有异常的针么？</code></pre><p>聚合允许我们向数据提出一些复杂的问题。虽然功能完全不同于搜索，但它使用相同的数据结构。这意味着聚合的执行速度很快并且就像搜索一样几乎是实时的。</p><p>这对报告和仪表盘是非常强大的。你可以实时显示你的数据，让你立即回应，而不是对你的数据进行汇总（ <em>需要一周时间去运行的 Hadoop 任务</em> ），您的报告随着你的数据变化而变化，而不是预先计算的、过时的和不相关的。</p><p>最后，聚合和搜索是一起的。 这意味着你可以在单个请求里同时对相同的数据进行搜索&#x2F;过滤和分析。并且由于聚合是在用户搜索的上下文里计算的，你不只是显示四星酒店的数量，而是显示匹配查询条件的四星酒店的数量。</p><p>聚合是如此强大以至于许多公司已经专门为数据分析建立了大型 Elasticsearch 集群。</p><h2 id="高阶概念"><a href="#高阶概念" class="headerlink" title="高阶概念"></a>高阶概念</h2><p>类似于 DSL 查询表达式，聚合也有 可组合 的语法：独立单元的功能可以被混合起来提供你需要的自定义行为。这意味着只需要学习很少的基本概念，就可以得到几乎无尽的组合。</p><p>要掌握聚合，你只需要明白两个主要的概念：</p><p><strong>桶（Buckets）</strong></p><pre><code>满足特定条件的文档的集合</code></pre><p><strong>指标（Metrics）</strong></p><pre><code>对桶内的文档进行统计计算</code></pre><p>这就是全部了！每个聚合都是一个或者多个桶和零个或者多个指标的组合。翻译成粗略的SQL语句来解释吧：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(color)     ⑴</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">table</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> color      ⑵</span><br></pre></td></tr></table></figure><pre><code>⑴: COUNT(color) 相当于指标。⑵: GROUP BY color 相当于桶。</code></pre><p>桶在概念上类似于 SQL 的分组（GROUP BY），而指标则类似于 COUNT() 、 SUM() 、 MAX() 等统计方法。</p><p>让我们深入这两个概念 并且了解和这两个概念相关的东西。</p><h3 id="桶"><a href="#桶" class="headerlink" title="桶"></a>桶</h3><p><em>桶</em> 简单来说就是满足特定条件的文档的集合：</p><ul><li>一个雇员属于 <em>男性</em> 桶或者 <em>女性</em> 桶</li><li>奥尔巴尼属于 <em>纽约</em> 桶</li><li>日期2014-10-28属于 <em>十月</em> 桶</li></ul><p>当聚合开始被执行，每个文档里面的值通过计算来决定符合哪个桶的条件。如果匹配到，文档将放入相应的桶并接着进行聚合操作。</p><p>桶也可以被嵌套在其他桶里面，提供层次化的或者有条件的划分方案。例如，辛辛那提会被放入俄亥俄州这个桶，而 整个 俄亥俄州桶会被放入美国这个桶。</p><p>Elasticsearch 有很多种类型的桶，能让你通过很多种方式来划分文档（时间、最受欢迎的词、年龄区间、地理位置等等）。其实根本上都是通过同样的原理进行操作：基于条件来划分文档。</p><h3 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h3><p>桶能让我们划分文档到有意义的集合，但是最终我们需要的是对这些桶内的文档进行一些指标的计算。分桶是一种达到目的的手段：它提供了一种给文档分组的方法来让我们可以计算感兴趣的指标。</p><p>大多数 指标 是简单的数学运算（例如最小值、平均值、最大值，还有汇总），这些是通过文档的值来计算。在实践中，指标能让你计算像平均薪资、最高出售价格、95%的查询延迟这样的数据。</p><h3 id="桶和指标的组合"><a href="#桶和指标的组合" class="headerlink" title="桶和指标的组合"></a>桶和指标的组合</h3><p>聚合 是由桶和指标组成的。 聚合可能只有一个桶，可能只有一个指标，或者可能两个都有。也有可能有一些桶嵌套在其他桶里面。例如，我们可以通过所属国家来划分文档（桶），然后计算每个国家的平均薪酬（指标）。</p><p>由于桶可以被嵌套，我们可以实现非常多并且非常复杂的聚合：</p><p>1.通过国家划分文档（桶）</p><p>2.然后通过性别划分每个国家（桶）</p><p>3.然后通过年龄区间划分每种性别（桶）</p><p>4.最后，为每个年龄区间计算平均薪酬（指标）</p><p>最后将告诉你每个 &lt;国家, 性别, 年龄&gt; 组合的平均薪酬。所有的这些都在一个请求内完成并且只遍历一次数据！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/tags/ElasticSearch/"/>
    
    <category term="Aggregations" scheme="http://www.isee.wang/tags/Aggregations/"/>
    
    <category term="聚合" scheme="http://www.isee.wang/tags/%E8%81%9A%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch - function_score 系列文章（五）评价系统 具体实例</title>
    <link href="http://www.isee.wang/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%94%EF%BC%89%E8%AF%84%E4%BB%B7%E7%B3%BB%E7%BB%9F-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B/"/>
    <id>http://www.isee.wang/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%94%EF%BC%89%E8%AF%84%E4%BB%B7%E7%B3%BB%E7%BB%9F-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B/</id>
    <published>2021-09-08T06:56:12.000Z</published>
    <updated>2023-06-05T01:22:42.494Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><div class="note info no-icon"><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B">ElasticSearch - function_score 系列文章（一）简介</a></li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%8C%EF%BC%89field-value-factor-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（二）field_value_factor 具体实例</a></li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89weight-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（三）weight 具体实例</a></li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E8%A1%B0%E5%87%8F%E5%87%BD%E6%95%B0-linear%E3%80%81exp%E3%80%81gauss-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（四）衰减函数 linear、exp、gauss 具体实例</a></li><li>ElasticSearch - function_score 系列文章（五）评价系统 具体实例</li></ol></div><h2 id="function-score示例1"><a href="#function-score示例1" class="headerlink" title="function_score示例1"></a>function_score示例1</h2><div class="tabs" id="function_score-simple1"><ul class="nav-tabs"><li class="tab active"><a href="#function_score-simple1-1"><code>Query DSL</code></a></li><li class="tab"><a href="#function_score-simple1-2"><code>Java 代码实现</code></a></li></ul><div class="tab-content"><div class="tab-pane active" id="function_score-simple1-1"><ul><li>评价系统相关度评分排序，优先级：当前用户（userId） &gt; 是否好评（goodEvaluate） &gt; 平均分（averageScore） &gt; 评价时间（evaluateTime）<ul><li>当前用户：本人的评价内容必须展示在最上方，权重最大</li><li>是否好评：值为1时表示好评，权重次之</li><li>平均分：范围[0, 1000] 根据得分加强score</li><li>评价时间倒序</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /crisps_evaluate_info/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;size&quot;: 5000,</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">          &quot;adjust_pure_negative&quot;: true,</span><br><span class="line">          &quot;boost&quot;: 1.0</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;term&quot;: &#123;</span><br><span class="line">              &quot;userId&quot;: &#123;</span><br><span class="line">                &quot;value&quot;: &quot;767777873692352703&quot;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;weight&quot;: 100000.0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;term&quot;: &#123;</span><br><span class="line">              &quot;goodEvaluate&quot;: &#123;</span><br><span class="line">                &quot;value&quot;: 1</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;weight&quot;: 10000.0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;</span><br><span class="line">            &quot;range&quot;: &#123;</span><br><span class="line">              &quot;averageScore&quot;: &#123;</span><br><span class="line">                &quot;from&quot;: 0,</span><br><span class="line">                &quot;to&quot;: 1000,</span><br><span class="line">                &quot;include_lower&quot;: true,</span><br><span class="line">                &quot;include_upper&quot;: true</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;field_value_factor&quot;: &#123;</span><br><span class="line">            &quot;field&quot;: &quot;averageScore&quot;,</span><br><span class="line">            &quot;factor&quot;: 1.0,</span><br><span class="line">            &quot;modifier&quot;: &quot;none&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;score_mode&quot;: &quot;sum&quot;,</span><br><span class="line">      &quot;boost_mode&quot;: &quot;multiply&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;_source&quot;: &#123;</span><br><span class="line">    &quot;includes&quot;: [</span><br><span class="line">      &quot;userId&quot;,</span><br><span class="line">      &quot;goodEvaluate&quot;,</span><br><span class="line">      &quot;averageScore&quot;,</span><br><span class="line">      &quot;evaluateTime&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;excludes&quot;: []</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_score&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;evaluateTime&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="function_score-simple1-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;es示例&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/yk/es&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsController</span> <span class="keyword">extends</span> <span class="title class_">AbstractCrispsController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation(&quot;FunctionScoreQueryBuilder示例&quot;)</span></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/function_score&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> CrispsResponse <span class="title function_">functionScore</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优先级：当前用户（userId） &gt; 是否好评（goodEvaluate） &gt; 平均分（averageScore） &gt; 评价时间（evaluateTime）</span></span><br><span class="line">    FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders = <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[]&#123;</span><br><span class="line">            <span class="comment">// 当前用户：本人的评价内容必须展示在最上方，权重最大</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">                    QueryBuilders.termQuery(<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;767777873692352703&quot;</span>),</span><br><span class="line">                    ScoreFunctionBuilders.weightFactorFunction(<span class="number">100000.0f</span>)),</span><br><span class="line">            <span class="comment">// 是否好评：值为1时表示好评，权重次之</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">                    QueryBuilders.termQuery(<span class="string">&quot;goodEvaluate&quot;</span>, <span class="number">1</span>),</span><br><span class="line">                    ScoreFunctionBuilders.weightFactorFunction(<span class="number">10000.0f</span>)),</span><br><span class="line">            <span class="comment">// 平均分：范围[0, 1000] 根据得分加强score</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">                    QueryBuilders.rangeQuery(<span class="string">&quot;averageScore&quot;</span>).gte(<span class="number">0</span>).lte(<span class="number">1000</span>),</span><br><span class="line">                    ScoreFunctionBuilders.fieldValueFactorFunction(<span class="string">&quot;averageScore&quot;</span>))</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">FunctionScoreQueryBuilder</span> <span class="variable">functionScoreQueryBuilder</span> <span class="operator">=</span></span><br><span class="line">            QueryBuilders.functionScoreQuery(QueryBuilders.boolQuery(), filterFunctionBuilders)</span><br><span class="line">                    <span class="comment">// 决定加强score们怎么合并</span></span><br><span class="line">                    .scoreMode(FunctionScoreQuery.ScoreMode.SUM)</span><br><span class="line">                    <span class="comment">// 决定总加強score怎么和old_score合并</span></span><br><span class="line">                    .boostMode(CombineFunction.MULTIPLY);</span><br><span class="line"></span><br><span class="line">    <span class="type">SearchSourceBuilder</span> <span class="variable">searchSourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>()</span><br><span class="line">            .size(<span class="number">5000</span>)</span><br><span class="line">            <span class="comment">// Query DSL 应用 function_score</span></span><br><span class="line">            .query(functionScoreQueryBuilder)</span><br><span class="line">            <span class="comment">// 指定字段显示</span></span><br><span class="line">            .fetchSource(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;goodEvaluate&quot;</span>, <span class="string">&quot;averageScore&quot;</span>, <span class="string">&quot;evaluateTime&quot;</span>&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;&#125;)</span><br><span class="line">            <span class="comment">// 排序：先_score 后evaluateTime</span></span><br><span class="line">            .sort(SortBuilders.scoreSort()).sort(SortBuilders.fieldSort(<span class="string">&quot;evaluateTime&quot;</span>).order(SortOrder.DESC));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送搜索请求</span></span><br><span class="line">    log.info(<span class="string">&quot;Query DSL: &#123;&#125;&quot;</span>, searchSourceBuilder);</span><br><span class="line">    DggPageResult&lt;EvaluateInfoEs&gt; pageRes = dggESTemplate.searchScrollDeepPaging(</span><br><span class="line">            searchSourceBuilder, <span class="number">1</span>, <span class="number">10</span>, EvaluateInfoEs.class, <span class="string">&quot;crisps_evaluate_info&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> success(pageRes.getList());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h2 id="function-score示例2"><a href="#function-score示例2" class="headerlink" title="function_score示例2"></a>function_score示例2</h2><div class="tabs" id="function_score-simple2"><ul class="nav-tabs"><li class="tab active"><a href="#function_score-simple2-1"><code>Query DSL</code></a></li><li class="tab"><a href="#function_score-simple2-2"><code>Java 代码实现</code></a></li><li class="tab"><a href="#function_score-simple2-3"><code>TestCertDTO.class</code></a></li></ul><div class="tab-content"><div class="tab-pane active" id="function_score-simple2-1"><ul><li>用区间表示法设计证书占用时间槽，并存入es嵌套文档，用function_score评分方案解决空闲时间槽查询，对比替代bitmap编码解码方案</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /test_cert_dto/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;function_score&quot;: &#123;</span><br><span class="line">            &quot;query&quot;: &#123;</span><br><span class="line">                &quot;match_all&quot;: &#123;</span><br><span class="line">                    &quot;boost&quot;: 1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;functions&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;filter&quot;: &#123;</span><br><span class="line">                        &quot;bool&quot;: &#123;</span><br><span class="line">                            &quot;adjust_pure_negative&quot;: true,</span><br><span class="line">                            &quot;boost&quot;: 1</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;script_score&quot;: &#123;</span><br><span class="line">                        &quot;script&quot;: &#123;</span><br><span class="line">                            &quot;source&quot;: &quot;List slots = params[&#x27;_source&#x27;][&#x27;timeSlots&#x27;];for (int i; i &lt; slots.length; i++) &#123;   if ((params.from &gt;= slots[i].startStamp &amp;&amp; params.from &lt;= slots[i].endStamp)        || (params.to &gt;= slots[i].startStamp &amp;&amp; params.to &lt;= slots[i].endStamp)       || (slots[i].startStamp &gt;= params.from &amp;&amp; slots[i].startStamp &lt;= params.to)       || (slots[i].endStamp &gt;= params.from &amp;&amp; slots[i].endStamp &lt;= params.to)) &#123;       return 0;   &#125;&#125;return 1;&quot;,</span><br><span class="line">                            &quot;lang&quot;: &quot;painless&quot;,</span><br><span class="line">                            &quot;params&quot;: &#123;</span><br><span class="line">                                &quot;from&quot;: 1585670400000,</span><br><span class="line">                                &quot;to&quot;: 1585756799999</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;score_mode&quot;: &quot;sum&quot;,</span><br><span class="line">            &quot;boost_mode&quot;: &quot;multiply&quot;,</span><br><span class="line">            &quot;max_boost&quot;: 1,</span><br><span class="line">            &quot;boost&quot;: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;min_score&quot;: 1,</span><br><span class="line">    &quot;sort&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;_score&quot;: &#123;</span><br><span class="line">                &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="function_score-simple2-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;es示例&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/yk/es&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EsController</span> <span class="keyword">extends</span> <span class="title class_">AbstractCrispsController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation(&quot;追加证书&quot;)</span></span><br><span class="line">  <span class="meta">@PostMapping(&quot;/addCert&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> CrispsResponse <span class="title function_">addCert</span><span class="params">(Long id, <span class="meta">@RequestBody</span> TestCertDTO.TimeSlot timeSlot)</span> &#123;</span><br><span class="line">    TestCertDTO.<span class="type">TimeSlot</span> <span class="variable">slot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCertDTO</span>.TimeSlot(timeSlot.getStartTime(), timeSlot.getEndTime());</span><br><span class="line">    <span class="type">String</span> <span class="variable">index</span> <span class="operator">=</span> <span class="string">&quot;test_cert_dto&quot;</span>;</span><br><span class="line">    TestCertDTO cert;</span><br><span class="line">    <span class="keyword">if</span> (dggESTemplate.indexExists(index)) &#123;</span><br><span class="line">      cert = dggESTemplate.getSingleById(index, String.valueOf(id), TestCertDTO.class);</span><br><span class="line">      <span class="keyword">if</span> (cert == <span class="literal">null</span>) &#123;</span><br><span class="line">        cert = TestCertDTO.builder().id(id).timeSlots(Collections.singletonList(slot)).build();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TestCertDTO.overlapped(cert.getTimeSlots(), slot)) &#123;</span><br><span class="line">        <span class="keyword">return</span> fail(<span class="string">&quot;证书时间交叉&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cert.getTimeSlots().add(slot);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cert = TestCertDTO.builder().id(id).timeSlots(Collections.singletonList(slot)).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> success(dggESTemplate.createDocument(cert));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ApiOperation(&quot;查询证书&quot;)</span></span><br><span class="line">  <span class="meta">@PostMapping(&quot;/queryCert&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> CrispsResponse <span class="title function_">queryCert</span><span class="params">(<span class="meta">@RequestBody</span> TestCertDTO.TimeSlot timeSlot)</span> &#123;</span><br><span class="line">    <span class="comment">// 脚本参数</span></span><br><span class="line">    TestCertDTO.<span class="type">TimeSlot</span> <span class="variable">slot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestCertDTO</span>.TimeSlot(timeSlot.getStartTime(), timeSlot.getEndTime());</span><br><span class="line">    Map&lt;String, Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">    params.put(<span class="string">&quot;from&quot;</span>, slot.getStartStamp());</span><br><span class="line">    params.put(<span class="string">&quot;to&quot;</span>, slot.getEndStamp());</span><br><span class="line"></span><br><span class="line">    FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders = <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">                    QueryBuilders.boolQuery(),</span><br><span class="line">                    ScoreFunctionBuilders.scriptFunction(</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Script</span>(ScriptType.INLINE, Script.DEFAULT_SCRIPT_LANG,</span><br><span class="line">                                    <span class="string">&quot;List slots = params[&#x27;_source&#x27;][&#x27;timeSlots&#x27;];&quot;</span> +</span><br><span class="line">                                            <span class="string">&quot;for (int i; i &lt; slots.length; i++) &#123;&quot;</span> +</span><br><span class="line">                                            <span class="string">&quot;   if ((params.from &gt;= slots[i].startStamp &amp;&amp; params.from &lt;= slots[i].endStamp) &quot;</span> +</span><br><span class="line">                                            <span class="string">&quot;       || (params.to &gt;= slots[i].startStamp &amp;&amp; params.to &lt;= slots[i].endStamp)&quot;</span> +</span><br><span class="line">                                            <span class="string">&quot;       || (slots[i].startStamp &gt;= params.from &amp;&amp; slots[i].startStamp &lt;= params.to)&quot;</span> +</span><br><span class="line">                                            <span class="string">&quot;       || (slots[i].endStamp &gt;= params.from &amp;&amp; slots[i].endStamp &lt;= params.to)) &#123;&quot;</span> +</span><br><span class="line">                                            <span class="string">&quot;       return 0;&quot;</span> +</span><br><span class="line">                                            <span class="string">&quot;   &#125;&quot;</span> +</span><br><span class="line">                                            <span class="string">&quot;&#125;&quot;</span> +</span><br><span class="line">                                            <span class="string">&quot;return 1;&quot;</span>,</span><br><span class="line">                                    params)</span><br><span class="line">                    ))</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">FunctionScoreQueryBuilder</span> <span class="variable">functionScoreQueryBuilder</span> <span class="operator">=</span></span><br><span class="line">            QueryBuilders.functionScoreQuery(QueryBuilders.matchAllQuery(), filterFunctionBuilders)</span><br><span class="line">                    .scoreMode(FunctionScoreQuery.ScoreMode.SUM)</span><br><span class="line">                    .boostMode(CombineFunction.MULTIPLY)</span><br><span class="line">                    .maxBoost(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">SearchSourceBuilder</span> <span class="variable">searchSourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>().query(functionScoreQueryBuilder).minScore(<span class="number">1</span>).sort(SortBuilders.scoreSort());</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">&quot;Before: &#123;&#125;&quot;</span>, searchSourceBuilder);</span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> dggESTemplate.deepPaging(searchSourceBuilder, <span class="number">1</span>, <span class="number">10</span>, <span class="string">&quot;test_cert_dto&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;After: &#123;&#125;&quot;</span>, searchSourceBuilder);</span><br><span class="line">    <span class="keyword">return</span> success(searchResponse);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="function_score-simple2-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 证书实体类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;http://www.isee.wang/&quot;&gt;isee.wang&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/1/19 9:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@DggEsDocument(indexName = &quot;test_cert_dto&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCertDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@DggEsIdentify</span></span><br><span class="line">  <span class="meta">@DggEsField(fieldType = FieldType.integer_type)</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@DggEsField(fieldType = FieldType.nested_type)</span></span><br><span class="line">  <span class="keyword">private</span> List&lt;TimeSlot&gt; timeSlots;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 判断两个时间段是否重叠</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> slot</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">overlapped</span><span class="params">(List&lt;TimeSlot&gt; list, TimeSlot slot)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (TimeSlot s : list) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">              (slot.getStartStamp() &gt;= s.getStartStamp() &amp;&amp; slot.getStartStamp() &lt;= s.getEndStamp())</span><br><span class="line">                      || (slot.getEndStamp() &gt;= s.getStartStamp() &amp;&amp; slot.getEndStamp() &lt;= s.getEndStamp())</span><br><span class="line">                      || (s.getStartStamp() &gt;= slot.getStartStamp() &amp;&amp; s.getStartStamp() &lt;= slot.getEndStamp())</span><br><span class="line">                      || (s.getEndStamp() &gt;= slot.getStartStamp() &amp;&amp; s.getEndStamp() &lt;= slot.getEndStamp())</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 时间段类</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Data</span></span><br><span class="line">  <span class="meta">@ToString</span></span><br><span class="line">  <span class="meta">@Builder</span></span><br><span class="line">  <span class="meta">@AllArgsConstructor</span></span><br><span class="line">  <span class="meta">@NoArgsConstructor</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TimeSlot</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="meta">@DggEsField(fieldType = FieldType.date_type)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate startTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="meta">@DggEsField(fieldType = FieldType.date_type)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate endTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DggEsField(fieldType = FieldType.long_type)</span></span><br><span class="line">    <span class="keyword">private</span> Long startStamp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DggEsField(fieldType = FieldType.long_type)</span></span><br><span class="line">    <span class="keyword">private</span> Long endStamp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimeSlot</span><span class="params">(LocalDate startTime, LocalDate endTime)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (startTime.isAfter(endTime)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.startTime = endTime;</span><br><span class="line">        <span class="built_in">this</span>.endTime = startTime;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startTime = startTime;</span><br><span class="line">        <span class="built_in">this</span>.endTime = endTime;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.startStamp = <span class="built_in">this</span>.startTime.atTime(LocalTime.MIN).toInstant(ZoneOffset.ofHours(<span class="number">8</span>)).toEpochMilli();</span><br><span class="line">      <span class="built_in">this</span>.endStamp = <span class="built_in">this</span>.endTime.atTime(LocalTime.MAX).toInstant(ZoneOffset.ofHours(<span class="number">8</span>)).toEpochMilli();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/tags/ElasticSearch/"/>
    
    <category term="function_score" scheme="http://www.isee.wang/tags/function-score/"/>
    
    <category term="相关度评分" scheme="http://www.isee.wang/tags/%E7%9B%B8%E5%85%B3%E5%BA%A6%E8%AF%84%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch - function_score 系列文章（四）衰减函数 linear、exp、gauss 具体实例</title>
    <link href="http://www.isee.wang/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E8%A1%B0%E5%87%8F%E5%87%BD%E6%95%B0-linear%E3%80%81exp%E3%80%81gauss-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B/"/>
    <id>http://www.isee.wang/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E8%A1%B0%E5%87%8F%E5%87%BD%E6%95%B0-linear%E3%80%81exp%E3%80%81gauss-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B/</id>
    <published>2021-08-26T07:49:03.000Z</published>
    <updated>2023-06-05T01:22:42.495Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><div class="note info no-icon"><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B">ElasticSearch - function_score 系列文章（一）简介</a></li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%8C%EF%BC%89field-value-factor-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（二）field_value_factor 具体实例</a></li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89weight-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（三）weight 具体实例</a></li><li>ElasticSearch - function_score 系列文章（四）衰减函数 linear、exp、gauss 具体实例</li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%94%EF%BC%89%E8%AF%84%E4%BB%B7%E7%B3%BB%E7%BB%9F-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（五）评价系统 具体实例</a></li></ol></div><h2 id="1-业务场景"><a href="#1-业务场景" class="headerlink" title="1. 业务场景"></a>1. 业务场景</h2><ul><li>很多变量都可以影响用户对于酒店的选择，像是用户可能希望酒店离市中心近一点，但是如果价格足够便宜，也愿意为了省钱，妥协选择一个更远的住处</li><li>如果我们只是使用一个filter排除所有市中心方圆100米以外的酒店，再用一个filter排除每晚价格超过100元的酒店，这种作法太过强硬，可能有一间房在500米，但是超级便宜一晚只要10元，用户可能会因此愿意妥协住这间房</li><li>为了解决这个问题，因此function_score查询提供了一组衰减函数(decay functions)，让我们有能力在两个滑动标准(如地点和价格)之间权衡</li></ul><h2 id="2-衰减函数"><a href="#2-衰减函数" class="headerlink" title="2. 衰减函数"></a>2. 衰减函数</h2><ul><li>linear、exp、gauss三种衰减函数的差别只在于衰减曲线的形状，在DSL的语法上的用法完全一样<ul><li>linear : 线性函数是条直线，一旦直线与横轴0香蕉，所有其他值的评分都是0</li><li>exp : 指数函数是先剧烈衰减然后变缓</li><li>guass(最常用) : 高斯函数则是钟形的，他的衰减速率是先缓慢，然后变快，最后又放缓<br>  <img src="/images/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E8%A1%B0%E5%87%8F%E5%87%BD%E6%95%B0-linear%E3%80%81exp%E3%80%81gauss-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B/1.png" loading="lazy"></li></ul></li><li>衰减函数们 (linear、exp、gauss) 支持的参数<ul><li>origin : 中心点，或是字段可能的最佳值，落在原点(origin)上的文档评分_score为满分1.0，支持数值、时间 以及 &quot;经纬度地理座标点&quot;(最常用) 的字段</li><li>offset : 从 origin 为中心，为他设置一个偏移量offset覆盖一个范围，在此范围内所有的评分_score也都是和origin一样满分1.0</li><li>scale : 衰减率，即是一个文档从origin下落时，_score改变的速度</li><li>decay : 从 origin 衰减到 scale 所得的评分_score，默认为0.5 (一般不需要改变，这个参数使用默认的就好了)</li><li>以上面的图为例<ul><li>所有曲线(linear、exp、gauss)的origin都是40，offset是5，因此范围在40-5 &lt;&#x3D; value &lt;&#x3D; 40+5的文档的评分_score都是满分1.0</li><li>而在此范围之外，评分会开始衰减，衰减率由scale值(此处是5)和decay值(此处是默认值0.5)决定，在origin +&#x2F;- (offset + scale)处的评分是decay值，也就是在30、50的评分处是0.5分</li><li>也就是说，在origin + offset + scale或是origin - offset - scale的点上，得到的分数仅有decay分</li></ul></li></ul></li></ul><h2 id="3-具体实例一"><a href="#3-具体实例一" class="headerlink" title="3. 具体实例一"></a>3. 具体实例一</h2><ul><li>先准备数据和索引，在ES插入三笔数据，其中 language 是 text 类型，like 是 long 类型(代表点赞量)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /test_decay_functions/_bulk?pretty</span><br><span class="line"></span><br><span class="line">&#123;&quot;index&quot;: &#123;&quot;_id&quot;: 1&#125;&#125;</span><br><span class="line">&#123;&quot;language&quot;: &quot;java&quot;, &quot;like&quot;: 5&#125;</span><br><span class="line">&#123;&quot;index&quot;: &#123;&quot;_id&quot;: 2&#125;&#125;</span><br><span class="line">&#123;&quot;language&quot;: &quot;python&quot;, &quot;like&quot;: 10&#125;</span><br><span class="line">&#123;&quot;index&quot;: &#123;&quot;_id&quot;: 3&#125;&#125;</span><br><span class="line">&#123;&quot;language&quot;: &quot;go&quot;, &quot;like&quot;: 15&#125;</span><br></pre></td></tr></table></figure></li><li>以 like&#x3D;15 为中心，使用 gauss 函数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_decay_functions/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;function_score&quot;: &#123;</span><br><span class="line">            &quot;query&quot;: &#123;</span><br><span class="line">                &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;functions&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;gauss&quot;: &#123;</span><br><span class="line">                        &quot;like&quot;: &#123;</span><br><span class="line">                            &quot;origin&quot;: &quot;15&quot;, //如果不设置offset，offset默认为0</span><br><span class="line">                            &quot;scale&quot;: &quot;5&quot;,</span><br><span class="line">                            &quot;decay&quot;: &quot;0.2&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;go&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;like&quot;</span><span class="punctuation">:</span> <span class="number">15</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.2</span><span class="punctuation">,</span> <span class="comment">//因为改变了decay=0.2，所以当位于 origin-offset-scale=10 的位置时，分数为decay，就是0.2</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;like&quot;</span><span class="punctuation">:</span> <span class="number">10</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.0016</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;like&quot;</span><span class="punctuation">:</span> <span class="number">5</span> <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-具体实例二"><a href="#4-具体实例二" class="headerlink" title="4. 具体实例二"></a>4. 具体实例二</h2><ul><li>假设有一个用户希望租一个离市中心近一点的酒店，且每晚不超过100元的酒店，而且与距离相比，我们的用户对价格更敏感，那么使用衰减函数guass查询如下<ul><li>其中把price语句的origin点设为50是有原因的，由于价格的特性一定是越低越好，所以0~100元的所有价格的酒店都应该认为是比较好的，而100元以上的酒店就慢慢衰减</li><li>如果我们将price的origin点设置成100，那么价格低于100元的酒店的评分反而会变低，这不是我们期望的结果，与其这样不如将origin和offset同时设成50，只让price大于100元时评分才会变低</li><li>虽然这样设置也会使得price小于0元的酒店评分降低没错，不过现实生活中价格不会有负数，因此就算price&lt;0的评分会下降，也不会对我们的搜索结果造成影响(酒店的价格一定都是正的)</li><li>换句话说，其实只要把origin + offset的值设为100，origin或offset是什么样的值都无所谓，只要能确保酒店价格在100元以上的酒店会衰减就好了<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_decay_functions2/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;function_score&quot;: &#123;</span><br><span class="line">            &quot;functions&quot;: [</span><br><span class="line">                //第一个gauss加强函数，决定距离的衰减率</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;gauss&quot;: &#123;</span><br><span class="line">                        &quot;location&quot;: &#123;</span><br><span class="line">                            &quot;origin&quot;: &#123;  //origin点设成酒店的经纬度座标</span><br><span class="line">                                &quot;lat&quot;: 51.5,</span><br><span class="line">                                &quot;lon&quot;: 0.12</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;offset&quot;: &quot;2km&quot;, //距离中心点2km以内都是满分1.0，2km外开始衰减</span><br><span class="line">                            &quot;scale&quot;: &quot;3km&quot;  //衰减率</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                //第二个gauss加强函数，决定价格的衰减率，因为用户对价格更敏感，所以给了这个gauss加强函数2倍的权重</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;gauss&quot;: &#123;</span><br><span class="line">                        &quot;price&quot;: &#123;</span><br><span class="line">                            &quot;origin&quot;: &quot;50&quot;, </span><br><span class="line">                            &quot;offset&quot;: &quot;50&quot;,</span><br><span class="line">                            &quot;scale&quot;: &quot;20&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;weight&quot;: 2</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/tags/ElasticSearch/"/>
    
    <category term="function_score" scheme="http://www.isee.wang/tags/function-score/"/>
    
    <category term="相关度评分" scheme="http://www.isee.wang/tags/%E7%9B%B8%E5%85%B3%E5%BA%A6%E8%AF%84%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch - function_score 系列文章（三）weight 具体实例</title>
    <link href="http://www.isee.wang/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89weight-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B/"/>
    <id>http://www.isee.wang/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89weight-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B/</id>
    <published>2021-08-26T07:48:53.000Z</published>
    <updated>2023-06-05T01:22:42.494Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><div class="note info no-icon"><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B">ElasticSearch - function_score 系列文章（一）简介</a></li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%8C%EF%BC%89field-value-factor-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（二）field_value_factor 具体实例</a></li><li>ElasticSearch - function_score 系列文章（三）weight 具体实例</li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E8%A1%B0%E5%87%8F%E5%87%BD%E6%95%B0-linear%E3%80%81exp%E3%80%81gauss-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（四）衰减函数 linear、exp、gauss 具体实例</a></li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%94%EF%BC%89%E8%AF%84%E4%BB%B7%E7%B3%BB%E7%BB%9F-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（五）评价系统 具体实例</a></li></ol></div><h2 id="weight-具体实例"><a href="#weight-具体实例" class="headerlink" title="weight 具体实例"></a>weight 具体实例</h2><h3 id="1-准备数据"><a href="#1-准备数据" class="headerlink" title="1. 准备数据"></a>1. 准备数据</h3><ul><li>先准备数据和索引，在ES插入三笔数据，其中 language 是 text 类型，like 是 long 类型(代表点赞量)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /test_weight/_bulk?pretty</span><br><span class="line"></span><br><span class="line">&#123;&quot;index&quot;: &#123;&quot;_id&quot;: 1&#125;&#125;</span><br><span class="line">&#123;&quot;language&quot;: &quot;java&quot;, &quot;like&quot;: 5&#125;</span><br><span class="line">&#123;&quot;index&quot;: &#123;&quot;_id&quot;: 2&#125;&#125;</span><br><span class="line">&#123;&quot;language&quot;: &quot;python&quot;, &quot;like&quot;: 5&#125;</span><br><span class="line">&#123;&quot;index&quot;: &#123;&quot;_id&quot;: 3&#125;&#125;</span><br><span class="line">&#123;&quot;language&quot;: &quot;go&quot;, &quot;like&quot;: 10&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-weight-单独使用"><a href="#2-weight-单独使用" class="headerlink" title="2. weight 单独使用"></a>2. weight 单独使用</h3><ul><li>weight加强函数可以自己单独使用，只是这样做没啥意义，因为只是会给全部的文档都增加一个固定值而已</li><li>不过就DSL语法上来说，他也像其他加强函数一样，是可以直接使用的<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_weight/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;function_score&quot;: &#123;</span><br><span class="line">            &quot;query&quot;: &#123;</span><br><span class="line">                &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;functions&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;weight&quot;: 3</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;like&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;like&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;go&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;like&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-weight-和-filter-搭配"><a href="#3-weight-和-filter-搭配" class="headerlink" title="3. weight 和 filter 搭配"></a>3. weight 和 filter 搭配</h3><ul><li>functions是一个数组，里面放着的是将要被使用的加强函数列表，我们在里面使用了3个filter去过滤数据，并且每个filter都设置了一个加强函数，并且还使用了一个会应用到所有文档的field_value_factor加强函数</li><li>可以为列表里的每个加强函数都指定一个filter，这样做的话，只有在文档满足此filter的要求，此filter的加强函数才会应用到文挡上，也可以不指定filter，这样的话此加强函数就会应用到全部的文挡上</li><li>一个文档可以一次满足多条加强函数和多个filter，如果一次满足多个，那么就会产生多个加强score</li><li>因此ES会先使用score_mode定义的方式来合并这些加强score们，得到一个总加强score，得到总加强score之后，才会再使用boost_mode定义的方式去和old_score做合并<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_weight/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;function_score&quot;: &#123;</span><br><span class="line">            &quot;query&quot;: &#123;</span><br><span class="line">                &quot;match_all&quot;: &#123;&#125;  //match_all查出来的所有文档的_score都是1</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;functions&quot;: [</span><br><span class="line">                //第一个filter(使用weight加强函数)，如果language是java，加强score就是2</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;filter&quot;: &#123;</span><br><span class="line">                        &quot;term&quot;: &#123;</span><br><span class="line">                            &quot;language&quot;: &quot;java&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;weight&quot;: 2</span><br><span class="line">                &#125;,</span><br><span class="line">                //第二个filter(使用weight加强函数)，如果language是go，加强score就是3</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;filter&quot;: &#123;</span><br><span class="line">                        &quot;term&quot;: &#123;</span><br><span class="line">                            &quot;language&quot;: &quot;go&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;weight&quot;: 3</span><br><span class="line">                &#125;,</span><br><span class="line">                //第三个filter(使用weight加强函数)，如果like数大于等于10，加强score就是5</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;filter&quot;: &#123;</span><br><span class="line">                        &quot;range&quot;: &#123;</span><br><span class="line">                            &quot;like&quot;: &#123;</span><br><span class="line">                                &quot;gte&quot;: 10</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;weight&quot;: 5</span><br><span class="line">                &#125;,</span><br><span class="line">                //field_value_factor加强函数，会应用到所有文档上，加强score就是like值</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;field_value_factor&quot;: &#123;</span><br><span class="line">                        &quot;field&quot;: &quot;like&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;score_mode&quot;: &quot;multiply&quot;, //设置functions里面的加强score们怎么合并成一个总加强score</span><br><span class="line">            &quot;boost_mode&quot;: &quot;multiply&quot; //设置old_score怎么和总加强score合并</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">150</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//go同时满足filter2、filter3，且还有一个加强函数field_value_factor产生的加强，因此加强score为3, 5, 10，总加强score为3*5*10=150</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;go&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;like&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//java只满足filter1，但是因为还有field_value_facotr产生的加强score，因此加强score为2, 5，总加强score为2*5=10</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;like&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">//python不满足任何filter，因此加强score只有field_value_factor的like值，就是5</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;like&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-weight-和-field-value-factor-搭配"><a href="#4-weight-和-field-value-factor-搭配" class="headerlink" title="4. weight 和 field_value_factor 搭配"></a>4. weight 和 field_value_factor 搭配</h3><ul><li>weight加强函数也可以用来调整每个语句的贡献度，权重weight的默认值是1.0，当设置了weight，这个weight值会先和自己那个{}里的每个句子的评分相乘，之后再通过score_mode和其他加强函数合并</li><li>下面的查询，公式为new_score &#x3D; old_score * [ (like值 * weight1) + weight2 ]</li><li>公式解析 : weight1先加强like值(只能使用乘法)，接着再透过score_mode定义的方法(sum)和另一个加强函数weight2合并，得到一个总加强score，最后再使用boost_mode定义的方法(默认是multiply)和old_score做合并，得到new_score<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_weight/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;function_score&quot;: &#123;</span><br><span class="line">            &quot;query&quot;: &#123;</span><br><span class="line">                &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;functions&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;field_value_factor&quot;: &#123;</span><br><span class="line">                        &quot;field&quot;: &quot;like&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;weight&quot;: 3</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;weight&quot;: 20</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;score_mode&quot;: &quot;sum&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;go&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;like&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;like&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;like&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/tags/ElasticSearch/"/>
    
    <category term="function_score" scheme="http://www.isee.wang/tags/function-score/"/>
    
    <category term="相关度评分" scheme="http://www.isee.wang/tags/%E7%9B%B8%E5%85%B3%E5%BA%A6%E8%AF%84%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch - function_score 系列文章（二）field_value_factor 具体实例</title>
    <link href="http://www.isee.wang/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%8C%EF%BC%89field-value-factor-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B/"/>
    <id>http://www.isee.wang/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%8C%EF%BC%89field-value-factor-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B/</id>
    <published>2021-08-26T07:48:33.000Z</published>
    <updated>2023-06-05T01:22:42.494Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><div class="note info no-icon"><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B">ElasticSearch - function_score 系列文章（一）简介</a></li><li>ElasticSearch - function_score 系列文章（二）field_value_factor 具体实例</li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89weight-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（三）weight 具体实例</a></li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E8%A1%B0%E5%87%8F%E5%87%BD%E6%95%B0-linear%E3%80%81exp%E3%80%81gauss-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（四）衰减函数 linear、exp、gauss 具体实例</a></li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%94%EF%BC%89%E8%AF%84%E4%BB%B7%E7%B3%BB%E7%BB%9F-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（五）评价系统 具体实例</a></li></ol></div><h2 id="field-value-factor-具体实例"><a href="#field-value-factor-具体实例" class="headerlink" title="field_value_factor 具体实例"></a>field_value_factor 具体实例</h2><h3 id="1-准备数据"><a href="#1-准备数据" class="headerlink" title="1. 准备数据"></a>1. 准备数据</h3><ul><li>设想有个网站供用户发布博客并且可以让他们为自己喜欢的博客点赞，我们希望将更受欢迎的博客放在搜索结果列表中相对较上的位置，同时全文搜索的评分仍然作为相关度的主要排序依据，可以简单的通过存储每个博客的点赞数来实现它</li><li>首先准备数据和索引，在 ES 插入三条数据，其中 title 是 text 类型，votes 是 long 类型(代表点赞量)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /test_field_value_factor/_bulk?pretty</span><br><span class="line"></span><br><span class="line">&#123;&quot;index&quot;: &#123;&quot;_id&quot;: 1&#125;&#125;</span><br><span class="line">&#123;&quot;title&quot;: &quot;ES 入门&quot;, &quot;votes&quot;: 2&#125;</span><br><span class="line">&#123;&quot;index&quot;: &#123;&quot;_id&quot;: 2&#125;&#125;</span><br><span class="line">&#123;&quot;title&quot;: &quot;ES 进阶&quot;, &quot;votes&quot;: 5&#125;</span><br><span class="line">&#123;&quot;index&quot;: &#123;&quot;_id&quot;: 3&#125;&#125;</span><br><span class="line">&#123;&quot;title&quot;: &quot;ES 最高难度&quot;, &quot;votes&quot;: 10&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-普通查询"><a href="#2-普通查询" class="headerlink" title="2. 普通查询"></a>2. 普通查询</h3><ul><li>先使用一般的query，查看普通查询的原始评分如何<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_field_value_factor/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &quot;ES&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.14426158</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES 入门&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;votes&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.14426158</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES 进阶&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;votes&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.11623955</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES 最高难度&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;votes&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-function-score查询"><a href="#3-function-score查询" class="headerlink" title="3. function_score查询"></a>3. function_score查询</h3><ul><li>在搜索时，可以将 function_score 查询与 field_value_factor 结合使用，即将点赞数与全文相关度评分结合</li><li>使用 function_score 的 field_value_factor 改变 _score，将 old_score 乘上 votes 的值<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_field_value_factor/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;title&quot;: &quot;ES&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;field_value_factor&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;votes&quot;,</span><br><span class="line">        &quot;missing&quot;: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">1.1623955</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES 最高难度&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;votes&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.72130793</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES 进阶&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;votes&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.28852317</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES 入门&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;votes&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-max-boost限制"><a href="#4-max-boost限制" class="headerlink" title="4. max_boost限制"></a>4. max_boost限制</h3><ul><li>可以看到<code>ES 入门</code>的 加强score 是 2，在 max_boost 限制里，所以不受影响</li><li>而<code>ES 进阶</code>和<code>ES 最高难度</code>的 field_value_factor 函数产生的 加强score 因为超过 max_boost 的限制，所以被设为 3<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_field_value_factor/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;title&quot;: &quot;ES&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;field_value_factor&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;votes&quot;,</span><br><span class="line">        &quot;missing&quot;: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;max_boost&quot;: 3</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.43278474</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES 进阶&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;votes&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.34871864</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES 最高难度&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;votes&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">0.28852317</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES 入门&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;votes&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-modifier、factor-参数"><a href="#5-modifier、factor-参数" class="headerlink" title="5. modifier、factor 参数"></a>5. modifier、factor 参数</h3><ul><li>有时候线性的计算 new_score &#x3D; old_score * votes 值的效果并不是那么好， field_value_factor 中还支持 modifier、factor 参数，可以改变 votes 值对 old_score 的影响</li><li><code>modifier</code> 参数支持的值<ul><li>none : new_score &#x3D; old_score * votes值<ul><li>默认状态就是none，线性<br>  <img src="/images/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%8C%EF%BC%89field-value-factor-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B/1.png" loading="lazy"></li></ul></li><li>log1p : new_score &#x3D; old_score * log(1 + votes值)<ul><li>最常用，可以让votes值字段的评分曲线更平滑<br>  <img src="/images/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%8C%EF%BC%89field-value-factor-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B/2.png" loading="lazy"></li></ul></li><li>log2p : new_score &#x3D; old_score * log(2 + votes值)</li><li>ln : new_score &#x3D; old_score * ln(votes值)</li><li>ln1p : new_score &#x3D; old_score * ln(1 + votes值)</li><li>ln2p : new_score &#x3D; old_score * ln(2 + votes值)</li><li>square : 计算平方</li><li>sqrt : 计算平方根</li><li>reciprocal : 计算倒数</li></ul></li><li><code>factor</code> 参数<ul><li>factor作为一个调节用的参数，没有modifier那么强大会改变整个曲线，他仅改变一些常量值，设置 factor&gt;1 会提升效果，factor&lt;1 会降低效果</li><li>假设 modifier 是 log1p，那么加入了 factor 的公式就是 <code>new_score = old_score * log(1 + factor * votes值)</code><br>  <img src="/images/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%8C%EF%BC%89field-value-factor-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B/3.png" loading="lazy"></li></ul></li><li>对刚刚的例子加上 <code>modifier</code>、<code>factor</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_field_value_factor/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;title&quot;: &quot;ES&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;field_value_factor&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;votes&quot;,</span><br><span class="line">        &quot;modifier&quot;: &quot;log1p&quot;,</span><br><span class="line">        &quot;factor&quot;: 2,</span><br><span class="line">        &quot;missing&quot;: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-boost-mode"><a href="#6-boost-mode" class="headerlink" title="6. boost_mode"></a>6. boost_mode</h3><ul><li>就算加上了 modifier，但是 <code>全文评分 与 field_value_factor 函数值乘积</code> 的效果可能还是太大，我们可以通过参数 boost_mode 来决定 old_score 和 加强score 合并的方法</li><li>如果将 boost_mode 改成 sum，可以大幅弱化最终效果，特别是使用一个较小的 factor 时</li><li>加入了 boost_mode&#x3D;sum、且 factor&#x3D;0.1 的公式变为 <code>new_score = old_score + log(1 + 0.1 * votes值)</code><br><img src="/images/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%8C%EF%BC%89field-value-factor-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B/4.png" loading="lazy"></li><li>对刚刚的例子加上 boost_mode&#x3D;sum<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test_field_value_factor/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;title&quot;: &quot;ES&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;field_value_factor&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;votes&quot;,</span><br><span class="line">        &quot;modifier&quot;: &quot;log1p&quot;,</span><br><span class="line">        &quot;factor&quot;: 0.1,</span><br><span class="line">        &quot;missing&quot;: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;boost_mode&quot;: &quot;sum&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/tags/ElasticSearch/"/>
    
    <category term="function_score" scheme="http://www.isee.wang/tags/function-score/"/>
    
    <category term="相关度评分" scheme="http://www.isee.wang/tags/%E7%9B%B8%E5%85%B3%E5%BA%A6%E8%AF%84%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch - function_score 系列文章（一）简介</title>
    <link href="http://www.isee.wang/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.isee.wang/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%80%EF%BC%89%E7%AE%80%E4%BB%8B/</id>
    <published>2021-08-26T06:48:15.000Z</published>
    <updated>2023-06-05T01:22:42.494Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><div class="note info no-icon"><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li>ElasticSearch - function_score 系列文章（一）简介</li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%8C%EF%BC%89field-value-factor-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（二）field_value_factor 具体实例</a></li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%B8%89%EF%BC%89weight-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（三）weight 具体实例</a></li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E8%A1%B0%E5%87%8F%E5%87%BD%E6%95%B0-linear%E3%80%81exp%E3%80%81gauss-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（四）衰减函数 linear、exp、gauss 具体实例</a></li><li><a href="/ElasticSearch-function-score-%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%EF%BC%88%E4%BA%94%EF%BC%89%E8%AF%84%E4%BB%B7%E7%B3%BB%E7%BB%9F-%E5%85%B7%E4%BD%93%E5%AE%9E%E4%BE%8B">ElasticSearch - function_score 系列文章（五）评价系统 具体实例</a></li></ol></div><h2 id="function-score-查询"><a href="#function-score-查询" class="headerlink" title="function_score 查询"></a>function_score 查询</h2><ul><li>在使用ES进行全文搜索时，默认情况下，返回的结果是按照 <code>相关性</code> 进行排序的——最相关的文档排在最前。为了按照相关性来排序，需要将相关性表示为一个数值。在 Elasticsearch 中， <code>相关性得分</code> 由一个浮点数进行表示，并在搜索结果中通过 <code>_score</code> 参数返回， 默认排序是 <code>_score</code> 降序。</li><li><code>function_score 查询</code> 是用来控制评分过程的终极武器，它允许为每个与主查询匹配的文档应用一个函数，以达到改变甚至完全替换原始查询评分 <code>_score</code> 的目的。</li><li>实际上，也能用过滤器对结果的 <code>子集</code> 应用不同的函数，这样一箭双雕：既能高效评分，又能利用过滤器缓存。</li></ul><h2 id="function-score-提供了几种加强-score-计算的函数"><a href="#function-score-提供了几种加强-score-计算的函数" class="headerlink" title="function_score 提供了几种加强 _score 计算的函数"></a>function_score 提供了几种加强 _score 计算的函数</h2><ol><li><code>weight</code> : 为每个文档应用一个简单而不被规范化的权重提升值：当 weight 为 2 时，最终结果为 2 * _score 。</li><li><code>field_value_factor</code> : 使用这个值来修改 _score ，如将 popularity 或 votes （受欢迎度或赞）作为考虑因素。</li><li><code>random_score</code> : 为每个用户都使用一个不同的随机评分对结果排序，但对某一具体用户来说，看到的顺序始终是一致的。</li><li><code>衰减函数 —— linear 、 exp 、 gauss</code> : 将浮动值结合到评分 _score 中，例如结合 publish_date 获得最近发布的文档，结合 geo_location 获得更接近某个具体经纬度（lat&#x2F;lon）地点的文档，结合 price 获得更接近某个特定价格的文档。</li><li><code>script_score</code> : 如果需求超出以上范围时，用自定义脚本可以完全控制评分计算，实现所需逻辑。</li></ol><h2 id="function-score-查询模板"><a href="#function-score-查询模板" class="headerlink" title="function_score 查询模板"></a>function_score 查询模板</h2><ol><li>如果要使用 function_score 改变分数，要使用 function_score 查询</li><li>简单的说，就是在一个 function_score 内部 query 全文搜索得到的 _score 基础上，给他加上其他字段的评分标准，就能够得到把 &quot;全文搜索 + 其他字段&quot; 综合起来评分的效果</li><li>单个加强函数的查询模板<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /mytest/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;function_score&quot;: &#123;</span><br><span class="line">            &quot;query&quot;: &#123;.....&#125;, //主查询，查询完后这里自己会有一个评分，就是old_score</span><br><span class="line">            &quot;field_value_factor&quot;: &#123;...&#125;, //在old_score的基础上，给他加强其他字段的评分，这里会产生一个加强score，如果只有一个加强function时，直接将加强函数名写在query下面就可以了</span><br><span class="line">            &quot;boost_mode&quot;: &quot;multiply&quot;, //指定用哪种方式结合old_score和加强score成为new_score</span><br><span class="line">            &quot;max_boost&quot;: 1.5 //限制加强score的最高分，但是不会限制old_score</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>多个加强函数的查询模板<ul><li>如果有多个加强函数，那就要使用 functions 来包含这些加强函数们，functions 是一个数组，里面放着的是将要被使用的加强函数列表</li><li>可以为 functions 里的加强函数指定一个 filter，这样做的话，只有在文档满足此 filter 的要求，此 filter 的加强函数才会应用到文挡上，也可以不指定 filter，这样的话此加强函数就会应用到全部的文挡上</li><li>一个文档可以一次满足多条加强函数和多个 filter，如果一次满足多个，那么就会产生多个 加强score，因此 ES 会使用 score_mode 定义的方式来合并这些 加强score们，得到一个 总加强score，得到 总加强score之后，才会再使用 boost_mode 定义的方式去和 old_score 做合并</li><li>像是下面的例子，field_value_factor 和 gauss 这两个加强函数会应用到所有文档上，而 weight 只会应用到满足 filter 的文档上，假设有个文档满足了 filter 的条件，那他就会得到 3 个 加强score，这 3 个 加强score 会使用 sum 的方式合并成一个 总加强score，然后才和 old_score 使用 multiply 的方式合并<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /mytest/_search</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;function_score&quot;: &#123;</span><br><span class="line">            &quot;query&quot;: &#123;.....&#125;,</span><br><span class="line">            &quot;functions&quot;: [   //可以有多个加强函数(或是filter+加强函数)，每一个加强函数会产生一个加强score，因此functions会有多个加强score</span><br><span class="line">                &#123; &quot;field_value_factor&quot;: ... &#125;,</span><br><span class="line">                &#123; &quot;gauss&quot;: ... &#125;,</span><br><span class="line">                &#123; &quot;filter&quot;: &#123;...&#125;, &quot;weight&quot;: ... &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;score_mode&quot;: &quot;sum&quot;, //决定加强score们怎么合并,</span><br><span class="line">            &quot;boost_mode&quot;: &quot;multiply&quot; //决定总加強score怎么和old_score合并</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>不要执着在调整 function_score 上<ul><li>文档相关度的调整非常玄，<code>最相关的文档</code> 是一个难以触及的模糊概念，每个人对文档排序有着不同的想法，这很容易使人陷入持续反复调整，但是却没有明显的进展</li><li>为了避免跳入这种死循环，在调整 function_score 时，一定要搭配监控用户操作，才有意义<ul><li>像是如果返回的文档是用户想要的高相关的文档，那么用户就会选择前 10 个中的一个文档，得到想要的结果，反之，用户可能会来回点击，或是尝试新的搜索条件</li><li>一旦有了这些监控手段，想要调适完美的 function_score 就不是问题</li></ul></li><li>因此调整 function_score 的重点在于，要透过监控用户和用户互动，慢慢去调整我们的搜索条件，而不要妄想一步登天，第一次就把文档的相关度调整到最好，这几乎是不可能的，因为，连用户自己也不知道他自己想要什么</li></ul></li></ol><h2 id="function-scroe-其他辅助的参数"><a href="#function-scroe-其他辅助的参数" class="headerlink" title="function_scroe 其他辅助的参数"></a>function_scroe 其他辅助的参数</h2><ol><li><code>boost_mode</code> : 决定 old_score 和 加强score 如何合并<ul><li>multiply(默认) : new_score &#x3D; old_score * 加强score</li><li>sum : new_score &#x3D; old_score + 加强score</li><li>min : old_score 和 加强score 取较小值，new_score &#x3D; min(old_score, 加强score)</li><li>max : old_score 和 加强score 取较大值，new_score &#x3D; max(old_score, 加强score)</li><li>replace : 加强score直接替换掉 old_score，new_score &#x3D; 加强score</li></ul></li><li><code>score_mode</code> : 决定 functions 里面的 加强score 们怎么合并，会先合并 加强score 们成一个 总加强score，再使用 总加强score 去和 old_score 做合并，换言之就是会先执行 score_mode，再执行 boost_mode<ul><li>multiply (默认)</li><li>sum</li><li>avg</li><li>first : 使用首个函数(可以有filter，也可以没有)的结果作为最终结果</li><li>max</li><li>min</li></ul></li><li><code>max_boost</code> : 限制加强函数的最大效果，就是限制 加强score 最大能多少，但要注意不会限制 old_score<ul><li>如果 加强score 超过了 max_boost 限制的值，会把 加强score 的值设成 max_boost 的值</li><li>假设 加强score 是 5，而 max_boost 是 2，因为 加强score 超出了 max_boost 的限制，所以 max_boost 就会把 加强score 改为 2</li><li>简单的说，就是 加强score &#x3D; min(加强score, max_boost)</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="http://www.isee.wang/tags/ElasticSearch/"/>
    
    <category term="function_score" scheme="http://www.isee.wang/tags/function-score/"/>
    
    <category term="相关度评分" scheme="http://www.isee.wang/tags/%E7%9B%B8%E5%85%B3%E5%BA%A6%E8%AF%84%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security Oauth2 从零到一完整实践（六）踩坑记录</title>
    <link href="http://www.isee.wang/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%85%AD%EF%BC%89%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.isee.wang/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%85%AD%EF%BC%89%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2021-04-20T02:06:49.000Z</published>
    <updated>2023-06-05T01:22:42.496Z</updated>
    
    
    
    
    <category term="java" scheme="http://www.isee.wang/categories/java/"/>
    
    
    <category term="Spring" scheme="http://www.isee.wang/tags/Spring/"/>
    
    <category term="Security" scheme="http://www.isee.wang/tags/Security/"/>
    
    <category term="Oauth2" scheme="http://www.isee.wang/tags/Oauth2/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security Oauth2 从零到一完整实践（五）自定义授权模式（手机、邮箱等）</title>
    <link href="http://www.isee.wang/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%94%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%88%E6%9D%83%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%89%8B%E6%9C%BA%E3%80%81%E9%82%AE%E7%AE%B1%E7%AD%89%EF%BC%89/"/>
    <id>http://www.isee.wang/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%94%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%88%E6%9D%83%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%89%8B%E6%9C%BA%E3%80%81%E9%82%AE%E7%AE%B1%E7%AD%89%EF%BC%89/</id>
    <published>2021-04-20T02:06:24.000Z</published>
    <updated>2023-06-05T01:22:42.496Z</updated>
    
    
    
    
    <category term="java" scheme="http://www.isee.wang/categories/java/"/>
    
    
    <category term="Spring" scheme="http://www.isee.wang/tags/Spring/"/>
    
    <category term="Security" scheme="http://www.isee.wang/tags/Security/"/>
    
    <category term="Oauth2" scheme="http://www.isee.wang/tags/Oauth2/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security Oauth2 从零到一完整实践（四）资源服务器</title>
    <link href="http://www.isee.wang/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.isee.wang/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-04-20T02:06:04.000Z</published>
    <updated>2023-06-05T01:22:42.496Z</updated>
    
    
    
    
    <category term="java" scheme="http://www.isee.wang/categories/java/"/>
    
    
    <category term="Spring" scheme="http://www.isee.wang/tags/Spring/"/>
    
    <category term="Security" scheme="http://www.isee.wang/tags/Security/"/>
    
    <category term="Oauth2" scheme="http://www.isee.wang/tags/Oauth2/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security Oauth2 从零到一完整实践（三）授权服务器</title>
    <link href="http://www.isee.wang/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.isee.wang/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-04-20T01:18:16.000Z</published>
    <updated>2023-06-05T01:22:42.496Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><p>前面说了自动配置，现在就是来说自定义配置啦，这个是十分重要的一节，可以说 oauth2 的核心就是授权服务器了，所有的角色都是围绕着授权服务器而运作的，这里基本包含了资源服务器的所有配置。</p><div class="note warning"><p>注意：spring security oauth2 模块已经过期，见 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctc2VjdXJpdHktb2F1dGgjLWRlcHJlY2F0aW9uLW5vdGljZS0=">github<i class="fa fa-external-link-alt"></i></span>。</p></div><div class="note info no-icon"><p>github 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nkd3h3L3NwcmluZy1zZWN1cml0eS1vYXV0aDItZGVtbw==">spring-security-oauth2-demo<i class="fa fa-external-link-alt"></i></span></p><p>博客地址：<a href="/">isee.wang</a></p></div><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/">较为详细的学习 oauth2 的四种模式其中的两种授权模式</a></li><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/">spring boot oauth2 自动配置实现</a></li><li>spring security oauth2 授权服务器配置</li><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/">spring security oauth2 资源服务器配置</a></li><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%94%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%88%E6%9D%83%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%89%8B%E6%9C%BA%E3%80%81%E9%82%AE%E7%AE%B1%E7%AD%89%EF%BC%89/">spring security oauth2 自定义授权模式（手机、邮箱等）</a></li><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%85%AD%EF%BC%89%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/">spring security oauth2 踩坑记录</a></li></ol><h2 id="spring-security-oauth2-授权服务器"><a href="#spring-security-oauth2-授权服务器" class="headerlink" title="spring security oauth2 授权服务器"></a>spring security oauth2 授权服务器</h2><p>我们首先再次回顾下授权服务器的详细作用：</p><ol><li>客户端的验证与授权</li><li>令牌的生成与发放</li><li>令牌的校验与更新</li></ol><p>所以我们以下的操作都会围绕 <code>客户端</code> 与 <code>令牌</code> 来完成。</p><div class="note warning"><p>注意：以下授权服务器全默认在 8000 端口运行！！！</p></div><p>现在我们需要进行的就是授权服务器配置实现，我们完成项目的初始化，和之前创建完全一样，创建完成后，<strong>我们把 8080 端口修改为 8000 端口</strong>，然后项目结构如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/1.png" loading="lazy"></p><p>同时添加一下如下依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security.oauth.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-oauth2-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>既然是授权服务器，那么我们也就不用把它注册为资源服务器了，因为我们不对外暴露任何资源，仅仅只是为了令牌的下发，不需要做资源保护。</p><p>在我们配置授权服务器之前，需要先进行我们前面遇到过的配置 spring security web 安全，复制一下上一次的配置，就不截图了，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> isee.wang.oauth.authorization.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;http://isee.wang&quot;&gt;isee.wang&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/20 10:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码加密方式，spring 5 后必须对密码进行加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> BCryptPasswordEncoder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建两个内存用户</span></span><br><span class="line"><span class="comment">     * 用户名 user 密码 123456 角色 ROLE_USER</span></span><br><span class="line"><span class="comment">     * 用户名 admin 密码 admin 角色 ROLE_ADMIN</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> InMemoryUserDetailsManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">InMemoryUserDetailsManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">                .authorities(<span class="string">&quot;ROLE_USER&quot;</span>).build());</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .password(passwordEncoder().encode(<span class="string">&quot;admin&quot;</span>))</span><br><span class="line">                .authorities(<span class="string">&quot;ROLE_ADMIN&quot;</span>).build());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上一部分我们知道 spring-security-oauth2-autoconfigure 是自动配置的包，通过陪配置文件就可以完成一个授权服务器和资源服务器，现在我们需要来自定义他的授权服务器该怎么做呢？我们需要做的就是配置属于我们自己的 AuthorizationServerConfigurer了，当 spring 扫描到我们实现的配置以后，他就不回去自动配置 oauth2 了。为什么这么说呢？可以通过查看他的自动配置的源码你就会发现为什么，如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/2.png" loading="lazy"></p><p>所以，如果我们配置了 AuthorizationServerConfigurer 的bean，它是不会执行自动配置的。我们现在需要自定义，所以就要来实现一下这个接口。当然，spring 提供了相应的适配器来供我们实现这个接口的，他就是 AuthorizationServerConfigurerAdapter，我们只要继承这个类即可。我们来看看里面的三个配置方法：</p><table><thead><tr><th>方法名</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>configure</td><td>AuthorizationServerSecurityConfigurer</td><td>配置授权服务器的安全信息，比如 ssl 配置、checktoken 是否允许访问，是否允许客户端的表单身份验证等。</td></tr><tr><td>configure</td><td>ClientDetailsServiceConfigurer</td><td>配置客户端的 service，也就是应用怎么获取到客户端的信息，一般来说是从内存或者数据库中获取，已经提供了他们的默认实现，你也可以自定义。</td></tr><tr><td>configure</td><td>AuthorizationServerEndpointsConfigurer</td><td>配置授权服务器各个端点的非安全功能，如令牌存储，令牌自定义，用户批准和授权类型。如果需要密码授权模式，需要提供 AuthenticationManager 的 bean。</td></tr></tbody></table><p>所以为了方便，我们先在我们的 SecurityConfig 配置中创建一个 AuthenticationManager Bean，直接调用父类的方法获取即可，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 认证管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 认证管理对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 认证异常信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Bean</span>  <span class="comment">// 重点是这行，父类并没有将它注册为一个 Bean</span></span><br><span class="line"><span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是我们配置我们自己的授权服务器了，我们要完成如下的几种授权服务器配置</p><ul><li>基于内存的客户端信息与令牌存储</li><li>基于 mysql 的客户端信息与令牌存储</li><li>基于 redis 的令牌存储</li><li>基于 jwt 的令牌生成与配置</li><li>授权服务器小扩展</li></ul><div class="note info no-icon"><p><strong>以上可以自由组合，例如 mysql 客户端配合 redis 令牌存储等。</strong></p><p><strong>由于内容过多，防止由于依赖的问题导致不好运行查看效果，我每一种方式，都将它放在新的模块之中，模块的创建将会省略不写。分别为 内存、mysql、redis、jwt 四个模块</strong></p></div><p>不过在那之前，我们需要准备一个已经继承 AuthorizationServerConfigurerAdapter 的配置类，同时上面提到过，如果需要密码模式，我们要提供 AuthenticationManager 的 bean，所以我们在这里提前进行配置下，后面就不再进行赘述，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Oauth2AuthorizationServerConfig</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AuthorizationServerConfigurerAdapter</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="meta">@NonNull</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        endpoints.authenticationManager(<span class="built_in">this</span>.authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的项目结构如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/3.png" loading="lazy"></p><div class="note warning"><p>注意，为了方便，后面的测试均使用密码模式进行测试！</p></div><h2 id="基于内存的客户端信息与令牌存储"><a href="#基于内存的客户端信息与令牌存储" class="headerlink" title="基于内存的客户端信息与令牌存储"></a>基于内存的客户端信息与令牌存储</h2><div class="note default no-icon"><p>代码参见项目模块 spring-security-oauth2-authorization</p></div><p>我们将在内存中存储和读取客户端信息以及下发的令牌信息：</p><ul><li><strong>优点</strong>：速度快，读取速度和写入速度都很快，配置也极其方便。</li><li><strong>缺点</strong>：扩展性差，需要在代码中配置，重启应用后已经下发的令牌失效。</li><li><strong>适用场景</strong>：小型不易改变的应用，授权服务器和资源服务器一体的应用。</li></ul><h3 id="客户端信息"><a href="#客户端信息" class="headerlink" title="客户端信息"></a>客户端信息</h3><p>对于客户端信息的配置，你完全可以通过 <code>OAuth2AuthorizationServerConfiguration</code> 这个类学习到，对于客户端的配置我们主要实现对参数为 <code>ClientDetailsServiceConfigurer</code> 的方法配置，我们分来两个方式来学习：</p><ol><li>直接代码写死配置客户端信息</li><li>读取配置文件中的客户端信息</li></ol><h4 id="代码配置"><a href="#代码配置" class="headerlink" title="代码配置"></a>代码配置</h4><p>我们需要以下几步完成配置</p><ol><li>构建内存存储的 ClientDetailsService 实现类（spring security oauth 已经提供）。</li><li>利用构建出来的进行配置客户端。</li></ol><p>所以我们先进行第一步，我们获取他的建造者：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InMemoryClientDetailsServiceBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> clients.inMemory();</span><br></pre></td></tr></table></figure><p>然后通过他构建一个内存客户端：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">builder</span><br><span class="line"><span class="comment">// 构建一个 id 为 oauth2 的客户端</span></span><br><span class="line">        .withClient(<span class="string">&quot;oauth2&quot;</span>)</span><br><span class="line">        <span class="comment">// 设置她的密钥，加密后的</span></span><br><span class="line">        .secret(<span class="string">&quot;$2a$10$wlgcx61faSJ8O5I4nLiovO9T36HBQgh4RhOQAYNORCzvANlInVlw2&quot;</span>)</span><br><span class="line">        <span class="comment">// 设置允许访问的资源 id</span></span><br><span class="line">        .resourceIds(<span class="string">&quot;oauth2&quot;</span>)</span><br><span class="line">        <span class="comment">// 授权的类型</span></span><br><span class="line">        .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">        <span class="comment">// 可以授权的角色</span></span><br><span class="line">        .authorities(<span class="string">&quot;ROLE_ADMIN&quot;</span>, <span class="string">&quot;ROLE_USER&quot;</span>)</span><br><span class="line">        <span class="comment">// 授权的范围</span></span><br><span class="line">        .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">        <span class="comment">// token 有效期</span></span><br><span class="line">        .accessTokenValiditySeconds(Math.toIntExact(Duration.ofHours(<span class="number">1</span>).getSeconds()))</span><br><span class="line">        <span class="comment">// 刷新 token 的有效期</span></span><br><span class="line">        .refreshTokenValiditySeconds(Math.toIntExact(Duration.ofHours(<span class="number">1</span>).getSeconds()))</span><br><span class="line">        <span class="comment">// 授权码模式的重定向地址</span></span><br><span class="line">        .redirectUris(<span class="string">&quot;http://example.com&quot;</span>);</span><br></pre></td></tr></table></figure><p>看起来她配置的东西和我们在配置文件中写的东西是基本一致的，不过密码现在是加密后的了，如何获取呢？我是写了一个测试类如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> isee.wang.oauth.authorization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取加密后的密码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href=&quot;http://isee.wang&quot;&gt;isee.wang&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/4/27 17:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PasswordTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">password</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 每次打印的结果都不一样，不影响</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>().encode(<span class="string">&quot;oauth2&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将打印的密码填入即可，<strong>不过值得注意的是，她每次的加密结果都是不一样的。</strong>现在的文件如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/4.png" loading="lazy"></p><p>我们启动然后测试一下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/5.png" loading="lazy"></p><p>这个就从内存中存存储和读取客户端信息了，如果多个客户端呢？复制一遍就好啦</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">InMemoryClientDetailsServiceBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> clients.inMemory();</span><br><span class="line">    builder</span><br><span class="line">            <span class="comment">// 构建一个 id 为 oauth2 的客户端</span></span><br><span class="line">            .withClient(<span class="string">&quot;oauth2&quot;</span>)</span><br><span class="line">            <span class="comment">// 设置她的密钥，加密后的</span></span><br><span class="line">            .secret(<span class="string">&quot;$2a$10$8o7CwWaaMVvbUdnMwYs6IeWsUogIznSeWuP60zPiZHlY3OyCWywZC&quot;</span>)</span><br><span class="line">            <span class="comment">// 设置允许访问的资源 id</span></span><br><span class="line">            .resourceIds(<span class="string">&quot;oauth2&quot;</span>)</span><br><span class="line">            <span class="comment">// 授权的类型</span></span><br><span class="line">            .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">            <span class="comment">// 可以授权的角色</span></span><br><span class="line">            .authorities(<span class="string">&quot;ROLE_ADMIN&quot;</span>, <span class="string">&quot;ROLE_USER&quot;</span>)</span><br><span class="line">            <span class="comment">// 授权的范围</span></span><br><span class="line">            .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">            <span class="comment">// token 有效期</span></span><br><span class="line">            .accessTokenValiditySeconds(Math.toIntExact(Duration.ofHours(<span class="number">1</span>).getSeconds()))</span><br><span class="line">            <span class="comment">// 刷新 token 的有效期</span></span><br><span class="line">            .refreshTokenValiditySeconds(Math.toIntExact(Duration.ofHours(<span class="number">1</span>).getSeconds()))</span><br><span class="line">            <span class="comment">// 授权码模式的重定向地址</span></span><br><span class="line">            .redirectUris(<span class="string">&quot;http://example.com&quot;</span>);</span><br><span class="line">    builder</span><br><span class="line">            <span class="comment">// 构建一个 id 为 test 的客户端</span></span><br><span class="line">            .withClient(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">            <span class="comment">// 设置她的密钥，加密后的</span></span><br><span class="line">            .secret(<span class="string">&quot;$2a$10$8o7CwWaaMVvbUdnMwYs6IeWsUogIznSeWuP60zPiZHlY3OyCWywZC&quot;</span>)</span><br><span class="line">            <span class="comment">// 设置允许访问的资源 id</span></span><br><span class="line">            .resourceIds(<span class="string">&quot;oauth2&quot;</span>)</span><br><span class="line">            <span class="comment">// 授权的类型</span></span><br><span class="line">            .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">            <span class="comment">// 可以授权的角色</span></span><br><span class="line">            .authorities(<span class="string">&quot;ROLE_ADMIN&quot;</span>, <span class="string">&quot;ROLE_USER&quot;</span>)</span><br><span class="line">            <span class="comment">// 授权的范围</span></span><br><span class="line">            .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">            <span class="comment">// token 有效期</span></span><br><span class="line">            .accessTokenValiditySeconds(Math.toIntExact(Duration.ofHours(<span class="number">1</span>).getSeconds()))</span><br><span class="line">            <span class="comment">// 刷新 token 的有效期</span></span><br><span class="line">            .refreshTokenValiditySeconds(Math.toIntExact(Duration.ofHours(<span class="number">1</span>).getSeconds()))</span><br><span class="line">            <span class="comment">// 授权码模式的重定向地址</span></span><br><span class="line">            .redirectUris(<span class="string">&quot;http://example.com&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>亦或者完全使用链式结构如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    clients.inMemory()</span><br><span class="line">            .withClient(<span class="string">&quot;oauth2&quot;</span>)</span><br><span class="line">            .secret(<span class="string">&quot;$2a$10$8o7CwWaaMVvbUdnMwYs6IeWsUogIznSeWuP60zPiZHlY3OyCWywZC&quot;</span>)</span><br><span class="line">            .resourceIds(<span class="string">&quot;oauth2&quot;</span>)</span><br><span class="line">            .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">            .authorities(<span class="string">&quot;ROLE_ADMIN&quot;</span>, <span class="string">&quot;ROLE_USER&quot;</span>)</span><br><span class="line">            .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">            .accessTokenValiditySeconds(Math.toIntExact(Duration.ofHours(<span class="number">1</span>).getSeconds()))</span><br><span class="line">            .refreshTokenValiditySeconds(Math.toIntExact(Duration.ofHours(<span class="number">1</span>).getSeconds()))</span><br><span class="line">            .redirectUris(<span class="string">&quot;http://example.com&quot;</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .withClient(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">            .secret(<span class="string">&quot;$2a$10$8o7CwWaaMVvbUdnMwYs6IeWsUogIznSeWuP60zPiZHlY3OyCWywZC&quot;</span>)</span><br><span class="line">            .resourceIds(<span class="string">&quot;oauth2&quot;</span>)</span><br><span class="line">            .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">            .authorities(<span class="string">&quot;ROLE_ADMIN&quot;</span>, <span class="string">&quot;ROLE_USER&quot;</span>)</span><br><span class="line">            .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">            .accessTokenValiditySeconds(Math.toIntExact(Duration.ofHours(<span class="number">1</span>).getSeconds()))</span><br><span class="line">            .refreshTokenValiditySeconds(Math.toIntExact(Duration.ofHours(<span class="number">1</span>).getSeconds()))</span><br><span class="line">            .redirectUris(<span class="string">&quot;http://example.com&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h4><p>对于配置文件配置其实他已经有了默认的实现了，但是只能对一个客户端进行配置，我们需要多个的时候怎么办呢？就需要我们来扩展了，这个实现其实很简单，就是一个配置类和一个循环的实现，我们来捋一下步骤。</p><ol><li>读取配置文件，多个客户端信息</li><li>逐个配置客户端信息</li></ol><p>先来书写配置类，使用 lombok 自动生成 get&#x2F;set 等方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;application.security.oauth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;BaseClientDetails&gt; client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>书写配置文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">oauth:</span></span><br><span class="line">      <span class="string">client[0]:</span></span><br><span class="line">        <span class="attr">registered-redirect-uri:</span> <span class="string">http://example.com</span></span><br><span class="line">        <span class="comment"># 客户端 id</span></span><br><span class="line">        <span class="attr">client-id:</span> <span class="string">client1</span></span><br><span class="line">        <span class="comment"># 客户端密钥</span></span><br><span class="line">        <span class="attr">client-secret:</span> <span class="string">$2a$10$8o7CwWaaMVvbUdnMwYs6IeWsUogIznSeWuP60zPiZHlY3OyCWywZC</span></span><br><span class="line">        <span class="comment"># 授权范围</span></span><br><span class="line">        <span class="attr">scope:</span> <span class="string">all</span></span><br><span class="line">        <span class="comment"># token 有效期</span></span><br><span class="line">        <span class="attr">access-token-validity-seconds:</span> <span class="number">6000</span></span><br><span class="line">        <span class="comment"># 刷新 token 的有效期</span></span><br><span class="line">        <span class="attr">refresh-token-validity-seconds:</span> <span class="number">6000</span></span><br><span class="line">        <span class="comment"># 允许的授权类型</span></span><br><span class="line">        <span class="attr">grant-type:</span> <span class="string">authorization_code,password,refresh_token</span></span><br><span class="line">        <span class="comment"># 可以访问的资源 id</span></span><br><span class="line">        <span class="attr">resource-ids:</span> <span class="string">oauth2</span></span><br><span class="line">      <span class="string">client[1]:</span></span><br><span class="line">        <span class="attr">registered-redirect-uri:</span> <span class="string">http://example.com</span></span><br><span class="line">        <span class="comment"># 客户端 id</span></span><br><span class="line">        <span class="attr">client-id:</span> <span class="string">client2</span></span><br><span class="line">        <span class="comment"># 客户端密钥</span></span><br><span class="line">        <span class="attr">client-secret:</span> <span class="string">$2a$10$8o7CwWaaMVvbUdnMwYs6IeWsUogIznSeWuP60zPiZHlY3OyCWywZC</span></span><br><span class="line">        <span class="comment"># 授权范围</span></span><br><span class="line">        <span class="attr">scope:</span> <span class="string">all</span></span><br><span class="line">        <span class="comment"># token 有效期</span></span><br><span class="line">        <span class="attr">access-token-validity-seconds:</span> <span class="number">6000</span></span><br><span class="line">        <span class="comment"># 刷新 token 的有效期</span></span><br><span class="line">        <span class="attr">refresh-token-validity-seconds:</span> <span class="number">6000</span></span><br><span class="line">        <span class="comment"># 允许的授权类型</span></span><br><span class="line">        <span class="attr">grant-type:</span> <span class="string">authorization_code,password,refresh_token</span></span><br><span class="line">        <span class="comment"># 可以访问的资源 id</span></span><br><span class="line">        <span class="attr">resource-ids:</span> <span class="string">oauth2</span></span><br></pre></td></tr></table></figure><p>为了防止混淆，我单独写了一个方法来配置，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configClient</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">InMemoryClientDetailsServiceBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> clients.inMemory();</span><br><span class="line">    <span class="keyword">for</span> (BaseClientDetails client : clientDetails.getClient()) &#123;</span><br><span class="line">        ClientDetailsServiceBuilder&lt;InMemoryClientDetailsServiceBuilder&gt;.<span class="type">ClientBuilder</span> <span class="variable">clientBuilder</span> <span class="operator">=</span></span><br><span class="line">                builder.withClient(client.getClientId());</span><br><span class="line">        clientBuilder</span><br><span class="line">                .secret(client.getClientSecret())</span><br><span class="line">                .resourceIds(client.getResourceIds().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]))</span><br><span class="line">                .authorizedGrantTypes(client.getAuthorizedGrantTypes().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]))</span><br><span class="line">                .authorities(</span><br><span class="line">                        AuthorityUtils.authorityListToSet(client.getAuthorities())</span><br><span class="line">                                .toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]))</span><br><span class="line">                .scopes(client.getScope().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">        <span class="keyword">if</span> (client.getAutoApproveScopes() != <span class="literal">null</span>) &#123;</span><br><span class="line">            clientBuilder.autoApprove(</span><br><span class="line">                    client.getAutoApproveScopes().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (client.getAccessTokenValiditySeconds() != <span class="literal">null</span>) &#123;</span><br><span class="line">            clientBuilder.accessTokenValiditySeconds(</span><br><span class="line">                    client.getAccessTokenValiditySeconds());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (client.getRefreshTokenValiditySeconds() != <span class="literal">null</span>) &#123;</span><br><span class="line">            clientBuilder.refreshTokenValiditySeconds(</span><br><span class="line">                    client.getRefreshTokenValiditySeconds());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (client.getRegisteredRedirectUri() != <span class="literal">null</span>) &#123;</span><br><span class="line">            clientBuilder.redirectUris(</span><br><span class="line">                    client.getRegisteredRedirectUri().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/6.png" loading="lazy"></p><p>然后运行测试一下两个客户端</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/7.png" loading="lazy"><br><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/8.png" loading="lazy"></p><p>这样也实现了效果</p><h3 id="令牌存储"><a href="#令牌存储" class="headerlink" title="令牌存储"></a>令牌存储</h3><p>其实他默认的令牌存储就是使用到内存存储，所以我们无需配置～何以见得呢？我们来简单分析一下。</p><p>在前面我们说过 <code>AuthorizationServerConfigurer</code> 的三个配置方法，其中就有一个参数为 <code>AuthorizationServerEndpointsConfigurer</code> 类型的配置方法，它可以配置我们令牌信息，所以我们就要把目标放在他的上面看看，去找一找他是如何配置的。</p><p>他的核心配置类是 <code>AuthorizationServerEndpointsConfiguration</code>，这个类内容很多，我们只关注他是默认配置的为什么是内存的，首先找到一个工厂类：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/9.png" loading="lazy"></p><p>我们跟进去看看：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/10.png" loading="lazy"><br><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/11.png" loading="lazy"><br><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/12.png" loading="lazy"></p><p>这样我们就找到她是如何默认创建的了。</p><h2 id="基于-mysql-的客户端信息与令牌存储"><a href="#基于-mysql-的客户端信息与令牌存储" class="headerlink" title="基于 mysql 的客户端信息与令牌存储"></a>基于 mysql 的客户端信息与令牌存储</h2><div class="note default no-icon"><p>代码参见项目模块 spring-security-oauth2-authorization-mysql</p><p>模块创建步骤省略</p></div><p>我们将在 mysql 中存储和读取客户端信息以及下发的令牌信息：</p><ul><li><strong>优点</strong>：扩展性极高，不用修改代码与重启就可以完成客户端管理，安全性高。</li><li><strong>缺点</strong>：使用数据库速度过慢，多客户端高并发情况下可能会造成性能瓶颈</li><li><strong>适用场景</strong>：中大型项目，独立且完整的授权服务器。</li></ul><p>在这之前你要添加如下的 mysql 和 jdbc 依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件如下，我的 mysql 版本为 5.7 ，url 参数请自行修改</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/auth?useUnicode=true&amp;characterEncoding=UTF-8&amp;useOldAliasMetadataBehavior=true&amp;autoReconnect=true&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment"># 用来初始化数据库的，如果不存在表就自动创建</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">ALWAYS</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">classpath:ddl.sql</span></span><br></pre></td></tr></table></figure><p>导入 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctc2VjdXJpdHktb2F1dGgvYmxvYi9tYXN0ZXIvc3ByaW5nLXNlY3VyaXR5LW9hdXRoMi9zcmMvdGVzdC9yZXNvdXJjZXMvc2NoZW1hLnNxbA==">官方提供<i class="fa fa-external-link-alt"></i></span> 的 h2 的表，由于官方使用的是 h2 的数据库，有些字段类型不对，我修改成 mysql 的后如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- used in tests that use MYSQL</span><br><span class="line">create table if not exists oauth_client_details (</span><br><span class="line">  client_id VARCHAR(256) PRIMARY KEY,</span><br><span class="line">  resource_ids VARCHAR(256),</span><br><span class="line">  client_secret VARCHAR(256),</span><br><span class="line">  scope VARCHAR(256),</span><br><span class="line">  authorized_grant_types VARCHAR(256),</span><br><span class="line">  web_server_redirect_uri VARCHAR(256),</span><br><span class="line">  authorities VARCHAR(256),</span><br><span class="line">  access_token_validity INTEGER,</span><br><span class="line">  refresh_token_validity INTEGER,</span><br><span class="line">  additional_information VARCHAR(4096),</span><br><span class="line">  autoapprove VARCHAR(256)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;</span><br><span class="line"></span><br><span class="line">create table if not exists oauth_client_token (</span><br><span class="line">  token_id VARCHAR(256),</span><br><span class="line">  token BLOB,</span><br><span class="line">  authentication_id VARCHAR(256) PRIMARY KEY,</span><br><span class="line">  user_name VARCHAR(256),</span><br><span class="line">  client_id VARCHAR(256)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;</span><br><span class="line"></span><br><span class="line">create table if not exists oauth_access_token (</span><br><span class="line">  token_id VARCHAR(256),</span><br><span class="line">  token BLOB,</span><br><span class="line">  authentication_id VARCHAR(256) PRIMARY KEY,</span><br><span class="line">  user_name VARCHAR(256),</span><br><span class="line">  client_id VARCHAR(256),</span><br><span class="line">  authentication BLOB,</span><br><span class="line">  refresh_token VARCHAR(256)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;</span><br><span class="line"></span><br><span class="line">create table if not exists oauth_refresh_token (</span><br><span class="line">  token_id VARCHAR(256),</span><br><span class="line">  token BLOB,</span><br><span class="line">  authentication BLOB</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;</span><br><span class="line"></span><br><span class="line">create table if not exists oauth_code (</span><br><span class="line">  code VARCHAR(256), authentication BLOB</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;</span><br><span class="line"></span><br><span class="line">create table if not exists oauth_approvals (</span><br><span class="line">userId VARCHAR(256),</span><br><span class="line">clientId VARCHAR(256),</span><br><span class="line">scope VARCHAR(256),</span><br><span class="line">status VARCHAR(10),</span><br><span class="line">expiresAt TIMESTAMP,</span><br><span class="line">lastModifiedAt TIMESTAMP</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- customized oauth_client_details table</span><br><span class="line">create table if not exists ClientDetails (</span><br><span class="line">  appId VARCHAR(256) PRIMARY KEY,</span><br><span class="line">  resourceIds VARCHAR(256),</span><br><span class="line">  appSecret VARCHAR(256),</span><br><span class="line">  scope VARCHAR(256),</span><br><span class="line">  grantTypes VARCHAR(256),</span><br><span class="line">  redirectUrl VARCHAR(256),</span><br><span class="line">  authorities VARCHAR(256),</span><br><span class="line">  access_token_validity INTEGER,</span><br><span class="line">  refresh_token_validity INTEGER,</span><br><span class="line">  additionalInformation VARCHAR(4096),</span><br><span class="line">  autoApproveScopes VARCHAR(256)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure><p>先给大家介绍一下几张表的具体意思和结构：</p><p>oauth_client_details &#x3D;&#x3D;&#x3D;&gt; 客户端信息</p><table><thead><tr><th>列名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>client_id（主键）</td><td>VARCHAR(256)</td><td>主键,必须唯一,不能为空. 用于唯一标识每一个客户端(client); 在注册时必须填写(也可由服务端自动生成). 对于不同的grant_type,该字段都是必须的. 在实际应用中的另一个名称叫appKey,与client_id是同一个概念.</td></tr><tr><td>resource_ids</td><td>VARCHAR(256)</td><td>客户端所能访问的资源id集合,多个资源时用逗号(,)分隔</td></tr><tr><td>client_secret</td><td>VARCHAR(256)</td><td>用于指定客户端(client)的访问密匙; 在注册时必须填写(也可由服务端自动生成). 对于不同的grant_type,该字段都是必须的. 在实际应用中的另一个名称叫appSecret,与client_secret是同一个概念.</td></tr><tr><td>scope</td><td>VARCHAR(256)</td><td>指定客户端申请的权限范围,可选值包括read,write,trust;若有多个权限范围用逗号(,)分隔,如: “read,write”.</td></tr><tr><td>authorized_grant_types</td><td>VARCHAR(256)</td><td>指定客户端支持的grant_type,可选值包括authorization_code,password,refresh_token,implicit,client_credentials,若支持多个grant_type用逗号(,)分隔,如: “authorization_code,password”.在实际应用中,当注册时,该字段是一般由服务器端指定的,而不是由申请者去选择的,</td></tr><tr><td>web_server_redirect_uri</td><td>VARCHAR(256)</td><td>客户端的重定向URI,可为空, 当grant_type为authorization_code或implicit时, 在Oauth的流程中会使用并检查与注册时填写的redirect_uri是否一致.</td></tr><tr><td>authorities</td><td>VARCHAR(256)</td><td>指定客户端所拥有的Spring Security的权限值,可选, 若有多个权限值,用逗号(,)分隔, 如: &quot;ROLE_ADMIN&quot;</td></tr><tr><td>access_token_validity</td><td>INTEGER</td><td>设定客户端的access_token的有效时间值(单位:秒),可选, 若不设定值则使用默认的有效时间值(60 * 60 * 12, 12小时).</td></tr><tr><td>refresh_token_validity</td><td>INTEGER</td><td>设定客户端的refresh_token的有效时间值(单位:秒),可选, 若不设定值则使用默认的有效时间值(60 * 60 * 12, 12小时).</td></tr><tr><td>additional_information</td><td>VARCHAR(4096)</td><td>这是一个预留的字段,在Oauth的流程中没有实际的使用,可选,但若设置值,必须是JSON格式的数据,在实际应用中, 可以用该字段来存储关于客户端的一些其他信息</td></tr><tr><td>autoapprove</td><td>VARCHAR(256)</td><td>设置用户是否自动Approval操作, 默认值为 ‘false’, 可选值包括 ‘true’,‘false’, ‘read’,‘write’.该字段只适用于grant_type&#x3D;&quot;authorization_code&quot;的情况,当用户登录成功后,若该值为’true’或支持的scope值,则会跳过用户Approve的页面,直接授权.</td></tr></tbody></table><p>oauth_client_token &#x3D;&#x3D;&#x3D;&gt; 客户端系统中存储从服务端获取的 token 数据</p><table><thead><tr><th>字段名</th><th>字段类型</th><th>描述</th></tr></thead><tbody><tr><td>token_id</td><td>VARCHAR(256)</td><td>从服务器端获取到的access_token的值.</td></tr><tr><td>token</td><td>BLOB</td><td>这是一个二进制的字段, 存储的数据是OAuth2AccessToken.java对象序列化后的二进制数据.</td></tr><tr><td>authentication_id</td><td>VARCHAR(256)</td><td>该字段具有唯一性, 是根据当前的username(如果有),client_id与scope通过MD5加密生成的. 具体实现请参考DefaultClientKeyGenerator.java类.</td></tr><tr><td>user_name</td><td>VARCHAR(256)</td><td>登录时的用户名</td></tr><tr><td>client_id</td><td>VARCHAR(256)</td><td>客户端 id</td></tr></tbody></table><p>oauth_access_token &#x3D;&#x3D;&#x3D;&gt; 生成的 token 数据</p><table><thead><tr><th>字段名</th><th>字段类型</th><th>描述</th></tr></thead><tbody><tr><td>token_id</td><td>VARCHAR(256)</td><td>从服务器端获取到的access_token的值.</td></tr><tr><td>token</td><td>BLOB</td><td>存储将OAuth2AccessToken.java对象序列化后的二进制数据, 是真实的AccessToken的数据值.</td></tr><tr><td>authentication_id</td><td>VARCHAR(256)</td><td>该字段具有唯一性, 其值是根据当前的username(如果有),client_id与scope通过MD5加密生成的.</td></tr><tr><td>user_name</td><td>VARCHAR(256)</td><td>登录时的用户名, 若客户端没有用户名(如grant_type&#x3D;“client_credentials”),则该值等于client_id</td></tr><tr><td>client_id</td><td>VARCHAR(256)</td><td>客户端 id</td></tr><tr><td>authentication</td><td>BLOB</td><td>存储将 OAuth2Authentication 对象序列化后的二进制数据.</td></tr><tr><td>refresh_token</td><td>VARCHAR(256)</td><td>该字段的值是将refresh_token的值通过MD5加密后存储的.</td></tr></tbody></table><p>oauth_refresh_token &#x3D;&#x3D;&#x3D;&gt; 刷新 token</p><table><thead><tr><th>字段名</th><th>字段类型</th><th>描述</th></tr></thead><tbody><tr><td>token_id</td><td>VARCHAR(256)</td><td>该字段的值是将refresh_token的值通过MD5加密后存储的.</td></tr><tr><td>token</td><td>BLOB</td><td>存储将OAuth2RefreshToken.java对象序列化后的二进制数据.</td></tr><tr><td>authentication</td><td>BLOB</td><td>存储将OAuth2Authentication.java对象序列化后的二进制数据.</td></tr></tbody></table><p>oauth_code &#x3D;&#x3D;&#x3D;&gt; 服务端生成的 code 值</p><table><thead><tr><th>字段名</th><th>字段类型</th><th>描述</th></tr></thead><tbody><tr><td>code</td><td>VARCHAR(256)</td><td>存储服务端系统生成的code的值(未加密).</td></tr></tbody></table><p>oauth_approvals &#x3D;&#x3D;&#x3D;&gt; 授权同意信息</p><table><thead><tr><th>字段名</th><th>字段类型</th><th>描述</th></tr></thead><tbody><tr><td>userId</td><td>VARCHAR(256)</td><td>用户 id</td></tr><tr><td>clientId</td><td>VARCHAR(256)</td><td>客户端 id</td></tr><tr><td>scope</td><td>VARCHAR(256)</td><td>请求的范围</td></tr><tr><td>status</td><td>VARCHAR(10)</td><td>授权的状态</td></tr><tr><td>expiresAt</td><td>TIMESTAMP</td><td>时间</td></tr><tr><td>lastModifiedAt</td><td>TIMESTAMP</td><td>最后修改的时间</td></tr></tbody></table><p>最后一张 ClientDetails 是我们要自定义他的 表 的情况，在我们需要自定义的时候使用，但是目前我们暂时不去自定义，所以无用。</p><p>所以你现在的项目结构应该如下</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/13.png" loading="lazy"></p><p>记得启动测试一下，确定不报错。</p><p>接下来我们就是来进行配置了，同样的，分为客户端信息配置和令牌配置</p><h3 id="客户端信息-1"><a href="#客户端信息-1" class="headerlink" title="客户端信息"></a>客户端信息</h3><p>同样，对于客户端的配置我们主要实现对参数为 ClientDetailsServiceConfigurer 的方法进行配置，我们需要完成以下两步：</p><ol><li>构建一个 jdbc 的 ClientDetailsService，通过他来链接数据库。</li><li>将它配置进 ClientDetailsServiceConfigurer 之中。</li></ol><p>我们首先先来配置一个 jdbc 的 ClientDetailsService ，非常简单，因为他已经提供了默认的实现了的，构建方式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据源</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="meta">@NonNull</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明 ClientDetails实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> ClientDetailsService</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ClientDetailsService <span class="title function_">clientDetails</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcClientDetailsService</span>(dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将他配置进 ClientDetailsServiceConfigurer 之中，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    clients.withClientDetails(clientDetails());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.isee.wang/categories/java/"/>
    
    
    <category term="Spring" scheme="http://www.isee.wang/tags/Spring/"/>
    
    <category term="Security" scheme="http://www.isee.wang/tags/Security/"/>
    
    <category term="Oauth2" scheme="http://www.isee.wang/tags/Oauth2/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security Oauth2 从零到一完整实践（二）自动配置实现</title>
    <link href="http://www.isee.wang/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.isee.wang/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-04-19T07:00:24.000Z</published>
    <updated>2023-06-05T01:22:42.496Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><p>前面我们学习了四种授权模式的两种，因为那两种分别满足了方便和安全，已经能够胜任大多数情况，我们从简开始，先来用最简单的方式开始。</p><div class="note info no-icon"><p>github 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nkd3h3L3NwcmluZy1zZWN1cml0eS1vYXV0aDItZGVtbw==">spring-security-oauth2-demo<i class="fa fa-external-link-alt"></i></span></p><p>博客地址：<a href="/">isee.wang</a></p></div><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/">较为详细的学习 oauth2 的四种模式其中的两种授权模式</a></li><li>spring boot oauth2 自动配置实现</li><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/">spring security oauth2 授权服务器配置</a></li><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/">spring security oauth2 资源服务器配置</a></li><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%94%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%88%E6%9D%83%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%89%8B%E6%9C%BA%E3%80%81%E9%82%AE%E7%AE%B1%E7%AD%89%EF%BC%89/">spring security oauth2 自定义授权模式（手机、邮箱等）</a></li><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%85%AD%EF%BC%89%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/">spring security oauth2 踩坑记录</a></li></ol><h2 id="spring-boot-oauth2-自动配置实现"><a href="#spring-boot-oauth2-自动配置实现" class="headerlink" title="spring boot oauth2 自动配置实现"></a>spring boot oauth2 自动配置实现</h2><p>spring boot 最大一个特点就是 <strong>约定大于配置，去繁就简</strong> 。既然如此，他自然也提供了一套 oauth2 的自动化配置，我们先来实验他完成的自动化配置看看效果。</p><p>首先创建我们的 module 如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/1.png" loading="lazy"><br><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/2.png" loading="lazy"><br><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/3.png" loading="lazy"></p><div class="note warning"><p>注意：这个过程以后不再截图演示。</p></div><p>在 pom.xml 中添加如下依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security.oauth.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-oauth2-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="spring-security-保护的资源"><a href="#spring-security-保护的资源" class="headerlink" title="spring security 保护的资源"></a>spring security 保护的资源</h2><p>默认情况下，我们加入了 spring security 的依赖，他会保护我们的资源。现在添加启动类如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接启动，控制台如下</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/4.png" loading="lazy"></p><p>然后访问 <span class="exturl" data-url="aHR0cDovLzEyNy4wLjAuMTo4MDgwLw==">http://127.0.0.1:8080<i class="fa fa-external-link-alt"></i></span> ，如下</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/5.png" loading="lazy"></p><p>使用用户名 user 密码为控制台打印的那一串登录即可，成功后如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/6.png" loading="lazy"></p><p>但是现在默认的是 spring security，我们接下来来实验一下 oauth2 保护我们的资源</p><h2 id="spring-security-oauth2-保护资源"><a href="#spring-security-oauth2-保护资源" class="headerlink" title="spring security oauth2 保护资源"></a>spring security oauth2 保护资源</h2><p>我们在前面提到过 oauth2 的几种角色，我们现在一步一步的来。在下面的授权服务器与资源服务器，我们将他们存在同一个应用之中使用，先以最快速的方式学习与了解，后面再来考虑分离的问题。</p><h2 id="授权服务器"><a href="#授权服务器" class="headerlink" title="授权服务器"></a>授权服务器</h2><p>首先第一步是授权服务器，因为它是我们获取与请求凭证的地方，我们需要他来给我们下发令牌凭证，如何开启呢？需要一个启动注解@EnableAuthorizationServer 添加在启动类上即可。</p><p>同时为了方便测试，我们添加一个 ResourceController 来设置一个资源访问路径如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/7.png" loading="lazy"></p><p>这个时候我们再启动，然后去访问就会发现不需要登录了</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/8.png" loading="lazy"></p><p>因为现在 spring security 已经不再去管理你的应用了，<strong>然而现在你只配置了授权服务器，他不会保护你的应用程序的，所以不需要登录了。我们暂时不管，现在授权服务器的任务是验证身份并下发令牌，我们来测试一下。</strong></p><p>为了方便查看路径，我们开启 debug 日志，以便更好的理解整个过程；添加 application.yml 以及内容如下：</p><figure class="highlight yaml"><figcaption><span>application.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org:</span></span><br><span class="line">      <span class="attr">springframework:</span></span><br><span class="line">        <span class="attr">security:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p>然后运行，你会看到如下画面：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/9.png" loading="lazy"></p><p>在我们启动的时候为我们自动生成的了一些东西：</p><ul><li>用户密码</li><li>客户端 id</li><li>客户端密码</li><li>添加了七个路径</li><li>使用权限表达式设置访问权限</li></ul><h3 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h3><p>spring security oauth 授权服务器默认开启授权码模式。那么按照我们前面说的，<strong>授权码模式是在授权端点 &#x2F;oauth&#x2F;authorize 请求授权码</strong>，路径应该如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/oauth/authorize?response_type=code&amp;client_id=b6a2f868-cba4-4c44-bfec-4cde082e979f&amp;redirect_uri=http://example.com&amp;scope=all</span><br></pre></td></tr></table></figure><div class="note warning no-icon"><p><strong>为什么回调地址是 <span class="exturl" data-url="aHR0cDovL2V4YW1wbGUuY29tLw==">http://example.com<i class="fa fa-external-link-alt"></i></span> ？</strong></p><p>因为我们现在没有任何应用，需要一个页面来接收回调后的授权码，所以随便找了一个。</p></div><p>访问后会出现如下错误</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/10.png" loading="lazy"></p><p>这是因为我们没有配置 spring security 造成的，所以需要回去配置一下，使用默认配置即可，添加一个配置类如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/11.png" loading="lazy"></p><p>重启启动后，你会发现，现在的网页又不能访问了，全都提示需要登录了，暂时不管。</p><p><strong>我们使用新的 client id 去请求授权</strong>，他会自动跳转到登录页面了，如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/12.png" loading="lazy"></p><p>这里的步骤是在授权服务器上面的，就像我们点击第三方登录的 qq 的时候，是跳转到 腾讯 自己的登录页面的。用户名 user ，密码为控制台生成的，登录后如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/13.png" loading="lazy"></p><p>它提示我们 <strong>至少为客户端注册一个回调地址</strong> ，我们请求授权的时候传递了一个回调地址了，这里为什么还需要一个呢？这个很容易理解，<strong>因为你传递过来的回调地址授权服务器不知道是否合法，可能会在传输的中途被篡改，所以在授权服务器里面需要你注册一个回调地址，与你传递过来的进行对比，如果匹配才会携带授权码进行回调。</strong>这样就有效避免中途被篡改的问题了，所以现在我们需要去注册一个回调地址，在 application.yml 中配置：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/14.png" loading="lazy"></p><p>然后重新启动，再次携带新的客户端id进行访问：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/15.png" loading="lazy"></p><p>当我们确认授权了以后，这个授权流程也就完毕了，也就相当于前面 <strong>角色中的抽象流图的 AB 完成了</strong> ，我们看看得到的授权码</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/16.png" loading="lazy"></p><p><strong>接下来我们需要使用此授权码去完成请求令牌的操作也就是前面说到的第二个请求</strong>，我们需要 postman 接口测试工具：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/17.png" loading="lazy"></p><p>当我们设置好授权信息以后他会为我们自动添加一个请求头</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/18.png" loading="lazy"></p><p>请求头的添加方式就是前面提到的 <strong>客户端加密</strong> 的那一部分，不再赘述。然后我们设置 <strong>第二个请求的请求参数</strong> 如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/19.png" loading="lazy"></p><p>这样我们就获取到令牌了，到这一步，也就相当于前面 角色中的抽象流图的 CD 也完成了 。这就是授权码模式获取令牌的两个请求的过程。</p><h3 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h3><p>接下来我们来试一下 <strong>密码模式</strong> 来获取令牌，就像前面所说，他只有一个请求即可，所以我们只要用 postman 携带参数请求一下就好了。</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/20.png" loading="lazy"></p><p>相比起来，密码模式就简单太多啦！但是用户名密码是在客户端那里的，而不是在授权服务器这边的，所以只能是完全信得过的应用才能够使用！</p><h3 id="快速自定义"><a href="#快速自定义" class="headerlink" title="快速自定义"></a>快速自定义</h3><p><strong>所谓快速自定义，就是我们不需要写代码，通过配置文件即可完成自定义。</strong>对于 oauth2 客户端，提供了如下配置让我们快速自定义：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/21.png" loading="lazy"></p><p>当然，只能提供一个客户端使用。我们后面再来详细学习如何自定义</p><h3 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h3><p>其实用户就是用的 spring security 的用户，但是由于不能够直接在配置文件中指定用户的密码了，所以我们需要建一个 UserService 的实现类。不过在那之前，我们需要配置一个密码加密器，让我们的密码得到保障，而不是明文传输，spring 5 以后这个是必须指定的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BCrypt 不可逆的加密算法，无法通过解密密文得到明文，和其他对称或非对称加密方式不同的是，不是直接解密得到明文，也不是二次加密比较密文，而是把明文和存储的密文一块运算得到另一个密文，如果这两个密文相同则验证成功。对于同一个密码，每次加密出来是完全不同的，所以安全性很可靠。</p><p>下面的用户我们用最快捷的方式来进行创建，创建两个内存用户：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">InMemoryUserDetailsManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryUserDetailsManager</span>();</span><br><span class="line">    manager.createUser(User.withUsername(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                   .password(passwordEncoder().encode(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">                   .authorities(<span class="string">&quot;ROLE_USER&quot;</span>).build());</span><br><span class="line">    manager.createUser(User.withUsername(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                   .password(passwordEncoder().encode(<span class="string">&quot;admin&quot;</span>))</span><br><span class="line">                   .authorities(<span class="string">&quot;ROLE_ADMIN&quot;</span>).build());</span><br><span class="line">    <span class="keyword">return</span> manager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/22.png" loading="lazy"></p><p>获取令牌看看</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/23.png" loading="lazy"></p><h2 id="资源服务器"><a href="#资源服务器" class="headerlink" title="资源服务器"></a>资源服务器</h2><p>现在我们取到了 token，我们来尝试访问一下被保护的资源，使用浏览器访问：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/24.png" loading="lazy"></p><p>你会发现同样需要你登录，因为现在是由 spring security 进行资源保护的。那么我们看看携带 token 使用 postman 测试一下会怎样呢？</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/25.png" loading="lazy"></p><p>会发现是 401，也就是令牌是无效的，原因就是因为现在资源的保护是由传统的 spring security 来进行保护的。接下来我们就要配置我们的资源服务器。</p><p>同授权服务器一样，资源服务器的启动也只需要一个注解就可以了：@EnableResourceServer，启动类添加此注解如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动下应用，通过浏览器看看</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/26.png" loading="lazy"></p><p>你会发现已经不能够登录了。现在重新用密码模式请求下 token，截图省略，然后获取 token 后去请求我们受保护的资源试一试：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/27.png" loading="lazy"></p><p>现在携带正确的 token 就可以请求到数据了，这就是已经由 spring security oauth 来进行资源保护了。</p><p>对于资源服务器的自定义配置，目前只有一个地方，就是资源的 id ，如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/28.png" loading="lazy"></p><p>如果两者不相同会抛出如下异常：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;access_denied&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error_description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Invalid token does not contain resource id (resource-id)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其他的配置我们后面再说，因为他主要涉及到与授权服务器的分离的情况。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>除了获取 token 和请求以外，她还可以配置一些默认的实现。</p><h3 id="解析-token"><a href="#解析-token" class="headerlink" title="解析 token"></a>解析 token</h3><p>我们需要在配置文件中添加如下配置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">oauth2:</span></span><br><span class="line">    <span class="attr">authorization:</span></span><br><span class="line">      <span class="comment"># 允许使用 /oauth/check_token 端点</span></span><br><span class="line">      <span class="attr">check-token-access:</span> <span class="string">isAuthenticated()</span></span><br></pre></td></tr></table></figure><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/29.png" loading="lazy"></p><p>熟悉 SqEL 表达式的同学应该知道 isAuthenticated() 的意思，它允许此端点的访问，重启后获取新的 token，来访问试一试，参数前面已经说过不再赘述：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/30.png" loading="lazy"></p><p>这样就成功解析了我们的 token 信息！</p><div class="note warning"><p>使用默认配置的情况下且不增加类的情况下，我们是没有办法刷新 token 的。</p></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个部分是我们最基础的部分，也是最为简单的部分，使用 spring boot oauth 的自动配置完成了简单的授权服务器和资源服务器的配置， 通过这两个服务器的配置就可以快速搭建起来 oauth2 的授权流程，为我们省掉了很多麻烦事儿，当然，自动配置有好处也有坏处，由于他自动帮我们配置好了很多，能满足很多的小型应用的需求了。但是要求总是在变化的，所以有些不符合我们要求的地方我们需要去自己自定义的，下面我们就要进入 spring security oauth2 完整自定义配置环节，分为两个部分，一个授权服务器，一个资源服务器的配置。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.isee.wang/categories/java/"/>
    
    
    <category term="Spring" scheme="http://www.isee.wang/tags/Spring/"/>
    
    <category term="Security" scheme="http://www.isee.wang/tags/Security/"/>
    
    <category term="Oauth2" scheme="http://www.isee.wang/tags/Oauth2/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security Oauth2 从零到一完整实践（一）</title>
    <link href="http://www.isee.wang/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.isee.wang/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-04-19T01:07:50.000Z</published>
    <updated>2023-06-05T01:22:42.496Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><div class="note info no-icon"><p>github 地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nkd3h3L3NwcmluZy1zZWN1cml0eS1vYXV0aDItZGVtbw==">spring-security-oauth2-demo<i class="fa fa-external-link-alt"></i></span></p><p>博客地址：<a href="/">isee.wang</a></p></div><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ol><li>较为详细的学习 oauth2 的四种模式其中的两种授权模式</li><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%AE%9E%E7%8E%B0/">spring boot oauth2 自动配置实现</a></li><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/">spring security oauth2 授权服务器配置</a></li><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%9B%9B%EF%BC%89%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/">spring security oauth2 资源服务器配置</a></li><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%94%EF%BC%89%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%88%E6%9D%83%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%89%8B%E6%9C%BA%E3%80%81%E9%82%AE%E7%AE%B1%E7%AD%89%EF%BC%89/">spring security oauth2 自定义授权模式（手机、邮箱等）</a></li><li><a href="/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%85%AD%EF%BC%89%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/">spring security oauth2 踩坑记录</a></li></ol><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>具备以下基础知识能够方便你更好的阅读本篇文章</p><ul><li>spring 基础</li><li>spring boot web 的使用与配置</li><li>spring security 的使用与配置</li><li>postman 的使用</li><li>idea、maven、lombok 的使用与配置</li></ul><h2 id="Oauth2"><a href="#Oauth2" class="headerlink" title="Oauth2"></a>Oauth2</h2><p>学习一项新的东西之前，我们要先了解一下他为我们解决了哪些事，能够带来什么样的便利，而在 IT 行业，了解一个东西最简单的方式就是去他的官网了解，所以我们先去官网了解一下这个协议：<span class="exturl" data-url="aHR0cHM6Ly9vYXV0aC5uZXQv">Oauth2<i class="fa fa-external-link-alt"></i></span></p><div class="note info"><p>An <code>open protocol</code> to allow <code>secure authorization</code> in a <code>simple</code> and <code>standard</code> method from web, mobile and desktop applications.</p></div><p>一个允许从Web、移动和桌面应用程序简单和标准方法进行安全授权的开放协议。</p><div class="note info"><p>The OAuth 2.0 authorization framework enables third-party applications to obtain <code>limited</code> access to a web service.</p></div><p>OAuth 2.0 授权框架使第三方应用程序能够获得对 Web 服务的有限访问权限。</p><p>从官网的解释就可以知道它可以完成如下两件事：</p><ol><li>对你的应用站点进行安全授权</li><li>使第三方应用程序能够获得对 Web 服务的有限访问权限</li></ol><p>我们这篇教程就是通过 spring security oauth2 来完成这么两件事。我们来详细了解一下这个协议，首先了解什么要使用 oauth2。我们以 web 为例来进行了解。</p><h2 id="传统应用"><a href="#传统应用" class="headerlink" title="传统应用"></a>传统应用</h2><p>在我们传统的 web 应用中，我们的前端页面和后端的逻辑都是一起部署的，大概流程如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/1.png" loading="lazy"></p><p>当我们发送一个请求的时候，直接先发给后端处理，后端处理完成后将数据发送给前端，然后前端渲染，再交给用户，所以有了模板引擎这个东西，例如 jsp、thymeleaf、freemarker 这些，都是这样的流程。而这些个东西最为重要的就是 session，你可以通过存储在 session 里面的东西对他进行授权&#x2F;认证等操作，大概如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/2.png" loading="lazy"></p><h2 id="现在的应用"><a href="#现在的应用" class="headerlink" title="现在的应用"></a>现在的应用</h2><p>那么现在我们的应用是什么样的呢？现在的前端已经不再是只有 html、css、javascript 了，也不再是 bootstrap 的天下，也没有 jquery 一出，万人空巷了。前端项目组建工程化，已经能够完整的独立成为一个工程化的项目了。所以我们现在前后端是完全分离的，<strong>前后端各司其职，前端完成前端的事，只做页面，后端完成后端的事，只做逻辑和数据库操作，完全两个独立的引用，通过接口进行交互，</strong>那么我们的大概流程如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/3.png" loading="lazy"></p><p>用户通过浏览器请求前端应用的页面，然后页面里面加载请求到数据，再渲染页面。那么现在的授权没有 session 了，前后端是完全独立的两个项目了，我们要怎么进行认证授权呢？对于一个受保护的应用来说，他的请求流程如下：</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/4.png" loading="lazy"></p><p>在这个流程中，我们后端应用其实变成了两个，一个是<code>授权服务器</code>，一个是<code>资源服务器</code>，<strong>当然你完全可以简单把他们两个同时写在一个之中。</strong>单独提出来的好处是什么呢？最主要的一点就是上面提到的 <strong>使第三方应用程序能够获得对 Web 服务的有限访问权限，简单的说就是能够更加方便的另外一个应用接入。当你写好一个授权服务器以后，其他应用就可以共用这个授权服务器，</strong>他们就作为资源服务器亦或是客户端即可。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>在这个协议中，我们需要明确一个 <code>角色</code> 的概念，在前面的和传统应用的对比中，我们提到了资源服务器和授权服务器，这就是其中两个角色，在 Oauth2 中，总共有四种角色：</p><table><thead><tr><th align="center">名称</th><th align="center">英文名</th><th align="center">描述</th><th align="center">web例子</th></tr></thead><tbody><tr><td align="center">资源所有者</td><td align="center">resource owner</td><td align="center">能够授予对受保护资源的访问权的实体。当资源所有者是一个人时，它就是用户。</td><td align="center">用户</td></tr><tr><td align="center">资源服务器</td><td align="center">resource server</td><td align="center">承载受保护资源的服务器，能够使用访问令牌接受和响应受保护资源请求。</td><td align="center">后端资源数据</td></tr><tr><td align="center">客户端</td><td align="center">client</td><td align="center">代表资源所有者及其授权发出受保护资源请求的应用程序。“客户端” 并不意味着任何特定的实现特征(例如，应用程序是否在服务器、桌面或其他设备上执行)。</td><td align="center">前端应用</td></tr><tr><td align="center">授权服务器</td><td align="center">authorization server</td><td align="center">在成功认证资源所有者并获得授权后，服务器向客户端发出访问令牌。</td><td align="center">后端授权</td></tr></tbody></table><p>而授权服务器可以是与资源服务器<strong>相同的服务器</strong>或<strong>单独的服务器</strong>。 单个授权服务器可以发出由<strong>多个资源服务器接受的访问令牌</strong>。</p><p>流程图大概如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------+                               +-----------------+</span><br><span class="line">|        |--（A）------- 授权请求 --------&gt;|                 |</span><br><span class="line">|        |                               | 资源所有者（用户） |</span><br><span class="line">|        |&lt;-（B）------- 授权许可 ---------|                 |</span><br><span class="line">|        |                               +-----------------+</span><br><span class="line">|        |</span><br><span class="line">|        |                               +-----------------+</span><br><span class="line">|        |--（C）------- 授权许可 --------&gt;|                 |</span><br><span class="line">| 客户端  |                               |  授权服务器（1    |</span><br><span class="line">|        |&lt;-（D）----- Access Token ----）|                 |</span><br><span class="line">|        |                               +-----------------+</span><br><span class="line">|        |</span><br><span class="line">|        |                               +-----------------+</span><br><span class="line">|        |（-（E）---- Access Token -----&gt;|                 |</span><br><span class="line">|        |                               |   资源服务器（2   |</span><br><span class="line">|        |&lt;-（F）---- 获取受保护的资源 -----|                 |</span><br><span class="line">+--------+                               +-----------------+</span><br></pre></td></tr></table></figure><p>图中所示的 抽象 OAuth 2.0 流程描述了四个角色之间的交互，包括以下步骤：</p><p>（A）客户机请求资源所有者（用户）的授权。授权请求可以直接发送给资源所有者(如图所示)，最好通过作为中介的授权服务器间接发送。<strong>简单地说，用户点击登录，会转到登录页面显示给用户。</strong></p><p>（B）客户端接收授权许可，这是表示资源所有者授权的凭据，使用 Oauth2 规范中定义的四种授权类型之一或使用扩展授权类型表示。授权授予类型取决于客户机用于请求授权的方法和授权服务器支持的类型。<strong>简单地说，选择 oauth2 中四种授权模式进行授权。</strong></p><p>（C）客户端通过向授权服务器进行认证并呈现授权授权来请求访问令牌。<strong>简单地说，客户端会向授权服务器使用前面选择的四种方式之一请求认证。</strong></p><p>（D）授权服务器对客户端进行身份验证并验证授权授予，如果有效，则发出访问令牌。<strong>简单地说，授权成功发放令牌。</strong></p><p>（E）客户端从资源服务器请求受保护的资源，并通过呈现访问令牌进行身份验证。<strong>简单地说，携带 令牌 请求资源服务器。</strong></p><p>（F）资源服务器验证访问令牌，如果有效，则为请求服务。<strong>简单地说，如果令牌有效，就允许访问资源。</strong></p><p>（1）授权服务器可以只有一台，一台授权可以发放多个资源服务器。</p><p>（2）资源服务器需要关联一台授权服务器作为资源的保护和认证。</p><p>最为重要的部分为 B 中的 <code>授权许可</code>，它是代表资源所有者的授权（访问其受保护的资源）的<code>凭据</code>，客户端使用该授权来获得访问令牌。该规范定义了四种授权类型——<strong>授权代码、隐式、资源所有者密码凭证和客户端凭证</strong>——以及用于定义其他类型的可扩展性机制（自定义授权）。</p><h2 id="四种授权模式"><a href="#四种授权模式" class="headerlink" title="四种授权模式"></a>四种授权模式</h2><p>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式如下：</p><ul><li>授权码模式（authorization code）</li><li>密码模式（resource owner password credentials）</li><li>简化模式（implicit）</li><li>客户端模式（client credentials）</li><li>扩展模式（extension）</li></ul><p>最为常用的为第一、二种，我们这篇文章也只会完成第一二种，四种具体请参考 <span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTQvMDUvb2F1dGhfMl8wLmh0bWw=">阮一峰 理解OAuth 2.0<i class="fa fa-external-link-alt"></i></span> ，请注意详细看文章的 <code>名词定义</code> 模块。阮一峰老师的文章已经写的很清楚了，但是我依旧还是需要指明一下我们即将开始的第一二种的 api 设计。</p><div class="note warning"><p>注意：以下 api 设计为 spring security 提供实现，并不是 oauth2 的标准 api 实现</p></div><p>不过在那之前，我们先来了解一下 <strong>客户端的加密</strong></p><h2 id="客户端加密"><a href="#客户端加密" class="headerlink" title="客户端加密"></a>客户端加密</h2><p>在 spring security oauth 中，推荐加密我们的客户端信息，客户端和授权服务器建立适合授权服务器安全要求的客户端认证方法。授权服务器可以接受满足其安全要求的任何形式的客户端身份验证。一般来说我们使用的是 <code>密码验证</code> 的方式加密我们的客户端信息。</p><p>推荐的方式是使用 HTTP Basic ，我们需要设置以下参数，当设置成功以后将客户端凭证加密存放在请求头中去请求授权信息，参数如下：</p><table><thead><tr><th align="center">参数名称</th><th align="center">是否必填</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">client_id</td><td align="center">REQUIRED</td><td align="center">客户端 id</td></tr><tr><td align="center">client_secret</td><td align="center">REQUIRED</td><td align="center">客户端密码，如果客户机secret是空字符串，则客户机可以省略该参数</td></tr></tbody></table><p>当我们请求的时候，需要设置相应的客户端认证信息，并存放在请求头中，设置方法如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authorization: Basic client_id：client_secret base64编码</span><br><span class="line">eg:</span><br><span class="line">client_id:web</span><br><span class="line">client_secret:secret</span><br><span class="line">加密“web:secret” 得到 “QmFzaWMgd2ViOnNlY3JldA==”</span><br><span class="line">授权请求头中需要携带如下键值对：</span><br><span class="line">Authorization: Basic QmFzaWMgd2ViOnNlY3JldA==</span><br></pre></td></tr></table></figure><p>这是保证客户端安全十分重要的一环，强烈推荐对客户端进行加密！</p><h3 id="授权码模式"><a href="#授权码模式" class="headerlink" title="授权码模式"></a>授权码模式</h3><p>他是一种流程最为严密，安全性最高的授权模式，主要为以下几个步骤：</p><div class="note warning"><p>注意：以下所有请求都必须在请求头中携带上一点中的客户端加密信息！</p></div><ol><li>用户进入应用，携带一个 <code>重定向应用地址</code> 到 <strong>授权服务器</strong> 进行登录，在登录成功并且用户同意授权以后，授权服务携带一个生成的 <strong>授权码</strong> 重定向到指定的 <code>重定向应用地址</code> 。</li><li>应用携带接收到的 <strong>授权码</strong> 再次去请求 <strong>授权服务器</strong>，在验证成功后，验证服务器下发 token。</li></ol><p>所以需要两个请求，在 spring security oauth2 中，api 如下，我们将这些 api 称为 <code>端点</code>：</p><h3 id="授权端点"><a href="#授权端点" class="headerlink" title="授权端点"></a>授权端点</h3><ul><li>&#x2F;oauth&#x2F;authorize：授权端点，通过此端点跳转到 <strong>授权服务器</strong> 进行认证，完成第一个请求。携带如下参数：</li></ul><table><thead><tr><th align="center">参数名称</th><th align="center">是否必填</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">response_type</td><td align="center">REQUIRED</td><td align="center">必须为 code</td></tr><tr><td align="center">client_id</td><td align="center">REQUIRED</td><td align="center">客户端的 id</td></tr><tr><td align="center">redirect_uri</td><td align="center">OPTIONAL</td><td align="center">获取授权码后重定向地址</td></tr><tr><td align="center">scope</td><td align="center">OPTIONAL</td><td align="center">申请的权限范围</td></tr><tr><td align="center">state</td><td align="center">RECOMMENDED</td><td align="center">客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值，推荐。</td></tr></tbody></table><p>授权成功的情况，会携带以下两个参数重定向到到 redirect_uri 中：</p><table><thead><tr><th align="center">参数名称</th><th align="center">是否必有</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">code</td><td align="center">REQUIRED</td><td align="center">授权服务器生成的授权代码。授权代码必须在发布后不久过期，以降低泄漏的风险。最大授权代码生命周期为10分钟</td></tr><tr><td align="center">state</td><td align="center">REQUIRED</td><td align="center">如果上一步中提供 state 参数，会原封不动地返回这个值。</td></tr></tbody></table><div class="note warning"><p>注意：官网中给出的解释 code 有 RECOMMENDED 推荐的情况，但是我没找到如何使用，所以没写。</p></div><p>授权失败的情况分为两种</p><ol><li>如果请求由于重定向URI丢失、无效或不匹配而失败，或者如果客户端标识符丢失或无效，授权服务器应通知资源所有者错误，并且<strong>不得自动将用户代理重定向到无效的重定向URI</strong>。</li><li>如果资源所有者拒绝访问请求，或者如果请求由于除了丢失或无效重定向URI以外的原因而失败，则授权服务器通过使用 application&#x2F;x-www-form-urlencoded 格式<strong>向重定向 URI 的查询组件添加以下参数来通知客户端</strong>，参数如下：(对于 spring ，目前没有遇到 error_uri 属性)</li></ol><table><thead><tr><th align="center">参数名称</th><th align="center">是否必有</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">error</td><td align="center">REQUIRED</td><td align="center">invalid_request</td><td align="center">请求缺少必需的参数，包括无效的参数值，不止一次地包含参数，或者存在其他形式的异常。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">unauthorized_client</td><td align="center">未授权客户端使用此方法请求授权代码。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">access_denied</td><td align="center">资源所有者或授权服务器拒绝了该请求。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">unsupported_response_type</td><td align="center">授权服务器不支持使用此方法获取授权代码。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">invalid_scope</td><td align="center">请求的作用域无效、未知或格式不正确。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">server_error</td><td align="center">授权服务器遇到意外情况，无法满足请求。(此错误代码是必需的，因为500内部服务器错误HTTP状态代码不能通过HTTP重定向返回给客户端。)</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">temporarily_unavailable</td><td align="center">由于服务器暂时过载或维护，授权服务器当前无法处理该请求。(此错误代码是必需的，因为503服务不可用的HTTP状态代码不能通过HTTP重定向返回给客户端。)</td></tr><tr><td align="center">error_description</td><td align="center">OPTIONAL</td><td align="center"></td><td align="center">提供附加信息的人类可读ASCII [USASCII]文本，用于帮助客户端开发人员理解所发生的错误。</td></tr><tr><td align="center">error_uri</td><td align="center">OPTIONAL</td><td align="center"></td><td align="center">一种带有错误信息的可读网页的URI标识，用于向客户端开发人员提供有关错误的附加信息。</td></tr></tbody></table><h3 id="令牌端点"><a href="#令牌端点" class="headerlink" title="令牌端点"></a>令牌端点</h3><ul><li>&#x2F;oauth&#x2F;token：令牌端点，通过上一步获取到的 <strong>授权码</strong> 验证与生成令牌，完成第二个请求，携带如下参数：</li></ul><table><thead><tr><th align="center">参数名称</th><th align="center">是否必填</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">grant_type</td><td align="center">REQUIRED</td><td align="center">使用的授权模式，值固定为&quot;authorization_code&quot;</td></tr><tr><td align="center">code</td><td align="center">REQUIRED</td><td align="center">上一步获得的授权码</td></tr><tr><td align="center">redirect_uri</td><td align="center">REQUIRED</td><td align="center">重定向URI，必须与上一步中的该参数值保持一致</td></tr><tr><td align="center">client_id</td><td align="center">REQUIRED</td><td align="center">客户端的 id</td></tr><tr><td align="center">scope</td><td align="center">RECOMMENDED</td><td align="center">授权范围，必须与第一步相同</td></tr></tbody></table><p>如果访问令牌请求有效且经过授权，授权服务器将发出访问令牌和可选的刷新令牌，可以得到如下响应参数：</p><table><thead><tr><th align="center">参数名称</th><th align="center">是否必有</th><th align="center">描述</th><th align="center">是否有实现</th></tr></thead><tbody><tr><td align="center">access_token</td><td align="center">REQUIRED</td><td align="center">授权服务器颁发的访问令牌</td><td align="center">是</td></tr><tr><td align="center">token_type</td><td align="center">REQUIRED</td><td align="center">令牌类型，该值大小写不敏感，可以是bearer类型或mac类型</td><td align="center">是</td></tr><tr><td align="center">expires_in</td><td align="center">RECOMMENDED</td><td align="center">过期时间，单位为秒</td><td align="center">是</td></tr><tr><td align="center">refresh_token</td><td align="center">OPTIONAL</td><td align="center">表示更新令牌，用来获取下一次的访问令牌</td><td align="center">是，需要设置</td></tr><tr><td align="center">scope</td><td align="center">OPTIONAL</td><td align="center">权限范围，如果有，则与客户端申请的范围一致</td><td align="center">是</td></tr></tbody></table><p>如果请求客户端身份验证失败或无效，授权服务器将返回错误响应，授权服务器使用HTTP 400（错误请求）状态代码进行响应（除非另有说明），并在响应中包含以下参数：</p><table><thead><tr><th align="center">参数名称</th><th align="center">是否必有</th><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">error</td><td align="center">REQUIRED</td><td align="center">invalid_request</td><td align="center">请求缺少必需的参数，包含不受支持的参数值(授权类型除外)，重复参数，包含多个凭据，使用多个机制来验证客户端，或者格式不正确。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">invalid_client</td><td align="center">客户端身份验证失败(例如，未知客户端、不包含客户端身份验证或不支持的身份验证方法)。授权服务器可以返回一个超文本传输协议401(未授权)状态码，以指示支持哪些超文本传输协议认证方案。如果客户端试图通过“授权”请求头字段进行身份验证，授权服务器必须用一个HTTP 401(未授权)状态代码进行响应，并包括与客户端使用的身份验证方案相匹配的“WWW-Authenticate”响应头字段。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">invalid_grant</td><td align="center">所提供的授权授予(例如，授权代码、资源所有者凭证)或刷新令牌无效、过期、已撤销、不匹配授权请求中使用的重定向URI，或已向其他客户机发出。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">unauthorized_client</td><td align="center">经过身份验证的客户端无权使用此授权授权类型。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">unsupported_grant_type</td><td align="center">授权服务器不支持授权授权类型。</td></tr><tr><td align="center"></td><td align="center"></td><td align="center">invalid_scope</td><td align="center">请求的范围无效、未知、格式错误或超出了资源所有者授予的范围。</td></tr><tr><td align="center">error_description</td><td align="center">OPTIONAL</td><td align="center">-</td><td align="center">提供附加信息的人类可读ASCII [USASCII]文本，用于帮助客户端开发人员理解所发生的错误。</td></tr><tr><td align="center">error_uri</td><td align="center">OPTIONAL</td><td align="center">-</td><td align="center">一种带有错误信息的可读网页的URI标识，用于向客户端开发人员提供有关错误的附加信息。</td></tr></tbody></table><h2 id="密码模式"><a href="#密码模式" class="headerlink" title="密码模式"></a>密码模式</h2><p>这种模式可以理解成我们普通应用的用户名密码登录，在第三方接入的时候不建议使用这种模式，但是如果是自己的应用，那么这种模式是最为简单方便快捷的了。步骤只有一个：</p><div class="note warning"><p>注意：以下所有请求都必须在请求头中携带上面所说的客户端加密信息！</p></div><ul><li>用户携带用户名密码请求授权服务器，验证通过后下发令牌</li></ul><p>他只需要一个请求，所以她只有一个令牌端点：</p><h3 id="令牌端点-1"><a href="#令牌端点-1" class="headerlink" title="令牌端点"></a>令牌端点</h3><ul><li>&#x2F;oauth&#x2F;token：令牌端点，携带如下参数请求即可：</li></ul><table><thead><tr><th align="center">请求参数</th><th align="center">是否必填</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">grant_type</td><td align="center">REQUIRED</td><td align="center">使用的密码模式，值固定为&quot;password&quot;</td></tr><tr><td align="center">username</td><td align="center">REQUIRED</td><td align="center">用户名</td></tr><tr><td align="center">password</td><td align="center">REQUIRED</td><td align="center">密码</td></tr><tr><td align="center">scope</td><td align="center">OPTIONAL</td><td align="center">请求权限范围</td></tr></tbody></table><p>请求成功和失败的响应同授权码模式。</p><h2 id="安全考虑"><a href="#安全考虑" class="headerlink" title="安全考虑"></a>安全考虑</h2><div class="note warning"><p>注意：以下所有请求都必须在请求头中携带上面所说的客户端加密信息！</p></div><p>作为一个灵活且可扩展的框架，OAuth 的安全考虑取决于许多因素。spring security oauth 为我们提供了一些默认的端点如下：</p><ul><li>&#x2F;oauth&#x2F;authorize：授权端点</li><li>&#x2F;oauth&#x2F;token：令牌端点</li><li>&#x2F;oauth&#x2F;token：令牌端点也同时拥有刷新用户的功能，请求参数如下：</li></ul><table><thead><tr><th align="center">参数名称</th><th align="center">是否必填</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">grant_type</td><td align="center">REQUIRED</td><td align="center">固定值为“refresh_token”</td></tr><tr><td align="center">refresh_token</td><td align="center">REQUIRED</td><td align="center">请求到 token 时传过来的 refresh_token</td></tr></tbody></table><ul><li>&#x2F;oauth&#x2F;confirm_access：用户确认授权提交端点</li><li>&#x2F;oauth&#x2F;error：授权服务错误信息端点</li><li>&#x2F;oauth&#x2F;check_token：用于资源服务访问的令牌解析端点，请求参数如下：</li></ul><table><thead><tr><th align="center">参数名称</th><th align="center">是否必填</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">token</td><td align="center">REQUIRED</td><td align="center">得到的有效的令牌</td></tr></tbody></table><ul><li>&#x2F;oauth&#x2F;token_key：提供公有密匙的端点，如果你使用JWT令牌的话</li></ul><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>核心框架：spring boot</li><li>构建工具：maven</li><li>应用框架：spring boot data jpa</li><li>数据库：mysql</li><li>web： spring boot web</li><li>测试框架：junit5、spring boot test</li><li>开发工具：idea</li><li>安全框架：spring security oauth2</li></ul><h2 id="在这之前"><a href="#在这之前" class="headerlink" title="在这之前"></a>在这之前</h2><p>我们需要对项目的基本初始化，也就是使用 idea 创建我们 spring boot 项目</p><p><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/5.png" loading="lazy"><br><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/6.png" loading="lazy"><br><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/7.png" loading="lazy"><br><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/8.png" loading="lazy"><br><img src="/images/Spring-Security-Oauth2-%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89/9.png" loading="lazy"></p><p>可选，配置阿里云国内源仓库</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--远程依赖库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阿里云主仓库，代理了maven central和jcenter仓库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阿里云代理Spring 官方仓库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--远程插件库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--阿里云代理Spring 插件仓库--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-plugin<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-plugin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring-plugin<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note warning"><p>注意：请自行配置 lombok 支持！！！</p></div><p>这样，我们的父项目基本就构建完成了</p><p>我们下一篇回来完成第二件事，spring security oauth2 自动配置实现。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.isee.wang/categories/java/"/>
    
    
    <category term="Spring" scheme="http://www.isee.wang/tags/Spring/"/>
    
    <category term="Security" scheme="http://www.isee.wang/tags/Security/"/>
    
    <category term="Oauth2" scheme="http://www.isee.wang/tags/Oauth2/"/>
    
  </entry>
  
  <entry>
    <title>hexo相关</title>
    <link href="http://www.isee.wang/hexo%E7%9B%B8%E5%85%B3/"/>
    <id>http://www.isee.wang/hexo%E7%9B%B8%E5%85%B3/</id>
    <published>2021-02-18T06:45:01.000Z</published>
    <updated>2023-06-05T01:22:42.496Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><h1 id="1-Math"><a href="#1-Math" class="headerlink" title="1 Math"></a>1 Math</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85YjljMjQxMTQ2YmM=">Hexo渲染LaTeX公式<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20vdGhpcmQtcGFydHktc2VydmljZXMuaHRtbCNtYXRoamF4">MathJax-配置<i class="fa fa-external-link-alt"></i></span></p><p>__禁止markdown对<code>-</code>、<code>\\</code>、<code>\&#123;</code>、<code>\&#125;</code>等进行转义__：修改配置文件<code>node_modules/marked/lib/marked.js</code></p><p>将</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">escape: /^\\([\\`*&#123;&#125;\[\]()# +\-.!_&gt;])/,</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">escape: /^\\([`*\[\]()# +\-.!_&gt;])/,</span><br></pre></td></tr></table></figure><p>将</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure><h1 id="2-来必力评论系统"><a href="#2-来必力评论系统" class="headerlink" title="2 来必力评论系统"></a>2 来必力评论系统</h1><p><span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20vdGhpcmQtcGFydHktc2VydmljZXMuaHRtbCNsaXZlcmU=">来必力-配置<i class="fa fa-external-link-alt"></i></span></p><h1 id="3-mermaid流程图"><a href="#3-mermaid流程图" class="headerlink" title="3 mermaid流程图"></a>3 mermaid流程图</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYmFwcGRldmVscC9oZXhvLWZpbHRlci1tZXJtYWlkLWRpYWdyYW1z">hexo-filter-mermaid-diagrams<i class="fa fa-external-link-alt"></i></span></p><p><strong>步骤1：安装插件</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams --save</span><br></pre></td></tr></table></figure><p><strong>步骤2：修改主题配置文件<code>themes/next/_config.yml</code>，找到<code>mermaid</code>的配置项，将<code>enable</code>改为true即可</strong></p><h2 id="3-1-效果：横向流程图"><a href="#3-1-效果：横向流程图" class="headerlink" title="3.1 效果：横向流程图"></a>3.1 效果：横向流程图</h2><p><strong>源码：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure><p><strong>渲染后：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure><h2 id="3-2-效果：竖向流程图"><a href="#3-2-效果：竖向流程图" class="headerlink" title="3.2 效果：竖向流程图"></a>3.2 效果：竖向流程图</h2><p><strong>源码：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a=1| D[结果1]</span><br><span class="line">    C --&gt; |a=2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure><p><strong>渲染后：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a=1| D[结果1]</span><br><span class="line">    C --&gt; |a=2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure><h1 id="4-plantuml时序图"><a href="#4-plantuml时序图" class="headerlink" title="4 plantuml时序图"></a>4 plantuml时序图</h1><p><strong>步骤1：安装插件</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-plantuml --save</span><br></pre></td></tr></table></figure><h2 id="4-1-效果"><a href="#4-1-效果" class="headerlink" title="4.1 效果"></a>4.1 效果</h2><p><strong>源码：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">skinparam backgroundColor #EEEBDC</span><br><span class="line">skinparam handwritten true</span><br><span class="line"></span><br><span class="line">skinparam sequence &#123;</span><br><span class="line">ArrowColor DeepSkyBlue</span><br><span class="line">ActorBorderColor DeepSkyBlue</span><br><span class="line">LifeLineBorderColor blue</span><br><span class="line">LifeLineBackgroundColor #A9DCDF</span><br><span class="line"></span><br><span class="line">ParticipantBorderColor DeepSkyBlue</span><br><span class="line">ParticipantBackgroundColor DodgerBlue</span><br><span class="line">ParticipantFontName Impact</span><br><span class="line">ParticipantFontSize 17</span><br><span class="line">ParticipantFontColor #A9DCDF</span><br><span class="line"></span><br><span class="line">ActorBackgroundColor aqua</span><br><span class="line">ActorFontColor DeepSkyBlue</span><br><span class="line">ActorFontSize 17</span><br><span class="line">ActorFontName Aapex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">actor User</span><br><span class="line">box &quot;foo1&quot;</span><br><span class="line">participant &quot;First Class&quot; as A</span><br><span class="line">end box</span><br><span class="line">box &quot;foo2&quot;</span><br><span class="line">participant &quot;Second Class&quot; as B</span><br><span class="line">end box</span><br><span class="line">box &quot;foo3&quot;</span><br><span class="line">participant &quot;Last Class&quot; as C</span><br><span class="line">end box</span><br><span class="line"></span><br><span class="line">User -&gt; A: DoWork</span><br><span class="line">activate A</span><br><span class="line"></span><br><span class="line">A -&gt; B: Create Request</span><br><span class="line">activate B</span><br><span class="line"></span><br><span class="line">B -&gt; C: DoWork</span><br><span class="line">activate C</span><br><span class="line">C --&gt; B: WorkDone</span><br><span class="line">destroy C</span><br><span class="line"></span><br><span class="line">B --&gt; A: Request Created</span><br><span class="line">deactivate B</span><br><span class="line"></span><br><span class="line">A --&gt; User: Done</span><br><span class="line">deactivate A</span><br></pre></td></tr></table></figure><p><strong>渲染后：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">skinparam backgroundColor #EEEBDC</span><br><span class="line">skinparam handwritten true</span><br><span class="line"></span><br><span class="line">skinparam sequence &#123;</span><br><span class="line">ArrowColor DeepSkyBlue</span><br><span class="line">ActorBorderColor DeepSkyBlue</span><br><span class="line">LifeLineBorderColor blue</span><br><span class="line">LifeLineBackgroundColor #A9DCDF</span><br><span class="line"></span><br><span class="line">ParticipantBorderColor DeepSkyBlue</span><br><span class="line">ParticipantBackgroundColor DodgerBlue</span><br><span class="line">ParticipantFontName Impact</span><br><span class="line">ParticipantFontSize 17</span><br><span class="line">ParticipantFontColor #A9DCDF</span><br><span class="line"></span><br><span class="line">ActorBackgroundColor aqua</span><br><span class="line">ActorFontColor DeepSkyBlue</span><br><span class="line">ActorFontSize 17</span><br><span class="line">ActorFontName Aapex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">actor User</span><br><span class="line">box &quot;foo1&quot;</span><br><span class="line">participant &quot;First Class&quot; as A</span><br><span class="line">end box</span><br><span class="line">box &quot;foo2&quot;</span><br><span class="line">participant &quot;Second Class&quot; as B</span><br><span class="line">end box</span><br><span class="line">box &quot;foo3&quot;</span><br><span class="line">participant &quot;Last Class&quot; as C</span><br><span class="line">end box</span><br><span class="line"></span><br><span class="line">User -&gt; A: DoWork</span><br><span class="line">activate A</span><br><span class="line"></span><br><span class="line">A -&gt; B: Create Request</span><br><span class="line">activate B</span><br><span class="line"></span><br><span class="line">B -&gt; C: DoWork</span><br><span class="line">activate C</span><br><span class="line">C --&gt; B: WorkDone</span><br><span class="line">destroy C</span><br><span class="line"></span><br><span class="line">B --&gt; A: Request Created</span><br><span class="line">deactivate B</span><br><span class="line"></span><br><span class="line">A --&gt; User: Done</span><br><span class="line">deactivate A</span><br></pre></td></tr></table></figure><h1 id="5-flow流程图"><a href="#5-flow流程图" class="headerlink" title="5 flow流程图"></a>5 flow流程图</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2J1Ymtvby9oZXhvLWZpbHRlci1mbG93Y2hhcnQ=">hexo-filter-flowchart<i class="fa fa-external-link-alt"></i></span></p><p><strong>步骤1：安装插件</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-flowchart --save </span><br></pre></td></tr></table></figure><h2 id="5-1-效果：纵向流程图"><a href="#5-1-效果：纵向流程图" class="headerlink" title="5.1 效果：纵向流程图"></a>5.1 效果：纵向流程图</h2><p><strong>源码：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><p><strong>渲染后：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><h2 id="5-2-效果：横向流程图"><a href="#5-2-效果：横向流程图" class="headerlink" title="5.2 效果：横向流程图"></a>5.2 效果：横向流程图</h2><p><strong>源码：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><p><strong>渲染后：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><h1 id="6-sequence时序图"><a href="#6-sequence时序图" class="headerlink" title="6 sequence时序图"></a>6 sequence时序图</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2J1Ymtvby9oZXhvLWZpbHRlci1zZXF1ZW5jZQ==">hexo-filter-sequence<i class="fa fa-external-link-alt"></i></span></p><h1 id="7-目录功能"><a href="#7-目录功能" class="headerlink" title="7 目录功能"></a>7 目录功能</h1><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2J1Ymtvby9oZXhvLXRvYw==">hexo-toc<i class="fa fa-external-link-alt"></i></span></p><h1 id="8-访问统计"><a href="#8-访问统计" class="headerlink" title="8 访问统计"></a>8 访问统计</h1><p><span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20vdGhpcmQtcGFydHktc2VydmljZXMuaHRtbCNhbmFseXRpY3MtdGVuY2VudC1tdGE=">阅读次数统计-配置<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZnJlZXNpb24uY29tL2FydGljbGUvNjM5OTQyODgzNS8=">解决使用LEANCLOUD配置NEXT主题文章浏览量显示不正常的问题<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnF1c3QuY2MvYXJjaGl2ZXMvNDg2NjUuaHRtbA==">Hexo Next主题 使用LeanCloud统计文章阅读次数、添加热度排行页面<i class="fa fa-external-link-alt"></i></span></p><p>编辑<code>主题</code>配置文件</p><ol><li>关闭<code>leancloud_visitors</code>配置<ul><li><code>enable</code>置为false</li></ul></li><li>打开<code>valine</code>配置<ul><li><code>enable</code>设置为true</li><li>配置<code>appid</code>以及<code>appkey</code></li><li><code>visitor</code>设置为true</li></ul></li></ol><p>编辑<code>站点</code>配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">leancloud_counter_security_sync</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">leancloud_counter_security:</span></span><br><span class="line">  <span class="attr">enable_sync:</span> <span class="literal">true</span> <span class="comment"># 先关了，开启有问题，总是报`Too many requests. [429 GET https://qhehlume.api.lncld.net/1.1/classes/Counter]`</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="attr">server_url:</span> <span class="string">https://leancloud.cn</span> <span class="comment"># 内地region需要配置这个</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">&#x27;liuyehcf&#x27;</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&#x27;19930101&#x27;</span> <span class="comment"># 究极大坑，这里需要用引号</span></span><br></pre></td></tr></table></figure><h1 id="9-本地搜索"><a href="#9-本地搜索" class="headerlink" title="9 本地搜索"></a>9 本地搜索</h1><p><span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20vdGhpcmQtcGFydHktc2VydmljZXMuaHRtbCNsb2NhbC1zZWFyY2g=">本地搜索-配置<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudjJleC5jb20vYW1wL3QvMjk4NzI3">搜索失效<i class="fa fa-external-link-alt"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzYxNjM4ODU5">Mac 上的 VSCode 编写 Markdown 总是出现隐藏字符？<i class="fa fa-external-link-alt"></i></span></p><h1 id="10-背景动画"><a href="#10-背景动画" class="headerlink" title="10 背景动画"></a>10 背景动画</h1><p><span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20vdGhlbWUtc2V0dGluZ3MuaHRtbCN1c2UtYmctYW5pbWF0aW9u">背景动画-配置<i class="fa fa-external-link-alt"></i></span></p><h1 id="11-增加菜单"><a href="#11-增加菜单" class="headerlink" title="11 增加菜单"></a>11 增加菜单</h1><p><code>hexo new page &quot;explore&quot;</code></p><p>修改主题配置文件<code>/themes/next/_config.yml</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  explore: /explore/ || sitemap # 添加这个</span><br></pre></td></tr></table></figure><p>修改国际化配置文件<code>/themes/next/languages/_en.yml</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: Home</span><br><span class="line">  archives: Archives</span><br><span class="line">  categories: Categories</span><br><span class="line">  tags: Tags</span><br><span class="line">  about: About</span><br><span class="line">  explore: Explore  # 添加这个</span><br><span class="line">  search: Search</span><br><span class="line">  schedule: Schedule</span><br><span class="line">  sitemap: Sitemap</span><br><span class="line">  commonweal: Commonweal 404</span><br></pre></td></tr></table></figure><p>修改国际化配置文件<code>/themes/next/languages/zh-CN.yml</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  explore: 发现  # 添加这个</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonweal: 公益404</span><br></pre></td></tr></table></figure><h1 id="12-hexo相关的项目"><a href="#12-hexo相关的项目" class="headerlink" title="12 hexo相关的项目"></a>12 hexo相关的项目</h1><table><thead><tr><th align="left">项目</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xpdHRlbi9oZXhvLXRoZW1lLXlpbGlh">theme-yilia<i class="fa fa-external-link-alt"></i></span></td><td align="left">hexo主题</td></tr><tr><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0">theme-next<i class="fa fa-external-link-alt"></i></span></td><td align="left">hexo主题</td></tr><tr><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2J1Ymtvby9oZXhvLWZpbHRlci1zZXF1ZW5jZQ==">hexo-filter-sequence<i class="fa fa-external-link-alt"></i></span></td><td align="left">hexo插件-序列图</td></tr><tr><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dlYmFwcGRldmVscC9oZXhvLWZpbHRlci1tZXJtYWlkLWRpYWdyYW1z">hexo-filter-mermaid-diagrams<i class="fa fa-external-link-alt"></i></span></td><td align="left">hexo插件-序列图</td></tr><tr><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhZmVyLWxpL2hleG8tZmlsdGVyLXBsYW50dW1s">hexo-filter-plantuml<i class="fa fa-external-link-alt"></i></span></td><td align="left">hexo插件-高级时序图</td></tr><tr><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2J1Ymtvby9oZXhvLWZpbHRlci1mbG93Y2hhcnQ=">hexo-filter-flowchart<i class="fa fa-external-link-alt"></i></span></td><td align="left">hexo插件-流程图</td></tr><tr><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2J1Ymtvby9oZXhvLXRvYw==">hexo-toc<i class="fa fa-external-link-alt"></i></span></td><td align="left">hexo插件-目录</td></tr><tr><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dpbGxpbi9oZXhvLXdvcmRjb3VudA==">hexo-wordcount<i class="fa fa-external-link-alt"></i></span></td><td align="left">hexo插件-字数统计</td></tr><tr><td align="left"><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by1zeW1ib2xzLWNvdW50LXRpbWU=">hexo-symbols-count-time<i class="fa fa-external-link-alt"></i></span></td><td align="left">阅读时间统计</td></tr></tbody></table><h1 id="13-取消侧栏编号"><a href="#13-取消侧栏编号" class="headerlink" title="13 取消侧栏编号"></a>13 取消侧栏编号</h1><p>主题配置文件修改如下配置，将number改为false即可</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">toc:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  number: <span class="literal">false</span> </span><br><span class="line"></span><br><span class="line">  <span class="comment"># If true, all words will placed on next lines if header width longer then sidebar width.</span></span><br><span class="line">  wrap: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="14-修改行内代码样式"><a href="#14-修改行内代码样式" class="headerlink" title="14 修改行内代码样式"></a>14 修改行内代码样式</h1><p><del>修改方式1（这个方式在最新的next版本中好像失效了）：在<code>themes/next/source/css/_custom/custom.styl</code>中增加如下代码</del></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#C33258</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#F9F2F4</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改方式2：在<code>themes/next/source/css/_common/scaffolding/highlight/highlight.styl</code>中修改<code>code</code>的样式定义</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#C33258</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#F9F2F4</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="15-修改链接样式"><a href="#15-修改链接样式" class="headerlink" title="15 修改链接样式"></a>15 修改链接样式</h1><p>链接即如下的语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link &lt;文章名&gt; %&#125;</span><br><span class="line">[description](url)</span><br></pre></td></tr></table></figure><p>修改方式：在<code>themes\next\source\css\_common\components\post\post.styl</code>中增加如下代码</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 文章链接文本样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fc6423</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: none;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="16-deploy"><a href="#16-deploy" class="headerlink" title="16 deploy"></a>16 deploy</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTM1NjExL2FydGljbGUvZGV0YWlscy8xMDYzMDkzMzU=">nodejs更新后hexo没法deploy<i class="fa fa-external-link-alt"></i></span></p><h1 id="17-参考"><a href="#17-参考" class="headerlink" title="17 参考"></a>17 参考</h1><ul><li><span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20vZ2V0dGluZy1zdGFydGVkLmh0bWw=">next官方文档<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZW1wdHlzZXQxMTAvYXJ0aWNsZS9kZXRhaWxzLzUwMTIzMjMx">搭建一个支持LaTEX的hexo博客<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzZjMTE5NmYxMjMwMg==">用 Hexo 搭建个人博客-02：进阶试验<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hMjMzMDkzN2RlNmM=">Hexo文章简单加密访问<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwOTU0NDkyNA==">hexo的next主题个性化配置教程<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9mb250YXdlc29tZS5jb20vaWNvbnM/ZD1nYWxsZXJ5">icon库<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9sZWFmZXJ4Lm9ubGluZS8yMDE4LzAyLzExL2xjLXNlY3VyaXR5Lw==">Leancloud访客统计插件重大安全漏洞修复指南<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3NoZW56ZWt1bi5jbi9oZXhvJUU3JTlBJTg0bmV4dCVFNCVCOCVCQiVFOSVBMiU5OCVFNCVCOCVBQSVFNiU4MCVBNyVFNSU4QyU5NiVFOSU4NSU4RCVFNyVCRCVBRSVFNiU5NSU5OSVFNyVBOCU4Qi5odG1s">hexo的next主题个性化教程:打造炫酷网站<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhZmVyLWxpL2hleG8tZmlsdGVyLXBsYW50dW1s">hexo-filter-plantuml<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cDovL3BsYW50dW1sLmNvbS9zZXF1ZW5jZS1kaWFncmFt">时序图<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly90eWxvYWZlci5naXRodWIuaW8vcG9zdHMvNzc5MC8=">Hexo中引入Mermaid流程图<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="http://www.isee.wang/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://www.isee.wang/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化 - RDB和AOF</title>
    <link href="http://www.isee.wang/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/"/>
    <id>http://www.isee.wang/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/</id>
    <published>2021-02-08T09:02:01.000Z</published>
    <updated>2023-06-05T01:22:42.495Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><h2 id="持久化的作用"><a href="#持久化的作用" class="headerlink" title="持久化的作用"></a>持久化的作用</h2><h3 id="什么是持久化"><a href="#什么是持久化" class="headerlink" title="什么是持久化"></a>什么是持久化</h3><p>持久化（Persistence），即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。<br>持久化 Redis 所有数据保持在内存中，对数据的更新将异步地保存到磁盘上。</p><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/1.jpg" alt="Redis持久化" loading="lazy"></p><h3 id="持久化的实现方式"><a href="#持久化的实现方式" class="headerlink" title="持久化的实现方式"></a>持久化的实现方式</h3><h4 id="快照方式持久化"><a href="#快照方式持久化" class="headerlink" title="快照方式持久化"></a>快照方式持久化</h4><p>快照方式持久化就是在某时刻把所有数据进行完整备份。<br>例：Mysql 的 Dump 方式、Redis 的 RDB 方式。</p><h4 id="写日志方式持久化"><a href="#写日志方式持久化" class="headerlink" title="写日志方式持久化"></a>写日志方式持久化</h4><p>写日志方式持久化就是把用户执行的所有写指令（增删改）备份到文件中，还原数据时只需要把备份的所有指令重新执行一遍即可。<br>例：Mysql 的 Binlog、Redis 的 AOF、Hbase 的 HLog。</p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><h3 id="什么是-RDB"><a href="#什么是-RDB" class="headerlink" title="什么是 RDB"></a>什么是 RDB</h3><h4 id="RDB-简介"><a href="#RDB-简介" class="headerlink" title="RDB 简介"></a>RDB 简介</h4><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/2.jpg" alt="RDB持久化" loading="lazy"></p><p>RDB 持久化方式能够在指定的时间间隔对你的数据进行快照存储。<br>在默认情况下， Redis 将数据库快照保存在名字为 <code>dump.rdb</code> 的二进制文件中。<br>在 Redis 运行时， RDB 程序将当前内存中的数据库快照保存到磁盘文件中， 在 Redis 重启动时， RDB 程序可以通过载入 RDB 文件来还原数据库的状态。</p><h4 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h4><p>当 Redis 需要保存 <code>dump.rdb</code> 文件时， 服务器执行以下操作:</p><ol><li>Redis 调用 <code>forks</code>。同时拥有父进程和子进程。</li><li>子进程将数据集写入到一个临时 RDB 文件中。</li><li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</li></ol><p>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益。</p><h3 id="RDB-的三种主要触发机制"><a href="#RDB-的三种主要触发机制" class="headerlink" title="RDB 的三种主要触发机制"></a>RDB 的三种主要触发机制</h3><h4 id="save-命令（同步数据到磁盘上）"><a href="#save-命令（同步数据到磁盘上）" class="headerlink" title="save 命令（同步数据到磁盘上）"></a><code>save</code> 命令（同步数据到磁盘上）</h4><p><code>save</code> 命令执行一个同步操作，以 RDB 文件的方式保存所有数据的快照。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/3.jpg" alt="save命令" loading="lazy"></p><p>由于 <code>save</code> 命令是同步命令，会占用 Redis 的主进程。若 Redis 数据非常多时，<code>save</code> 命令执行速度会非常慢，阻塞所有客户端的请求。<br>因此很少在生产环境直接使用 <code>SAVE</code> 命令，可以使用 <code>BGSAVE</code> 命令代替。如果在 <code>BGSAVE</code> 命令的保存数据的子进程发生错误的时，用 <code>SAVE</code> 命令保存最新的数据是最后的手段。</p><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/4.jpg" alt="save命令阻塞所有客户端的请求" loading="lazy"></p><h4 id="bgsave-命令（异步保存数据到磁盘上）"><a href="#bgsave-命令（异步保存数据到磁盘上）" class="headerlink" title="bgsave 命令（异步保存数据到磁盘上）"></a><code>bgsave</code> 命令（异步保存数据到磁盘上）</h4><p><code>bgsave</code> 命令执行一个异步操作，以 RDB 文件的方式保存所有数据的快照。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; bgsave</span><br><span class="line">Background saving started</span><br></pre></td></tr></table></figure><p>Redis 使用 Linux 系统的 <code>fock()</code> 生成一个子进程来将 DB 数据保存到磁盘，主进程继续提供服务以供客户端调用。<br>如果操作成功，可以通过客户端命令 <code>LASTSAVE</code> 来检查操作结果。</p><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/5.jpg" alt="bgsave命令" loading="lazy"></p><h4 id="save-与-bgsave-对比"><a href="#save-与-bgsave-对比" class="headerlink" title="save 与 bgsave 对比"></a><code>save</code> 与 <code>bgsave</code> 对比</h4><table><thead><tr><th align="center">命令</th><th align="center">save</th><th align="center">bgsave</th></tr></thead><tbody><tr><td align="center">IO类型</td><td align="center">同步</td><td align="center">异步</td></tr><tr><td align="center">阻塞？</td><td align="center">是</td><td align="center">是（阻塞发生在fock()，通常非常快）</td></tr><tr><td align="center">复杂度</td><td align="center">O(n)</td><td align="center">O(n)</td></tr><tr><td align="center">优点</td><td align="center">不会消耗额外的内存</td><td align="center">不阻塞客户端命令</td></tr><tr><td align="center">缺点</td><td align="center">阻塞客户端命令</td><td align="center">需要fock子进程，消耗内存</td></tr></tbody></table><h4 id="自动生成-RDB"><a href="#自动生成-RDB" class="headerlink" title="自动生成 RDB"></a>自动生成 RDB</h4><p>除了手动执行 <code>save</code> 和 <code>bgsave</code> 命令实现RDB持久化以外，Redis 还提供了自动生成RDB的方式。<br>你可以通过配置文件对 Redis 进行设置， 让它在 <code>N 秒内数据集至少有 M 个改动</code> 这一条件被满足时， 自动进行数据集保存操作。<br>比如说， 以下设置会让 Redis 在满足 <code>60 秒内有至少有 1000 个键被改动</code> 这一条件时， 自动进行数据集保存操作:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">save 60 1000</span><br></pre></td></tr></table></figure><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/6.jpg" alt="自动生成RDB" loading="lazy"></p><h3 id="RDB-相关配置"><a href="#RDB-相关配置" class="headerlink" title="RDB 相关配置"></a>RDB 相关配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RDB自动持久化规则</span></span><br><span class="line"><span class="comment"># 当 900 秒内有至少有 1 个键被改动时，自动进行数据集保存操作</span></span><br><span class="line">save 900 1</span><br><span class="line"><span class="comment"># 当 300 秒内有至少有 10 个键被改动时，自动进行数据集保存操作</span></span><br><span class="line">save 300 10</span><br><span class="line"><span class="comment"># 当 60 秒内有至少有 10000 个键被改动时，自动进行数据集保存操作</span></span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line"><span class="comment"># RDB持久化文件名</span></span><br><span class="line">dbfilename dump-&lt;port&gt;.rdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据持久化文件存储目录</span></span><br><span class="line"><span class="built_in">dir</span> /var/lib/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># bgsave发生错误时是否停止写入，通常为yes</span></span><br><span class="line">stop-writes-on-bgsave-error <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rdb文件是否使用压缩格式</span></span><br><span class="line">rdbcompression <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否对rdb文件进行校验和检验，通常为yes</span></span><br><span class="line">rdbchecksum <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><h3 id="RDB-的优点"><a href="#RDB-的优点" class="headerlink" title="RDB 的优点"></a>RDB 的优点</h3><ol><li>RDB 是一个非常紧凑的文件，它保存了某个时间点的数据集，非常适用于数据集的备份，比如你可以在每个小时报保存一下过去 24 小时内的数据，同时每天保存过去 30 天的数据，这样即使出了问题你也可以根据需求恢复到不同版本的数据集。</li><li>RDB 是一个紧凑的单一文件，很方便传送到另一个远端数据中心或者亚马逊的 S3（可能加密），非常适用于灾难恢复。</li><li>RDB 在保存 RDB 文件时父进程唯一需要做的就是 <code>fork</code> 出一个子进程，接下来的工作全部由子进程来做，父进程不需要再做其它 IO 操作，所以 RDB 持久化方式可以最大化 redis 的性能。</li><li>与 AOF 相比，在恢复大的数据集的时候，RDB 方式会更快一些。</li></ol><h3 id="RDB-的缺点"><a href="#RDB-的缺点" class="headerlink" title="RDB 的缺点"></a>RDB 的缺点</h3><ol><li>耗时、耗性能。RDB 需要经常 <code>fork</code> 子进程来保存数据集到硬盘上，当数据集比较大的时候，<code>fork</code> 的过程是非常耗时的，可能会导致 Redis 在一些毫秒级内不能响应客户端的请求。如果数据集巨大并且 CPU 性能不是很好的情况下，这种情况会持续 1 秒，AOF 也需要 <code>fork</code>，但是你可以调节重写日志文件的频率来提高数据集的耐久度。</li><li>不可控、丢失数据。如果你希望在 redis 意外停止工作（例如电源中断）的情况下丢失的数据最少的话，那么 RDB 不适合你。虽然你可以配置不同的 <code>save</code> 时间点(例如每隔 5 分钟并且对数据集有 100 个写的操作)，但是 Redis 要完整的保存整个数据集是一个比较繁重的工作，你通常会每隔 5 分钟或者更久做一次完整的保存，万一在 Redis 意外宕机，你可能会丢失几分钟的数据。</li></ol><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><h3 id="什么是-AOF"><a href="#什么是-AOF" class="headerlink" title="什么是 AOF"></a>什么是 AOF</h3><p>快照功能（RDB）并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、且仍未保存到快照中的那些数据。 从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。</p><p>你可以在配置文件中打开 AOF 方式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>打开 AOF 后， 每当 Redis 执行一个改变数据集的命令时（比如 <code>SET</code>）， 这个命令就会被追加到 AOF 文件的末尾。这样的话， 当 Redis 重新启时， 程序就可以通过重新执行 AOF 文件中的命令来达到重建数据集的目的。</p><h4 id="AOF-运行原理-创建"><a href="#AOF-运行原理-创建" class="headerlink" title="AOF 运行原理 - 创建"></a>AOF 运行原理 - 创建</h4><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/7.jpg" alt="创建AOF" loading="lazy"></p><h4 id="AOF-运行原理-恢复"><a href="#AOF-运行原理-恢复" class="headerlink" title="AOF 运行原理 - 恢复"></a>AOF 运行原理 - 恢复</h4><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/8.jpg" alt="AOF运行原理 - 恢复" loading="lazy"></p><h3 id="AOF-持久化的三种策略"><a href="#AOF-持久化的三种策略" class="headerlink" title="AOF 持久化的三种策略"></a>AOF 持久化的三种策略</h3><p>你可以通过配置文件配置 Redis 多久才将数据 fsync 到磁盘一次。</p><h4 id="always"><a href="#always" class="headerlink" title="always"></a>always</h4><p>每次有新命令追加到 AOF 文件时就执行一次 fsync ：非常慢，也非常安全。</p><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/9.jpg" alt="always" loading="lazy"></p><h4 id="everysec"><a href="#everysec" class="headerlink" title="everysec"></a>everysec</h4><p>每秒 fsync 一次：足够快（和使用 RDB 持久化差不多），并且在故障时只会丢失 1 秒钟的数据。<br>推荐（并且也是默认）的措施为每秒 fsync 一次， 这种 fsync 策略可以兼顾速度和安全性。</p><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/10.jpg" alt="everysec" loading="lazy"></p><h4 id="no"><a href="#no" class="headerlink" title="no"></a>no</h4><p>从不 fsync ：将数据交给操作系统来处理，由操作系统来决定什么时候同步数据。更快，也更不安全的选择。</p><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/11.jpg" alt="no" loading="lazy"></p><h4 id="always、everysec、no-对比"><a href="#always、everysec、no-对比" class="headerlink" title="always、everysec、no 对比"></a>always、everysec、no 对比</h4><table><thead><tr><th align="center">命令</th><th align="center">优点</th><th align="center">缺点</th></tr></thead><tbody><tr><td align="center">always</td><td align="center">不丢失数据</td><td align="center">IO开销大，一般SATA磁盘只有几百TPS</td></tr><tr><td align="center">everysec</td><td align="center">每秒进行与fsync，最多丢失1秒数据</td><td align="center">可能丢失1秒数据</td></tr><tr><td align="center">no</td><td align="center">不用管</td><td align="center">不可控</td></tr></tbody></table><p>推荐（并且也是默认）的措施为每秒 fsync 一次， 这种 fsync 策略可以兼顾速度和安全性。</p><h3 id="AOF-重写"><a href="#AOF-重写" class="headerlink" title="AOF 重写"></a>AOF 重写</h3><p>因为 AOF 的运作方式是不断地将命令追加到文件的末尾， 所以随着写入命令的不断增加， AOF 文件的体积也会变得越来越大。举个例子， 如果你对一个计数器调用了 100 次 INCR ， 那么仅仅是为了保存这个计数器的当前值， AOF 文件就需要使用 100 条记录（entry）。然而在实际上， 只使用一条 <code>SET</code> 命令已经足以保存计数器的当前值了， 其余 99 条记录实际上都是多余的。<br>为了处理这种情况， Redis 支持一种有趣的特性： 可以在不打断服务客户端的情况下， 对 AOF 文件进行重建（rebuild）。执行 <code>bgrewriteaof</code> 命令， Redis 将生成一个新的 AOF 文件， 这个文件包含重建当前数据集所需的最少命令。<br>Redis 2.2 需要自己手动执行 <code>bgrewriteaof</code> 命令； Redis 2.4 则可以通过配置自动触发 AOF 重写。</p><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/12.jpg" alt="AOF重写" loading="lazy"></p><h4 id="AOF-重写的作用"><a href="#AOF-重写的作用" class="headerlink" title="AOF 重写的作用"></a>AOF 重写的作用</h4><ul><li>减少磁盘占用量</li><li>加速数据恢复</li></ul><h4 id="AOF-重写的实现方式"><a href="#AOF-重写的实现方式" class="headerlink" title="AOF 重写的实现方式"></a>AOF 重写的实现方式</h4><ul><li><code>bgrewriteaof</code> 命令</li></ul><p>Redis <code>bgrewriteaof</code> 命令用于异步执行一个 AOF（AppendOnly File）文件重写操作。重写会创建一个当前AOF文件的体积优化版本。<br>即使 <code>bgrewriteaof</code> 执行失败，也不会有任何数据丢失，因为旧的AOF文件在 <code>bgrewriteaof</code> 成功之前不会被修改。<br>AOF 重写由 Redis 自行触发，<code>bgrewriteaof</code> 仅仅用于手动触发重写操作。</p><div class="note primary"><p>具体内容：</p><ul><li>如果一个子 Redis 是通过磁盘快照创建的，AOF 重写将会在 RDB 终止后才开始保存。这种情况下 <code>BGREWRITEAOF</code> 仍然会返回 OK 状态码。从 Redis 2.6 起你可以通过 <code>INFO</code> 命令查看 AOF 重写执行情况。</li><li>如果正在执行的 AOF 重写返回一个错误，AOF 重写将会在稍后一点的时间重新调用。</li></ul></div><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/13.jpg" alt="bgrewriteaof命令" loading="lazy"></p><ul><li>AOF 重写配置</li></ul><table><thead><tr><th align="center">配置名</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">auto-aof-rewrite-min-size</td><td align="center">触发AOF文件执行重写的最小尺寸</td></tr><tr><td align="center">auto-aof-rewrite-percentage</td><td align="center">触发AOF文件执行重写的增长率</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">统计名</td><td align="center">含义</td></tr><tr><td align="center">aof_current_size</td><td align="center">AOF文件当前尺寸（字节）</td></tr><tr><td align="center">aof_base_size</td><td align="center">AOF文件上次启动和重写时的尺寸（字节）</td></tr></tbody></table><div class="note success"><p>AOF 重写自动触发机制，需要同时满足下面两个条件：</p><ul><li>aof_current_size &gt; auto-aof-rewrite-min-size</li><li>(aof_current_size - aof_base_size) * 100 &#x2F; aof_base_size &gt; auto-aof-rewrite-percentage</li></ul></div><p>假设 Redis 的配置项为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br></pre></td></tr></table></figure><p>当 AOF 文件的体积大于 64 Mb，并且 AOF 文件的体积比上一次重写之久的体积大了至少一倍（100%）时，Redis 将执行 <code>bgrewriteaof</code> 命令进行重写。</p><h4 id="AOF-重写的流程"><a href="#AOF-重写的流程" class="headerlink" title="AOF 重写的流程"></a>AOF 重写的流程</h4><p><img src="/images/Redis%E6%8C%81%E4%B9%85%E5%8C%96-RDB%E5%92%8CAOF/14.jpg" alt="AOF重写的流程*" loading="lazy"></p><h3 id="AOF-相关配置"><a href="#AOF-相关配置" class="headerlink" title="AOF 相关配置"></a>AOF 相关配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启AOF持久化方式</span></span><br><span class="line">appendonly <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AOF持久化文件名</span></span><br><span class="line">appendfilename appendonly-&lt;port&gt;.aof</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每秒把缓冲区的数据同步到磁盘</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据持久化文件存储目录</span></span><br><span class="line"><span class="built_in">dir</span> /var/lib/redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否在执行重写时不同步数据到AOF文件</span></span><br><span class="line"><span class="comment"># 这里的 yes，就是执行重写时不同步数据到AOF文件</span></span><br><span class="line">no-appendfsync-on-rewrite <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发AOF文件执行重写的最小尺寸</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发AOF文件执行重写的增长率</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br></pre></td></tr></table></figure><h3 id="AOF-的优点"><a href="#AOF-的优点" class="headerlink" title="AOF 的优点"></a>AOF 的优点</h3><ol><li>使用AOF 会让你的 Redis 更加耐久，你可以使用不同的 fsync 策略：无 fsync，每秒 fsync，每次写的时候 fsync。使用默认的每秒 fsync 策略，Redis 的性能依然很好(fsync 是由后台线程进行处理的，主线程会尽力处理客户端请求)，一旦出现故障，你最多丢失 1 秒的数据。</li><li>AOF 文件是一个只进行追加的日志文件，所以不需要写入 seek，即使由于某些原因(磁盘空间已满，写的过程中宕机等等)未执行完整的写入命令，你也也可使用 redis-check-aof 工具修复这些问题。</li><li>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写：重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。</li><li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 <code>FLUSHALL</code> 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 <code>FLUSHALL</code> 命令， 并重启 Redis ， 就可以将数据集恢复到 <code>FLUSHALL</code> 执行之前的状态。</li></ol><h3 id="AOF-的缺点"><a href="#AOF-的缺点" class="headerlink" title="AOF 的缺点"></a>AOF 的缺点</h3><ol><li>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。</li><li>根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。</li></ol><h2 id="RDB-和-AOF-的抉择"><a href="#RDB-和-AOF-的抉择" class="headerlink" title="RDB 和 AOF 的抉择"></a>RDB 和 AOF 的抉择</h2><h3 id="RDB-和-AOF-对比"><a href="#RDB-和-AOF-对比" class="headerlink" title="RDB 和 AOF 对比"></a>RDB 和 AOF 对比</h3><table><thead><tr><th align="center">-</th><th align="center">RDB</th><th align="center">AOF</th></tr></thead><tbody><tr><td align="center">启动优先级</td><td align="center">低</td><td align="center">高</td></tr><tr><td align="center">体积</td><td align="center">小</td><td align="center">大</td></tr><tr><td align="center">恢复速度</td><td align="center">快</td><td align="center">慢</td></tr><tr><td align="center">数据安全性</td><td align="center">丢数据</td><td align="center">根据策略决定</td></tr></tbody></table><h3 id="如何选择使用哪种持久化方式？"><a href="#如何选择使用哪种持久化方式？" class="headerlink" title="如何选择使用哪种持久化方式？"></a>如何选择使用哪种持久化方式？</h3><p>一般来说， 如果想达到足以媲美 PostgreSQL 的数据安全性， 你应该同时使用两种持久化功能。<br>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久化。<br>有很多用户都只使用 AOF 持久化， 但并不推荐这种方式：因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="Redis" scheme="http://www.isee.wang/categories/Redis/"/>
    
    
    <category term="Redis持久化" scheme="http://www.isee.wang/tags/Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="RDB" scheme="http://www.isee.wang/tags/RDB/"/>
    
    <category term="AOF" scheme="http://www.isee.wang/tags/AOF/"/>
    
  </entry>
  
  <entry>
    <title>如何在项目中优雅的校验参数</title>
    <link href="http://www.isee.wang/%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E6%A0%A1%E9%AA%8C%E5%8F%82%E6%95%B0/"/>
    <id>http://www.isee.wang/%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E6%A0%A1%E9%AA%8C%E5%8F%82%E6%95%B0/</id>
    <published>2021-02-05T06:28:01.000Z</published>
    <updated>2023-06-05T01:22:42.497Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><h2 id="本文看点"><a href="#本文看点" class="headerlink" title="本文看点"></a>本文看点</h2><p><img src="https://dggtechtest.oss-cn-beijing.aliyuncs.com/93e59f718c2342dba75862c2b378139a_1357597123574648832.jpg" loading="lazy"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>验证数据是贯穿所有应用程序层(从表示层到持久层)的常见任务。通常在每一层实现相同的验证逻辑，这既费时又容易出错。为了避免重复这些验证，开发人员经常将验证逻辑直接捆绑到域模型中，将域类与验证代码混在一起，这些验证代码实际上是关于类本身的元数据，与业务逻辑不相关。</p><p><img src="https://dggtechtest.oss-cn-beijing.aliyuncs.com/e5270bc180474845beeec3471f8a34fd_1357597326994198528.png" loading="lazy"></p><p>JSR 380 — Bean Validation2.0 — 定义了用于实体和方法验证的元数据模型和 API，将数据校验逻辑通过注解的形式封装在实体对象中。</p><p><img src="https://dggtechtest.oss-cn-beijing.aliyuncs.com/72a05dcf791747fc96bc3e42cc06271a_1357597413434609664.png" loading="lazy"></p><h2 id="关于JSR"><a href="#关于JSR" class="headerlink" title="关于JSR"></a>关于JSR</h2><p>JSR 是 Java Specification Requests 的缩写，意思是 Java 规范提案。是指向 JCP(Java Community Process) 提出新增一个标准化技术规范的正式请求。任何人都可以提交 JSR，以向 Java 平台增添新的 API 和服务。JSR 已成为 Java 界的一个重要标准。</p><p>JSR-303 是 JAVA EE 6 中的一项子规范，后来的版本是 Bean Validation 1.1（JSR-349），目前最新版本是 Bean Validation 2.0（JSR-380），Hibernate Validator 是 Bean Validation 的参考实现 ，除了 Jakarta Bean 验证 API 定义的约束之外，Hibernate Validator 还有一些附加的 constraint；并且 spring-boot-starter-web 默认集成了 Hibernate Validator。（springboot 2.3 版本已经移除 hibernate-validator 的依赖，需要手动引入）</p><p><img src="https://dggtechtest.oss-cn-beijing.aliyuncs.com/7e6556ed03fc4e7fad715e84955e7c02_1357577860008792064.png" loading="lazy"></p><h2 id="为什么使用-Hibernate-Validator"><a href="#为什么使用-Hibernate-Validator" class="headerlink" title="为什么使用 Hibernate Validator"></a>为什么使用 Hibernate Validator</h2><ul><li>提高代码整洁度</li><li>验证逻辑与业务逻辑之间进行了分离，降低了程序耦合度</li><li>统一且规范的验证方式，无需你再次编写重复的验证代码</li><li>你将更专注于你的业务，将这些繁琐的事情统统丢在一边</li></ul><h2 id="注解介绍"><a href="#注解介绍" class="headerlink" title="注解介绍"></a>注解介绍</h2><h3 id="JSR-380内置常用注解"><a href="#JSR-380内置常用注解" class="headerlink" title="JSR 380内置常用注解"></a>JSR 380内置常用注解</h3><table><thead><tr><th align="center">注解</th><th align="center">详细信息</th></tr></thead><tbody><tr><td align="center">@Null</td><td align="center">被注释的元素必须为 null</td></tr><tr><td align="center">@NotNull</td><td align="center">被注释的元素必须不为 null</td></tr><tr><td align="center">@AssertTrue</td><td align="center">被注释的元素必须为 true</td></tr><tr><td align="center">@AssertFalse</td><td align="center">被注释的元素必须为 false</td></tr><tr><td align="center">@Min(value)</td><td align="center">被注释的元素可以是字符串、数值类型，如果元素是字符串类型，将值转为BigDecimal类型，并与value属性进行比对，值必须大于等于指定的value值</td></tr><tr><td align="center">@Max(value)</td><td align="center">被注释的元素可以是字符串、数值类型，如果元素是字符串类型，将值转为BigDecimal类型，并与value属性进行比对，值必须小于等于指定的value值</td></tr><tr><td align="center">@DecimalMin(value)</td><td align="center">被注释的元素可以是字符串、数值（可以带小数点），将注解内value的值转为BigDecimal类型，必须大于等于指定的最小值（可以配置是否等于value，默认是包含的）</td></tr><tr><td align="center">@DecimalMax(value)</td><td align="center">被注释的元素可以是字符串、数值（可以带小数点），将注解内value的值转为BigDecimal类型，其值必须小于等于指定的最大值（可以配置是否等于value，默认是包含的）</td></tr><tr><td align="center">@Size(max, min)</td><td align="center">被注释的元素的大小必须在指定的范围内，可用于字符串、Collection、Map、数组等类型</td></tr><tr><td align="center">@Digits(integer, fraction)</td><td align="center">被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td align="center">@Past</td><td align="center">被注释的元素必须是一个过去的日期</td></tr><tr><td align="center">@Future</td><td align="center">被注释的元素必须是一个将来的日期</td></tr><tr><td align="center">@Pattern(value)</td><td align="center">被注释的元素必须符合指定的正则表达式</td></tr><tr><td align="center">@Email</td><td align="center">被注释的元素必须是电子邮箱地址</td></tr><tr><td align="center">@NotBlank</td><td align="center">验证字符串非null，且trim后长度必须大于0</td></tr><tr><td align="center">@NotEmpty</td><td align="center">适用于String、Collection、Map或者数组不能为Null且长度或元素个数必须大于0</td></tr><tr><td align="center">@Valid</td><td align="center">具体作用下面会列举</td></tr></tbody></table><h3 id="Hibernate-Validator-附加的-constraint"><a href="#Hibernate-Validator-附加的-constraint" class="headerlink" title="Hibernate Validator 附加的 constraint"></a>Hibernate Validator 附加的 constraint</h3><table><thead><tr><th align="center">注解</th><th align="center">详细信息</th></tr></thead><tbody><tr><td align="center">@Length</td><td align="center">被注释的字符串的大小必须在指定的范围内</td></tr><tr><td align="center">@URL</td><td align="center">根据RFC2396标准校验注释的字符串必须是一个的有效的url</td></tr><tr><td align="center">@Range</td><td align="center">被注释的元素必须在合适的范围内，应用于数值或字符串</td></tr><tr><td align="center">@UniqueElements</td><td align="center">检查带注释的集合是否只包含唯一的元素。相等性是使用equals()方法确定的</td></tr><tr><td align="center">@SafeHtml</td><td align="center">检查带注释的值是否包含潜在的恶意片段，如&lt;script&#x2F;&gt;。如用这个注解需要引入jsoup的依赖，用来解析html代码</td></tr></tbody></table><h3 id="Validated-与-Valid-的区别"><a href="#Validated-与-Valid-的区别" class="headerlink" title="@Validated 与 @Valid 的区别"></a>@Validated 与 @Valid 的区别</h3><ul><li>@Validated 注解是 spring 提供的，提供了一个分组功能，可以在入参验证时，根据不同的分组采用不同的验证机制。没有添加分组属性时，默认验证没有分组的验证属性（Default 分组）；</li><li>@Validated 可以用在类、方法和方法参数上，但是不能用在成员属性（字段）上；</li><li>@Validated 用在方法入参上无法单独提供嵌套验证功能，也无法提示框架进行嵌套验证。能配合嵌套验证注解 @Valid 进行嵌套验证。</li><li>@Valid 作为标准 JSR-303 规范，还没有吸收分组的功能；</li><li>@Valid 可以用在方法、方法参数、构造函数、方法参数和成员属性（字段）上；</li><li>@Valid 加在方法参数时并不能够自动进行嵌套验证，而是用在需要嵌套验证类的相应字段上，来配合方法参数上 @Validated 或 @Valid 来进行嵌套验证。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>由于 spring-boot-starter-web（springboot 2.3 以下版本）依赖默认集成了 Hibernate Validator，所以无需添加任何依赖和相关配置，只需要在项目中引入 spring-boot-starter-web 依赖即可（演示 springboot 版本为 2.2.10.RELEASE），由于要用到 @SafeHtml 注解，这里需要加上 jsoup 的依赖。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 解析html片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Hibernate Validator 有两种校验模式：</p><ul><li>普通模式(会校验完所有的属性，然后返回所有的验证失败信息，默认是这个模式)</li><li>快速失败返回模式(只要有一个字段验证失败，就返回结果)</li></ul><p>在 @Configuration 类中配置以下代码，将 Validator 设置为快速失败返回模式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Validator <span class="title function_">validator</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ValidatorFactory</span> <span class="variable">validatorFactory</span> <span class="operator">=</span> Validation.byProvider( HibernateValidator.class)</span><br><span class="line">            .configure()</span><br><span class="line">            .addProperty( <span class="string">&quot;hibernate.validator.fail_fast&quot;</span>, <span class="string">&quot;true&quot;</span> )</span><br><span class="line">            .buildValidatorFactory();</span><br><span class="line">    <span class="type">Validator</span> <span class="variable">validator</span> <span class="operator">=</span> validatorFactory.getValidator();</span><br><span class="line">    <span class="keyword">return</span> validator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单个对象校验"><a href="#单个对象校验" class="headerlink" title="单个对象校验"></a>单个对象校验</h3><div class="tabs" id="signal-object-validator"><ul class="nav-tabs"><li class="tab active"><a href="#signal-object-validator-1"><code>User.java</code></a></li><li class="tab"><a href="#signal-object-validator-2"><code>ValidatorController.java</code></a></li><li class="tab"><a href="#signal-object-validator-3"><code>GlobalExceptionHandler.java</code></a></li></ul><div class="tab-content"><div class="tab-pane active" id="signal-object-validator-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//注解对静态变量不生效</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;性别不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;姓名不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 2, max = 5, message = &quot;姓名长度不规范&quot;)</span></span><br><span class="line">    <span class="meta">@CheckCase(value = CaseMode.LOWER, message = &quot;名字的拼音需要小写&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;年龄不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value = 30, message = &quot;年龄超过最大值30&quot;)</span></span><br><span class="line">    <span class="meta">@Range(min = 30, max = 60)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DecimalMax(value = &quot;108.88&quot;, message = &quot;超过最大108.88&quot;, inclusive = false)</span></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Past(message = &quot;生日不能大于当前日期&quot;)</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime birthday;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email(message = &quot;电子邮箱格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SafeHtml(message = &quot;非法请求参数&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="signal-object-validator-2"><p>进入 Controller 对应方法，在需要校验的对象前添加 @Valid 注解即可（校验对静态变量不生效），在使用 @Valid 注解的参数后可以紧跟着一个 BindingResult 类型的参数，用于获取校验结果（将校验结果封装在 BingdingResult 对象中，不会抛出异常）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单个对象校验</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;user&quot;)</span></span><br><span class="line">    <span class="comment">//校验参数后边跟BindingResult,spring不会抛出异常,将校验结果封装在这个对象中</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">person</span><span class="params">(<span class="meta">@Valid</span> User user, BindingResult bindingResult)</span> &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            List&lt;ObjectError&gt; allErrors = bindingResult.getAllErrors();</span><br><span class="line">            <span class="keyword">for</span> (ObjectError error : allErrors) &#123;</span><br><span class="line">                sb.append(error.getDefaultMessage() + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><div class="note warning"><p>@Valid 和 BindingResult 是一一对应的，如果有多个 @Valid，那么每个 @Valid 后面跟着的 BindingResult 就是这个 @Valid 的验证结果，顺序不能乱。</p></div></div><div class="tab-pane" id="signal-object-validator-3"><p>如果此时去掉实体对象后面的 BindingResult，如校验未通过会抛出 BindException 异常，需要在全局异常处理器中捕获并统一处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Slfj</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">//spring-context包里面的异常</span></span><br><span class="line">    <span class="comment">//实体对象前不加@RequestBody注解,单个对象内属性校验未通过抛出的异常类型</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(BindingException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ExceptionResponseVO&gt; <span class="title function_">methodArguments</span><span class="params">(BindingException e)</span> &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;throw BindingException,&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST)</span><br><span class="line">                .body(ExceptionResponseVO.error(NEError.INVALID_PARAMETER, e.getBindingResult().getFieldError().getDefaultMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Validation-api包里面的异常</span></span><br><span class="line">    <span class="comment">//实体对象前不加@RequestBody注解,校验方法参数或方法返回值时,未校验通过时抛出的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ValidationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ExceptionResponseVO&gt; <span class="title function_">methodArguments</span><span class="params">(ValidationException e)</span> &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;throw ValidationException,&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ExceptionResponseVO.error(NEError.INVALID_PARAMETER, e.getCause().getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//spring-context包里面的异常,实体对象前加@RequestBody注解,抛出的异常为该类异常</span></span><br><span class="line">    <span class="comment">//方法参数如果带有@RequestBody注解，那么spring mvc会使用RequestResponseBodyMethodProcessor  //对参数进行序列化,并对参数做校验</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ExceptionResponseVO&gt; <span class="title function_">methodArguments</span><span class="params">(MethodArgumentNotValidException e)</span> &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;throw MethodArgumentNotValidException,&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST)</span><br><span class="line">                .body(ExceptionResponseVO.error(NEError.INVALID_PARAMETER, e.getBindingResult().getFieldError().getDefaultMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity <span class="title function_">methodArguments</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;throw exception,&#123;&#125;&quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.badRequest().body(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h3 id="级联对象校验"><a href="#级联对象校验" class="headerlink" title="级联对象校验"></a>级联对象校验</h3><div class="tabs" id="cascade-object-validator"><ul class="nav-tabs"><li class="tab active"><a href="#cascade-object-validator-1"><code>User2.java</code></a></li><li class="tab"><a href="#cascade-object-validator-2"><code>Goods.java</code></a></li><li class="tab"><a href="#cascade-object-validator-3"><code>ValidatorController.java</code></a></li></ul><div class="tab-content"><div class="tab-pane active" id="cascade-object-validator-1"><p>如果一个对象内部包含另一个对象作为属性，属性上加 @Valid，可以验证作为属性的对象内部的验证。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User2</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;姓名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Max(value = 50, message = &quot;年龄不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;商品不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Goods goods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cascade-object-validator-2"><p>如果一个对象内部包含另一个对象作为属性，属性上加 @Valid，可以验证作为属性的对象内部的验证。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;商品名称不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String goodsName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;商品价格不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double goodsPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="cascade-object-validator-3"><p>如果一个对象内部包含另一个对象作为属性，属性上加 @Valid，可以验证作为属性的对象内部的验证。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;cascade&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">cascade</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User2 user2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div></div></div><h3 id="容器元素校验"><a href="#容器元素校验" class="headerlink" title="容器元素校验"></a>容器元素校验</h3><div class="tabs" id="container-element-validator"><ul class="nav-tabs"><li class="tab active"><a href="#container-element-validator-1"><code>User3.java</code></a></li><li class="tab"><a href="#container-element-validator-2"><code>Goods.java</code></a></li><li class="tab"><a href="#container-element-validator-3"><code>ValidatorController.java</code></a></li></ul><div class="tab-content"><div class="tab-pane active" id="container-element-validator-1"><p>用来校验实体对象内集合中的元素，在容器泛型前加注解，可实现对容器单个元素的校验；如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User3</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;姓名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Max(value = 50, message = &quot;年龄不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;商品列表不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="meta">@NotNull(message = &quot;商品不能为空&quot;)</span> Goods&gt; goodsList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="container-element-validator-2"><p>如果容器元素校验未通过，抛出异常 MethodArgumentNotValidException（与级联校验抛出的一样）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goods</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;商品名称不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String goodsName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;商品价格不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Double goodsPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="container-element-validator-3"><p>如果一个对象内部包含另一个对象作为属性，属性上加 @Valid，可以验证作为属性的对象内部的验证。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;container&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">container</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User3 user3)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div></div></div><h3 id="方法的校验"><a href="#方法的校验" class="headerlink" title="方法的校验"></a>方法的校验</h3><p>JSR 303 标准定义接口 ExecutableValidator，用来校验方法参数，Hibernate Validator 实现了该接口（ValidatorImpl.class），不仅对 Object 的属性进行校验，还可以对方法参数、返回值、构造函数参数等进行校验；Spring 在此基础上进行了扩展，添加了 MethodValidationPostProcessor 拦截器，通过AOP实现对方法的校验；此时抛出的异常是 javax.validation.ConstraintViolationException</p><div class="tabs" id="method-validator"><ul class="nav-tabs"><li class="tab active"><a href="#method-validator-1"><code>ValidatorController.java</code></a></li><li class="tab"><a href="#method-validator-2"><code>UserService.java</code></a></li></ul><div class="tab-content"><div class="tab-pane active" id="method-validator-1"><div class="note warning"><p>必须在 Controller 上面加上注解 @Validated，否则校验规则无效</p></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/nk/validator&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidatorController</span> &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;demo1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">(<span class="meta">@Range(min = 1, max = 100, message = &quot;起始笔数超过区间范围&quot;)</span> <span class="meta">@RequestParam</span> <span class="type">int</span> pageIndex,</span></span><br><span class="line"><span class="params">                        <span class="meta">@Range(min = 1, max = 999, message = &quot;查询笔数超过区间范围&quot;)</span> <span class="meta">@RequestParam</span> <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="method-validator-2"><p>除了校验 Controller 方法外，也可校验 Service（必须是单例的 bean，否则不生效，因为方法参数校验逻辑底层用 AOP 来实现）等方法，用法如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//校验方法参数</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryUserName</span><span class="params">(<span class="meta">@NotNull(message = &quot;用户参数不能为空&quot;)</span> User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getName();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//校验方法返回值</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;用户信息不存在&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><h3 id="分组校验的实现"><a href="#分组校验的实现" class="headerlink" title="分组校验的实现"></a>分组校验的实现</h3><p><code>分组</code></p><p>同一个校验规则，不可能适用于所有的业务场景，对每一个业务场景去编写一个校验规则，又显得特别冗余。实际上我们可以用到 Hibernate-Validator 的分组功能，达到对不同场景做出不同的校验逻辑，减少 DTO 对象的创建。</p><p>比如一个 User 对象，新增的时候不需要检验 id（系统生成），修改的时候需要检验 id 属性，要想复用 Class，就可以使用 Hibernate Validator 的分组。</p><div class="tabs" id="group-validator"><ul class="nav-tabs"><li class="tab active"><a href="#group-validator-1"><code>UserGroup.java</code></a></li><li class="tab"><a href="#group-validator-2"><code>ValidatorController.java</code></a></li></ul><div class="tab-content"><div class="tab-pane active" id="group-validator-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserGroup</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;id不能为空&quot;,groups = UpdateUser.class)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;姓名不能为空&quot;,groups = AddUser.class)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;年龄不能为空&quot;,groups = AddUser.class)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddUser</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UpdateUser</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="group-validator-2"><p>在需要校验的对象前面加 @Validated 注解（不能使用 @Valid 注解），并配置分组 class，此时分组校验规则生效。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分组校验:添加用户</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;addUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">(<span class="meta">@Validated(UserGroup.AddUser.class)</span> UserGroup userGroup)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分组校验:修改用户</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;updateUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateUser</span><span class="params">(<span class="meta">@Validated(UserGroup.UpdateUser.class)</span> UserGroup userGroup)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div></div></div><p>使用分组能极大的复用需要验证的 Class 信息，而不是按业务重复编写冗余的类。</p><div class="note warning"><p>如果指定了校验组，则该属性将不再属于默认的校验组 Default.class，则在省略校验组参数的情况下，将不会校验自定义校验组的属性。</p></div><p><code>组序列</code></p><p>除了按组指定是否验证之外，还可以指定组的验证顺序，前面组验证不通过的，后面组不进行验证；其中 @GroupSequence 提供组序列的形式进行顺序式校验，即先校验 AddUser 分组，如果校验不通过就不进行后续的校验分组了。顺序化的校验，场景更多的是在业务处理类，例如联动的属性验证，值的有效性很大程度上不能从代码的枚举或常量类中来校验。</p><div class="tabs" id="group-sequence-validator"><ul class="nav-tabs"><li class="tab active"><a href="#group-sequence-validator-1"><code>UserDTO.java</code></a></li><li class="tab"><a href="#group-sequence-validator-2"><code>ValidatorController.java</code></a></li></ul><div class="tab-content"><div class="tab-pane active" id="group-sequence-validator-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;id不能为空&quot;,groups = &#123;UpdateUser.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;姓名不能为空&quot;,groups = &#123;AddUser.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;年龄不能为空&quot;,groups = &#123;AddUser.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;版本不能为空&quot;)</span><span class="comment">//不配置goups，默认就是Default分组</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GroupSequence(&#123;AddUser.class, UpdateUser.class, Default.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddUpdateGroup</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddUser</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UpdateUser</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="group-sequence-validator-2"><p>首先校验 AddUser 分组的注解，如果 AddUser 校验不通过，就不会去校验 UpdateUser 和 Default 的分组</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">saveUser</span><span class="params">(<span class="meta">@Validated(UserDTO.AddUpdateGroup.class)</span> UserDTO userDTO)</span>&#123;</span><br><span class="line">        userMapper.addUser(userDTO);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div></div></div><h3 id="自定义-constraint"><a href="#自定义-constraint" class="headerlink" title="自定义 constraint"></a>自定义 constraint</h3><p>一般情况，自定义验证可以解决很多问题；某些业务场景下又需要做一些特别的参数校验，此时，我们可以实现 validator 的接口，自定义验证器。</p><div class="tabs" id="customized-constraint"><ul class="nav-tabs"><li class="tab active"><a href="#customized-constraint-1"><code>Sex.java</code></a></li><li class="tab"><a href="#customized-constraint-2"><code>SexConstraintValidator.java</code></a></li><li class="tab"><a href="#customized-constraint-3"><code>UserDTO.java</code></a></li></ul><div class="tab-content"><div class="tab-pane active" id="customized-constraint-1"><p>创建自定义注解 @Sex，该注解是放在字段上的，也可以根据业务场景放在方法或者 Class 上面）用于判断性别是否符合约束</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = SexConstraintValidator.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Sex &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;性别参数有误&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="customized-constraint-2"><p>创建自定义验证器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SexConstraintValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;Sex, String&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别约束逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> constraintValidatorContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line">        <span class="comment">//如果value为null,那么该校验规则不生效;可搭配@NotNull注解使用,更加灵活</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;男&quot;</span>.equals(value) || <span class="string">&quot;女&quot;</span>.equals(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="customized-constraint-3"><p>要验证的 DTO 对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;id不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;姓名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;年龄不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@NotNull(message = &quot;版本不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">    <span class="meta">@Sex</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><p>在 UserDTO 对象前加 @Valid 注解，可实现对性别字段的合法性校验，sex 只能传入“男”或“女”。</p><p>这只是一个小例子，大家可以根据业务场景自定义参数校验器，例如敏感词校验、预防 sql 注入、js 脚本攻击等等，都可以用自定义校验器来完成。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="java" scheme="http://www.isee.wang/categories/java/"/>
    
    
    <category term="Validator" scheme="http://www.isee.wang/tags/Validator/"/>
    
  </entry>
  
  <entry>
    <title>二级缓存中的 Region 到底是什么？</title>
    <link href="http://www.isee.wang/%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E4%B8%AD%E7%9A%84-Region-%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>http://www.isee.wang/%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E4%B8%AD%E7%9A%84-Region-%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2021-01-15T06:05:54.000Z</published>
    <updated>2023-06-05T01:22:42.496Z</updated>
    
    <content type="html"><![CDATA[<p><span id="more"></span><p>不时有人来询问 J2Cache 里的 Region 到底是什么概念，这里做统一的解答。</p><p>J2Cache 的 Region 来源于 Ehcache 的 Region 概念。</p><p>一般我们在使用像 Redis、Caffeine、Guava Cache 时都没有 Region 这样的概念，特别是 Redis 是一个大哈希表，更没有这个概念。</p><p>在实际的缓存场景中，不同的数据会有不同的 TTL 策略，例如有些缓存数据可以永不失效，而有些缓存我们希望是 30 分钟的有效期，有些是 60 分钟等不同的失效时间策略。在 Redis 我们可以针对不同的 key 设置不同的 TTL 时间。但是一般的 Java 内存缓存框架（如 Ehcache、Caffeine、Guava Cache 等），它没法为每一个 key 设置不同 TTL，因为这样管理起来会非常复杂，而且会检查缓存数据是否失效时性能极差。所以一般内存缓存框架会把一组相同 TTL 策略的缓存数据放在一起进行管理。</p><p>J2Cache 的 Region 概念对应关系如下所示：</p><table><thead><tr><th align="center">Ehcache</th><th align="center">region</th></tr></thead><tbody><tr><td align="center">Caffeine</td><td align="center">Cache</td></tr><tr><td align="center">Guava Cache</td><td align="center">Cache</td></tr></tbody></table><p>像 Caffeine 和 Guava Cache 在存放缓存数据时需要先构建一个 Cache 实例，设定好缓存的时间策略，如下代码所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Caffeine&lt;Object, Object&gt; caffeine = Caffeine.newBuilder();</span><br><span class="line">caffeine = caffeine.maximumSize(size).expireAfterWrite(expire, TimeUnit.SECONDS);</span><br><span class="line">Cache&lt;String, Object&gt; theCache = caffeine.build();</span><br></pre></td></tr></table></figure><p>这时候你才可以往 theCache 写入缓存数据，而不能再单独针对某一个 key 设定不同的 TTL 时间。</p><p>而 Redis 可以让你非常随意的给不同的 key 设置不同的 TTL。</p><p>J2Cache 是内存缓存和 Redis 这类集中式缓存的一个桥梁，因此它只能是兼容两者的特性。</p><p>J2Cache 默认使用 Caffeine 作为一级缓存，其配置文件位于 caffeine.properties 中。一个基本使用场景如下：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># Caffeine configuration</span></span><br><span class="line"><span class="comment"># [name] = size, xxxx[s|m|h|d]</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"></span><br><span class="line"><span class="attr">default</span> = <span class="string">1000, 30m</span></span><br><span class="line"><span class="attr">users</span> = <span class="string">2000, 10m</span></span><br><span class="line"><span class="attr">blogs</span> = <span class="string">5000, 1h</span></span><br></pre></td></tr></table></figure><p>上面的配置定义了三个缓存 Region ，分别是：</p><ol><li>默认缓存，大小是 1000 个对象，TTL 是 30 分钟</li><li>users 缓存，大小是 2000 个对象，TTL 是 10 分钟</li><li>blogs 缓存，大小是 5000 个对象，TTL 是 1 个小时</li></ol><p>例如我们可以用 users 来存放用户对象的缓存，用 blogs 来存放博客对象缓存，两种的 TTL 是不同的。</p><p>而 default 是当我们调用如下方法时：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String region, String key, Object value)</span></span><br></pre></td></tr></table></figure><p>如果我们传入的 region 参数（假设为：region1）没有在 caffeine.properties 中定义的话，那 J2Cache 会自动创建一个名为 region1 的缓存 Region，其配置和 default 的配置一致。</p><p>所以要用好缓存首先要确保以下几点：</p><ol><li>根据业务规划好不同的 region 来存放不同的缓存数据</li><li>根据实际情况确定每个 region 的缓存数据数量和 TTL 时间</li><li>尽量必要未经定义直接使用一个全新的 region （避免使用 default 数据）</li></ol><p>本文转载自：<span class="exturl" data-url="aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC9qYXZheW91L2Jsb2cvMzAzMTc3Mw==">https://my.oschina.net/javayou/blog/3031773<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;</summary>
    
    
    
    <category term="J2Cache" scheme="http://www.isee.wang/categories/J2Cache/"/>
    
    
    <category term="Cache" scheme="http://www.isee.wang/tags/Cache/"/>
    
    <category term="二级缓存" scheme="http://www.isee.wang/tags/%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    
    <category term="Region" scheme="http://www.isee.wang/tags/Region/"/>
    
  </entry>
  
</feed>
